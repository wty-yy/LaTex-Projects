%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <5206><79BB><5E73><9762>.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yy
%%CreationDate: 2022/4/22, 9:36:55
%%BoundingBox: 0 0 504 486
%%HiResBoundingBox: 0 0 503.8000 485.1701
%%CropBox: 0 0 503.8000 485.1701
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2022-04-22T09:33:36+08:00"
   xmp:CreatorTool="Matplotlib v3.5.1, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.1"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -485.17 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 485.17 li
503.8 485.17 li
503.8 0 li
cp
clp
0 485.17 mo
503.8 485.17 li
503.8 0 li
0 0 li
0 485.17 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
50.2 450.72 mo
496.6 450.72 li
496.6 7.2 li
50.2 7.2 li
50.2 450.72 li
f
70.4909 450.72 mo
70.4909 454.22 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
70.4909 450.72 mo
70.4909 454.22 li
@
58.4909 459.036 mo
57.6029 459.036 56.8589 459.708 56.2829 461.052 cv
55.6829 462.396 55.3949 464.196 55.3949 466.428 cv
55.3949 468.828 55.6829 470.676 56.2829 471.972 cv
56.8589 473.292 57.6269 473.94 58.5389 473.94 cv
59.4509 473.94 60.1709 473.292 60.6989 471.972 cv
61.2269 470.676 61.4909 468.828 61.4909 466.428 cv
61.4909 464.196 61.2269 462.396 60.7469 461.052 cv
60.2429 459.708 59.4989 459.036 58.4909 459.036 cv
cp
58.4909 474.684 mo
57.0989 474.684 55.9469 473.964 55.0109 472.524 cv
54.0749 471.084 53.6189 469.068 53.6189 466.428 cv
53.6189 464.004 54.0509 462.036 54.9629 460.548 cv
55.8749 459.06 57.0509 458.292 58.4909 458.292 cv
59.8589 458.292 60.9869 459.012 61.8989 460.452 cv
62.8109 461.892 63.2669 463.884 63.2669 466.452 cv
63.2669 469.02 62.8109 471.036 61.8989 472.5 cv
60.9869 473.964 59.8589 474.684 58.4909 474.684 cv
cp
f
67.4909 474.78 mo
67.1069 474.78 66.7949 474.66 66.5069 474.42 cv
66.2189 474.18 66.0749 473.82 66.0749 473.388 cv
66.0749 472.956 66.2189 472.596 66.5069 472.356 cv
66.7949 472.116 67.1069 471.972 67.4909 471.972 cv
67.8509 471.972 68.1869 472.116 68.4749 472.404 cv
68.7629 472.692 68.9069 473.004 68.9069 473.364 cv
68.9069 473.82 68.7629 474.18 68.4749 474.42 cv
68.1869 474.66 67.8509 474.78 67.4909 474.78 cv
cp
f
82.4909 459.036 mo
81.6029 459.036 80.8589 459.708 80.2829 461.052 cv
79.6829 462.396 79.3949 464.196 79.3949 466.428 cv
79.3949 468.828 79.6829 470.676 80.2829 471.972 cv
80.8589 473.292 81.6269 473.94 82.5389 473.94 cv
83.4509 473.94 84.1709 473.292 84.6989 471.972 cv
85.2269 470.676 85.4909 468.828 85.4909 466.428 cv
85.4909 464.196 85.2269 462.396 84.7469 461.052 cv
84.2429 459.708 83.4989 459.036 82.4909 459.036 cv
cp
82.4909 474.684 mo
81.0989 474.684 79.9469 473.964 79.0109 472.524 cv
78.0749 471.084 77.6189 469.068 77.6189 466.428 cv
77.6189 464.004 78.0509 462.036 78.9629 460.548 cv
79.8749 459.06 81.0509 458.292 82.4909 458.292 cv
83.8589 458.292 84.9869 459.012 85.8989 460.452 cv
86.8109 461.892 87.2669 463.884 87.2669 466.452 cv
87.2669 469.02 86.8109 471.036 85.8989 472.5 cv
84.9869 473.964 83.8589 474.684 82.4909 474.684 cv
cp
f
151.655 450.72 mo
151.655 454.22 li
f
151.655 450.72 mo
151.655 454.22 li
@
139.655 459.036 mo
138.767 459.036 138.023 459.708 137.447 461.052 cv
136.847 462.396 136.559 464.196 136.559 466.428 cv
136.559 468.828 136.847 470.676 137.447 471.972 cv
138.023 473.292 138.791 473.94 139.703 473.94 cv
140.615 473.94 141.335 473.292 141.863 471.972 cv
142.391 470.676 142.655 468.828 142.655 466.428 cv
142.655 464.196 142.391 462.396 141.911 461.052 cv
141.407 459.708 140.663 459.036 139.655 459.036 cv
cp
139.655 474.684 mo
138.263 474.684 137.111 473.964 136.175 472.524 cv
135.239 471.084 134.783 469.068 134.783 466.428 cv
134.783 464.004 135.215 462.036 136.127 460.548 cv
137.039 459.06 138.215 458.292 139.655 458.292 cv
141.023 458.292 142.151 459.012 143.063 460.452 cv
143.975 461.892 144.431 463.884 144.431 466.452 cv
144.431 469.02 143.975 471.036 143.063 472.5 cv
142.151 473.964 141.023 474.684 139.655 474.684 cv
cp
f
148.655 474.78 mo
148.271 474.78 147.959 474.66 147.671 474.42 cv
147.383 474.18 147.239 473.82 147.239 473.388 cv
147.239 472.956 147.383 472.596 147.671 472.356 cv
147.959 472.116 148.271 471.972 148.655 471.972 cv
149.015 471.972 149.351 472.116 149.639 472.404 cv
149.927 472.692 150.071 473.004 150.071 473.364 cv
150.071 473.82 149.927 474.18 149.639 474.42 cv
149.351 474.66 149.015 474.78 148.655 474.78 cv
cp
f
166.367 462.396 mo
166.367 461.292 166.103 460.428 165.623 459.828 cv
165.119 459.252 164.375 458.94 163.367 458.94 cv
162.599 458.94 161.975 459.156 161.447 459.564 cv
160.919 459.972 160.655 460.476 160.655 461.1 cv
160.655 461.484 160.775 461.796 161.039 462.036 cv
161.207 462.276 161.303 462.54 161.303 462.78 cv
161.303 463.116 161.207 463.356 161.063 463.5 cv
160.919 463.644 160.679 463.716 160.367 463.716 cv
159.983 463.716 159.695 463.62 159.479 463.404 cv
159.263 463.188 159.167 462.828 159.167 462.324 cv
159.167 461.028 159.623 460.02 160.559 459.324 cv
161.495 458.652 162.503 458.292 163.559 458.292 cv
165.047 458.292 166.175 458.676 166.895 459.42 cv
167.615 460.164 167.975 461.1 167.975 462.228 cv
167.975 462.996 167.783 463.74 167.447 464.484 cv
167.111 465.228 166.559 465.948 165.815 466.62 cv
163.991 468.396 162.599 469.812 161.639 470.892 cv
160.655 471.996 160.079 472.716 159.911 473.1 cv
165.431 473.1 li
165.983 473.1 166.439 472.884 166.823 472.452 cv
167.207 472.02 167.447 471.348 167.591 470.46 cv
168.167 470.46 li
167.591 474.492 li
158.879 474.492 li
158.879 473.292 li
159.167 472.716 159.695 471.996 160.415 471.132 cv
161.135 470.268 162.071 469.236 163.271 468.036 cv
164.327 466.98 165.119 465.972 165.623 465.036 cv
166.103 464.1 166.367 463.212 166.367 462.396 cv
cp
f
232.818 450.72 mo
232.818 454.22 li
f
232.818 450.72 mo
232.818 454.22 li
@
220.818 459.036 mo
219.93 459.036 219.186 459.708 218.61 461.052 cv
218.01 462.396 217.722 464.196 217.722 466.428 cv
217.722 468.828 218.01 470.676 218.61 471.972 cv
219.186 473.292 219.954 473.94 220.866 473.94 cv
221.778 473.94 222.498 473.292 223.026 471.972 cv
223.554 470.676 223.818 468.828 223.818 466.428 cv
223.818 464.196 223.554 462.396 223.074 461.052 cv
222.57 459.708 221.826 459.036 220.818 459.036 cv
cp
220.818 474.684 mo
219.426 474.684 218.274 473.964 217.338 472.524 cv
216.402 471.084 215.946 469.068 215.946 466.428 cv
215.946 464.004 216.378 462.036 217.29 460.548 cv
218.202 459.06 219.378 458.292 220.818 458.292 cv
222.186 458.292 223.314 459.012 224.226 460.452 cv
225.138 461.892 225.594 463.884 225.594 466.452 cv
225.594 469.02 225.138 471.036 224.226 472.5 cv
223.314 473.964 222.186 474.684 220.818 474.684 cv
cp
f
229.818 474.78 mo
229.434 474.78 229.122 474.66 228.834 474.42 cv
228.546 474.18 228.402 473.82 228.402 473.388 cv
228.402 472.956 228.546 472.596 228.834 472.356 cv
229.122 472.116 229.434 471.972 229.818 471.972 cv
230.178 471.972 230.514 472.116 230.802 472.404 cv
231.09 472.692 231.234 473.004 231.234 473.364 cv
231.234 473.82 231.09 474.18 230.802 474.42 cv
230.514 474.66 230.178 474.78 229.818 474.78 cv
cp
f
247.434 472.716 mo
247.434 473.148 247.554 473.46 247.818 473.652 cv
248.058 473.844 248.418 473.94 248.85 473.94 cv
249.69 473.94 li
249.69 474.492 li
243.498 474.492 li
243.498 473.94 li
244.53 473.94 li
245.034 473.94 245.394 473.844 245.61 473.652 cv
245.826 473.46 245.946 473.148 245.946 472.716 cv
245.946 469.62 li
239.658 469.62 li
239.658 469.164 li
246.498 458.292 li
247.434 458.292 li
247.434 469.068 li
249.978 469.068 li
249.978 469.62 li
247.434 469.62 li
247.434 472.716 li
cp
245.85 460.62 mo
240.498 469.068 li
245.946 469.068 li
245.946 460.62 li
245.85 460.62 li
cp
f
313.982 450.72 mo
313.982 454.22 li
f
313.982 450.72 mo
313.982 454.22 li
@
301.982 459.036 mo
301.094 459.036 300.35 459.708 299.774 461.052 cv
299.174 462.396 298.886 464.196 298.886 466.428 cv
298.886 468.828 299.174 470.676 299.774 471.972 cv
300.35 473.292 301.118 473.94 302.03 473.94 cv
302.942 473.94 303.662 473.292 304.19 471.972 cv
304.718 470.676 304.982 468.828 304.982 466.428 cv
304.982 464.196 304.718 462.396 304.238 461.052 cv
303.734 459.708 302.99 459.036 301.982 459.036 cv
cp
301.982 474.684 mo
300.59 474.684 299.438 473.964 298.502 472.524 cv
297.566 471.084 297.11 469.068 297.11 466.428 cv
297.11 464.004 297.542 462.036 298.454 460.548 cv
299.366 459.06 300.542 458.292 301.982 458.292 cv
303.35 458.292 304.478 459.012 305.39 460.452 cv
306.302 461.892 306.758 463.884 306.758 466.452 cv
306.758 469.02 306.302 471.036 305.39 472.5 cv
304.478 473.964 303.35 474.684 301.982 474.684 cv
cp
f
310.982 474.78 mo
310.598 474.78 310.286 474.66 309.998 474.42 cv
309.71 474.18 309.566 473.82 309.566 473.388 cv
309.566 472.956 309.71 472.596 309.998 472.356 cv
310.286 472.116 310.598 471.972 310.982 471.972 cv
311.342 471.972 311.678 472.116 311.966 472.404 cv
312.254 472.692 312.398 473.004 312.398 473.364 cv
312.398 473.82 312.254 474.18 311.966 474.42 cv
311.678 474.66 311.342 474.78 310.982 474.78 cv
cp
f
322.886 468.132 mo
322.886 470.004 323.198 471.468 323.87 472.5 cv
324.518 473.532 325.31 474.036 326.246 474.036 cv
327.182 474.036 327.902 473.7 328.406 473.004 cv
328.91 472.332 329.174 471.036 329.174 469.164 cv
329.174 467.916 328.886 466.956 328.358 466.26 cv
327.83 465.588 327.206 465.228 326.486 465.228 cv
325.766 465.228 325.118 465.444 324.518 465.828 cv
323.918 466.236 323.366 467.004 322.886 468.132 cv
cp
326.534 464.292 mo
328.022 464.292 329.102 464.796 329.774 465.804 cv
330.422 466.812 330.758 467.916 330.758 469.164 cv
330.758 471.036 330.302 472.428 329.39 473.34 cv
328.478 474.252 327.446 474.684 326.27 474.684 cv
324.566 474.684 323.27 474.06 322.406 472.764 cv
321.542 471.492 321.11 469.644 321.11 467.196 cv
321.11 464.316 321.638 462.132 322.694 460.596 cv
323.75 459.06 325.19 458.292 327.014 458.292 cv
327.878 458.292 328.598 458.556 329.126 459.036 cv
329.654 459.54 329.918 459.972 329.918 460.356 cv
329.918 460.74 329.822 461.004 329.678 461.196 cv
329.534 461.388 329.27 461.46 328.934 461.46 cv
328.598 461.46 328.334 461.388 328.19 461.244 cv
328.022 461.1 327.95 460.86 327.95 460.524 cv
327.95 460.428 327.974 460.308 328.046 460.164 cv
328.046 460.044 328.046 459.924 328.046 459.78 cv
328.046 459.54 327.95 459.324 327.758 459.18 cv
327.566 459.036 327.23 458.94 326.726 458.94 cv
325.67 458.94 324.758 459.444 324.014 460.404 cv
323.246 461.364 322.886 463.476 322.886 466.716 cv
323.27 465.9 323.774 465.3 324.446 464.892 cv
325.094 464.508 325.79 464.292 326.534 464.292 cv
cp
f
395.145 450.72 mo
395.145 454.22 li
f
395.145 450.72 mo
395.145 454.22 li
@
383.145 459.036 mo
382.257 459.036 381.513 459.708 380.937 461.052 cv
380.337 462.396 380.049 464.196 380.049 466.428 cv
380.049 468.828 380.337 470.676 380.937 471.972 cv
381.513 473.292 382.281 473.94 383.193 473.94 cv
384.105 473.94 384.825 473.292 385.353 471.972 cv
385.881 470.676 386.145 468.828 386.145 466.428 cv
386.145 464.196 385.881 462.396 385.401 461.052 cv
384.897 459.708 384.153 459.036 383.145 459.036 cv
cp
383.145 474.684 mo
381.753 474.684 380.601 473.964 379.665 472.524 cv
378.729 471.084 378.273 469.068 378.273 466.428 cv
378.273 464.004 378.705 462.036 379.617 460.548 cv
380.529 459.06 381.705 458.292 383.145 458.292 cv
384.513 458.292 385.641 459.012 386.553 460.452 cv
387.465 461.892 387.921 463.884 387.921 466.452 cv
387.921 469.02 387.465 471.036 386.553 472.5 cv
385.641 473.964 384.513 474.684 383.145 474.684 cv
cp
f
392.145 474.78 mo
391.761 474.78 391.449 474.66 391.161 474.42 cv
390.873 474.18 390.729 473.82 390.729 473.388 cv
390.729 472.956 390.873 472.596 391.161 472.356 cv
391.449 472.116 391.761 471.972 392.145 471.972 cv
392.505 471.972 392.841 472.116 393.129 472.404 cv
393.417 472.692 393.561 473.004 393.561 473.364 cv
393.561 473.82 393.417 474.18 393.129 474.42 cv
392.841 474.66 392.505 474.78 392.145 474.78 cv
cp
f
403.497 470.652 mo
403.497 471.66 403.809 472.476 404.481 473.1 cv
405.129 473.724 405.945 474.036 406.953 474.036 cv
408.129 474.036 408.993 473.724 409.521 473.1 cv
410.049 472.476 410.337 471.708 410.337 470.748 cv
410.337 469.932 409.953 469.164 409.209 468.42 cv
408.441 467.676 407.313 466.98 405.825 466.356 cv
405.057 466.86 404.481 467.484 404.097 468.228 cv
403.689 468.996 403.497 469.788 403.497 470.652 cv
cp
411.729 470.46 mo
411.729 471.66 411.273 472.668 410.409 473.484 cv
409.545 474.3 408.393 474.684 406.953 474.684 cv
405.633 474.684 404.505 474.3 403.569 473.484 cv
402.633 472.668 402.177 471.732 402.177 470.676 cv
402.177 469.62 402.441 468.708 402.969 467.94 cv
403.497 467.196 404.265 466.548 405.273 465.972 cv
404.385 465.54 403.713 465.012 403.257 464.34 cv
402.777 463.692 402.561 462.948 402.561 462.132 cv
402.561 461.076 402.945 460.164 403.761 459.42 cv
404.577 458.676 405.705 458.292 407.145 458.292 cv
408.441 458.292 409.521 458.676 410.337 459.42 cv
411.153 460.164 411.561 461.076 411.561 462.132 cv
411.561 462.9 411.321 463.596 410.841 464.244 cv
410.361 464.916 409.641 465.492 408.657 465.972 cv
409.713 466.596 410.481 467.292 410.985 468.036 cv
411.465 468.804 411.729 469.596 411.729 470.46 cv
cp
410.241 462.228 mo
410.241 461.364 409.977 460.596 409.473 459.924 cv
408.969 459.276 408.201 458.94 407.145 458.94 cv
405.945 458.94 405.105 459.252 404.601 459.876 cv
404.097 460.5 403.857 461.172 403.857 461.844 cv
403.857 462.54 404.217 463.212 404.937 463.86 cv
405.657 464.532 406.665 465.108 407.985 465.588 cv
408.729 465.228 409.281 464.772 409.665 464.196 cv
410.049 463.644 410.241 462.996 410.241 462.228 cv
cp
f
476.309 450.72 mo
476.309 454.22 li
f
476.309 450.72 mo
476.309 454.22 li
@
465.149 458.196 mo
465.149 472.428 li
465.149 472.956 465.293 473.34 465.605 473.58 cv
465.917 473.82 466.349 473.94 466.925 473.94 cv
467.861 473.94 li
467.861 474.492 li
461.021 474.492 li
461.021 473.94 li
461.861 473.94 li
462.485 473.94 462.941 473.82 463.229 473.58 cv
463.517 473.34 463.661 472.956 463.661 472.428 cv
463.661 461.1 li
463.661 460.86 463.565 460.644 463.421 460.5 cv
463.253 460.356 463.013 460.26 462.725 460.26 cv
461.021 460.26 li
461.021 459.684 li
461.861 459.684 li
462.605 459.684 463.205 459.564 463.685 459.324 cv
464.165 459.084 464.525 458.7 464.789 458.196 cv
465.149 458.196 li
cp
f
473.309 474.78 mo
472.925 474.78 472.613 474.66 472.325 474.42 cv
472.037 474.18 471.893 473.82 471.893 473.388 cv
471.893 472.956 472.037 472.596 472.325 472.356 cv
472.613 472.116 472.925 471.972 473.309 471.972 cv
473.669 471.972 474.005 472.116 474.293 472.404 cv
474.581 472.692 474.725 473.004 474.725 473.364 cv
474.725 473.82 474.581 474.18 474.293 474.42 cv
474.005 474.66 473.669 474.78 473.309 474.78 cv
cp
f
488.309 459.036 mo
487.421 459.036 486.677 459.708 486.101 461.052 cv
485.501 462.396 485.213 464.196 485.213 466.428 cv
485.213 468.828 485.501 470.676 486.101 471.972 cv
486.677 473.292 487.445 473.94 488.357 473.94 cv
489.269 473.94 489.989 473.292 490.517 471.972 cv
491.045 470.676 491.309 468.828 491.309 466.428 cv
491.309 464.196 491.045 462.396 490.565 461.052 cv
490.061 459.708 489.317 459.036 488.309 459.036 cv
cp
488.309 474.684 mo
486.917 474.684 485.765 473.964 484.829 472.524 cv
483.893 471.084 483.437 469.068 483.437 466.428 cv
483.437 464.004 483.869 462.036 484.781 460.548 cv
485.693 459.06 486.869 458.292 488.309 458.292 cv
489.677 458.292 490.805 459.012 491.717 460.452 cv
492.629 461.892 493.085 463.884 493.085 466.452 cv
493.085 469.02 492.629 471.036 491.717 472.5 cv
490.805 473.964 489.677 474.684 488.309 474.684 cv
cp
f
50.2 433.671 mo
46.7 433.671 li
f
50.2 433.671 mo
46.7 433.671 li
@
13.2 426.409 mo
12.312 426.409 11.568 427.081 10.992 428.425 cv
10.392 429.769 10.104 431.569 10.104 433.801 cv
10.104 436.201 10.392 438.049 10.992 439.345 cv
11.568 440.665 12.336 441.313 13.248 441.313 cv
14.16 441.313 14.88 440.665 15.408 439.345 cv
15.936 438.049 16.2 436.201 16.2 433.801 cv
16.2 431.569 15.936 429.769 15.456 428.425 cv
14.952 427.081 14.208 426.409 13.2 426.409 cv
cp
13.2 442.057 mo
11.808 442.057 10.656 441.337 9.72 439.897 cv
8.784 438.457 8.328 436.441 8.328 433.801 cv
8.328 431.377 8.76 429.409 9.672 427.921 cv
10.584 426.433 11.76 425.665 13.2 425.665 cv
14.568 425.665 15.696 426.385 16.608 427.825 cv
17.52 429.265 17.976 431.257 17.976 433.825 cv
17.976 436.393 17.52 438.409 16.608 439.873 cv
15.696 441.337 14.568 442.057 13.2 442.057 cv
cp
f
22.2 442.153 mo
21.816 442.153 21.504 442.033 21.216 441.793 cv
20.928 441.553 20.784 441.193 20.784 440.761 cv
20.784 440.329 20.928 439.969 21.216 439.729 cv
21.504 439.489 21.816 439.345 22.2 439.345 cv
22.56 439.345 22.896 439.489 23.184 439.777 cv
23.472 440.065 23.616 440.377 23.616 440.737 cv
23.616 441.193 23.472 441.553 23.184 441.793 cv
22.896 442.033 22.56 442.153 22.2 442.153 cv
cp
f
37.2 426.409 mo
36.312 426.409 35.568 427.081 34.992 428.425 cv
34.392 429.769 34.104 431.569 34.104 433.801 cv
34.104 436.201 34.392 438.049 34.992 439.345 cv
35.568 440.665 36.336 441.313 37.248 441.313 cv
38.16 441.313 38.88 440.665 39.408 439.345 cv
39.936 438.049 40.2 436.201 40.2 433.801 cv
40.2 431.569 39.936 429.769 39.456 428.425 cv
38.952 427.081 38.208 426.409 37.2 426.409 cv
cp
37.2 442.057 mo
35.808 442.057 34.656 441.337 33.72 439.897 cv
32.784 438.457 32.328 436.441 32.328 433.801 cv
32.328 431.377 32.76 429.409 33.672 427.921 cv
34.584 426.433 35.76 425.665 37.2 425.665 cv
38.568 425.665 39.696 426.385 40.608 427.825 cv
41.52 429.265 41.976 431.257 41.976 433.825 cv
41.976 436.393 41.52 438.409 40.608 439.873 cv
39.696 441.337 38.568 442.057 37.2 442.057 cv
cp
f
50.2 351.481 mo
46.7 351.481 li
f
50.2 351.481 mo
46.7 351.481 li
@
13.2 344.219 mo
12.312 344.219 11.568 344.891 10.992 346.235 cv
10.392 347.579 10.104 349.379 10.104 351.611 cv
10.104 354.011 10.392 355.859 10.992 357.155 cv
11.568 358.475 12.336 359.123 13.248 359.123 cv
14.16 359.123 14.88 358.475 15.408 357.155 cv
15.936 355.859 16.2 354.011 16.2 351.611 cv
16.2 349.379 15.936 347.579 15.456 346.235 cv
14.952 344.891 14.208 344.219 13.2 344.219 cv
cp
13.2 359.867 mo
11.808 359.867 10.656 359.147 9.72 357.707 cv
8.784 356.267 8.328 354.251 8.328 351.611 cv
8.328 349.187 8.76 347.219 9.672 345.731 cv
10.584 344.243 11.76 343.475 13.2 343.475 cv
14.568 343.475 15.696 344.195 16.608 345.635 cv
17.52 347.075 17.976 349.067 17.976 351.635 cv
17.976 354.203 17.52 356.219 16.608 357.683 cv
15.696 359.147 14.568 359.867 13.2 359.867 cv
cp
f
22.2 359.963 mo
21.816 359.963 21.504 359.843 21.216 359.603 cv
20.928 359.363 20.784 359.003 20.784 358.571 cv
20.784 358.139 20.928 357.779 21.216 357.539 cv
21.504 357.299 21.816 357.155 22.2 357.155 cv
22.56 357.155 22.896 357.299 23.184 357.587 cv
23.472 357.875 23.616 358.187 23.616 358.547 cv
23.616 359.003 23.472 359.363 23.184 359.603 cv
22.896 359.843 22.56 359.963 22.2 359.963 cv
cp
f
39.912 347.579 mo
39.912 346.475 39.648 345.611 39.168 345.011 cv
38.664 344.435 37.92 344.123 36.912 344.123 cv
36.144 344.123 35.52 344.339 34.992 344.747 cv
34.464 345.155 34.2 345.659 34.2 346.283 cv
34.2 346.667 34.32 346.979 34.584 347.219 cv
34.752 347.459 34.848 347.723 34.848 347.963 cv
34.848 348.299 34.752 348.539 34.608 348.683 cv
34.464 348.827 34.224 348.899 33.912 348.899 cv
33.528 348.899 33.24 348.803 33.024 348.587 cv
32.808 348.371 32.712 348.011 32.712 347.507 cv
32.712 346.211 33.168 345.203 34.104 344.507 cv
35.04 343.835 36.048 343.475 37.104 343.475 cv
38.592 343.475 39.72 343.859 40.44 344.603 cv
41.16 345.347 41.52 346.283 41.52 347.411 cv
41.52 348.179 41.328 348.923 40.992 349.667 cv
40.656 350.411 40.104 351.131 39.36 351.803 cv
37.536 353.579 36.144 354.995 35.184 356.075 cv
34.2 357.179 33.624 357.899 33.456 358.283 cv
38.976 358.283 li
39.528 358.283 39.984 358.067 40.368 357.635 cv
40.752 357.203 40.992 356.531 41.136 355.643 cv
41.712 355.643 li
41.136 359.675 li
32.424 359.675 li
32.424 358.475 li
32.712 357.899 33.24 357.179 33.96 356.315 cv
34.68 355.451 35.616 354.419 36.816 353.219 cv
37.872 352.163 38.664 351.155 39.168 350.219 cv
39.648 349.283 39.912 348.395 39.912 347.579 cv
cp
f
50.2 269.29 mo
46.7 269.29 li
f
50.2 269.29 mo
46.7 269.29 li
@
13.2 262.028 mo
12.312 262.028 11.568 262.7 10.992 264.044 cv
10.392 265.388 10.104 267.188 10.104 269.42 cv
10.104 271.82 10.392 273.668 10.992 274.964 cv
11.568 276.284 12.336 276.932 13.248 276.932 cv
14.16 276.932 14.88 276.284 15.408 274.964 cv
15.936 273.668 16.2 271.82 16.2 269.42 cv
16.2 267.188 15.936 265.388 15.456 264.044 cv
14.952 262.7 14.208 262.028 13.2 262.028 cv
cp
13.2 277.676 mo
11.808 277.676 10.656 276.956 9.72 275.516 cv
8.784 274.076 8.328 272.06 8.328 269.42 cv
8.328 266.996 8.76 265.028 9.672 263.54 cv
10.584 262.052 11.76 261.284 13.2 261.284 cv
14.568 261.284 15.696 262.004 16.608 263.444 cv
17.52 264.884 17.976 266.876 17.976 269.444 cv
17.976 272.012 17.52 274.028 16.608 275.492 cv
15.696 276.956 14.568 277.676 13.2 277.676 cv
cp
f
22.2 277.772 mo
21.816 277.772 21.504 277.652 21.216 277.412 cv
20.928 277.172 20.784 276.812 20.784 276.38 cv
20.784 275.948 20.928 275.588 21.216 275.348 cv
21.504 275.108 21.816 274.964 22.2 274.964 cv
22.56 274.964 22.896 275.108 23.184 275.396 cv
23.472 275.684 23.616 275.996 23.616 276.356 cv
23.616 276.812 23.472 277.172 23.184 277.412 cv
22.896 277.652 22.56 277.772 22.2 277.772 cv
cp
f
39.816 275.708 mo
39.816 276.14 39.936 276.452 40.2 276.644 cv
40.44 276.836 40.8 276.932 41.232 276.932 cv
42.072 276.932 li
42.072 277.484 li
35.88 277.484 li
35.88 276.932 li
36.912 276.932 li
37.416 276.932 37.776 276.836 37.992 276.644 cv
38.208 276.452 38.328 276.14 38.328 275.708 cv
38.328 272.612 li
32.04 272.612 li
32.04 272.156 li
38.88 261.284 li
39.816 261.284 li
39.816 272.06 li
42.36 272.06 li
42.36 272.612 li
39.816 272.612 li
39.816 275.708 li
cp
38.232 263.612 mo
32.88 272.06 li
38.328 272.06 li
38.328 263.612 li
38.232 263.612 li
cp
f
50.2 187.1 mo
46.7 187.1 li
f
50.2 187.1 mo
46.7 187.1 li
@
13.2 179.838 mo
12.312 179.838 11.568 180.51 10.992 181.854 cv
10.392 183.198 10.104 184.998 10.104 187.23 cv
10.104 189.63 10.392 191.478 10.992 192.774 cv
11.568 194.094 12.336 194.742 13.248 194.742 cv
14.16 194.742 14.88 194.094 15.408 192.774 cv
15.936 191.478 16.2 189.63 16.2 187.23 cv
16.2 184.998 15.936 183.198 15.456 181.854 cv
14.952 180.51 14.208 179.838 13.2 179.838 cv
cp
13.2 195.486 mo
11.808 195.486 10.656 194.766 9.72 193.326 cv
8.784 191.886 8.328 189.87 8.328 187.23 cv
8.328 184.806 8.76 182.838 9.672 181.35 cv
10.584 179.862 11.76 179.094 13.2 179.094 cv
14.568 179.094 15.696 179.814 16.608 181.254 cv
17.52 182.694 17.976 184.686 17.976 187.254 cv
17.976 189.822 17.52 191.838 16.608 193.302 cv
15.696 194.766 14.568 195.486 13.2 195.486 cv
cp
f
22.2 195.582 mo
21.816 195.582 21.504 195.462 21.216 195.222 cv
20.928 194.982 20.784 194.622 20.784 194.19 cv
20.784 193.758 20.928 193.398 21.216 193.158 cv
21.504 192.918 21.816 192.774 22.2 192.774 cv
22.56 192.774 22.896 192.918 23.184 193.206 cv
23.472 193.494 23.616 193.806 23.616 194.166 cv
23.616 194.622 23.472 194.982 23.184 195.222 cv
22.896 195.462 22.56 195.582 22.2 195.582 cv
cp
f
34.104 188.934 mo
34.104 190.806 34.416 192.27 35.088 193.302 cv
35.736 194.334 36.528 194.838 37.464 194.838 cv
38.4 194.838 39.12 194.502 39.624 193.806 cv
40.128 193.134 40.392 191.838 40.392 189.966 cv
40.392 188.718 40.104 187.758 39.576 187.062 cv
39.048 186.39 38.424 186.03 37.704 186.03 cv
36.984 186.03 36.336 186.246 35.736 186.63 cv
35.136 187.038 34.584 187.806 34.104 188.934 cv
cp
37.752 185.094 mo
39.24 185.094 40.32 185.598 40.992 186.606 cv
41.64 187.614 41.976 188.718 41.976 189.966 cv
41.976 191.838 41.52 193.23 40.608 194.142 cv
39.696 195.054 38.664 195.486 37.488 195.486 cv
35.784 195.486 34.488 194.862 33.624 193.566 cv
32.76 192.294 32.328 190.446 32.328 187.998 cv
32.328 185.118 32.856 182.934 33.912 181.398 cv
34.968 179.862 36.408 179.094 38.232 179.094 cv
39.096 179.094 39.816 179.358 40.344 179.838 cv
40.872 180.342 41.136 180.774 41.136 181.158 cv
41.136 181.542 41.04 181.806 40.896 181.998 cv
40.752 182.19 40.488 182.262 40.152 182.262 cv
39.816 182.262 39.552 182.19 39.408 182.046 cv
39.24 181.902 39.168 181.662 39.168 181.326 cv
39.168 181.23 39.192 181.11 39.264 180.966 cv
39.264 180.846 39.264 180.726 39.264 180.582 cv
39.264 180.342 39.168 180.126 38.976 179.982 cv
38.784 179.838 38.448 179.742 37.944 179.742 cv
36.888 179.742 35.976 180.246 35.232 181.206 cv
34.464 182.166 34.104 184.278 34.104 187.518 cv
34.488 186.702 34.992 186.102 35.664 185.694 cv
36.312 185.31 37.008 185.094 37.752 185.094 cv
cp
f
50.2 104.909 mo
46.7 104.909 li
f
50.2 104.909 mo
46.7 104.909 li
@
13.2 97.6475 mo
12.312 97.6475 11.568 98.3195 10.992 99.6635 cv
10.392 101.007 10.104 102.807 10.104 105.039 cv
10.104 107.439 10.392 109.287 10.992 110.583 cv
11.568 111.903 12.336 112.551 13.248 112.551 cv
14.16 112.551 14.88 111.903 15.408 110.583 cv
15.936 109.287 16.2 107.439 16.2 105.039 cv
16.2 102.807 15.936 101.007 15.456 99.6635 cv
14.952 98.3195 14.208 97.6475 13.2 97.6475 cv
cp
13.2 113.295 mo
11.808 113.295 10.656 112.575 9.72 111.135 cv
8.784 109.695 8.328 107.679 8.328 105.039 cv
8.328 102.615 8.76 100.647 9.672 99.1595 cv
10.584 97.6715 11.76 96.9035 13.2 96.9035 cv
14.568 96.9035 15.696 97.6235 16.608 99.0635 cv
17.52 100.503 17.976 102.495 17.976 105.063 cv
17.976 107.631 17.52 109.647 16.608 111.111 cv
15.696 112.575 14.568 113.295 13.2 113.295 cv
cp
f
22.2 113.391 mo
21.816 113.391 21.504 113.271 21.216 113.031 cv
20.928 112.791 20.784 112.431 20.784 111.999 cv
20.784 111.567 20.928 111.207 21.216 110.967 cv
21.504 110.727 21.816 110.583 22.2 110.583 cv
22.56 110.583 22.896 110.727 23.184 111.015 cv
23.472 111.303 23.616 111.615 23.616 111.975 cv
23.616 112.431 23.472 112.791 23.184 113.031 cv
22.896 113.271 22.56 113.391 22.2 113.391 cv
cp
f
33.552 109.263 mo
33.552 110.271 33.864 111.087 34.536 111.711 cv
35.184 112.335 36 112.647 37.008 112.647 cv
38.184 112.647 39.048 112.335 39.576 111.711 cv
40.104 111.087 40.392 110.319 40.392 109.359 cv
40.392 108.543 40.008 107.775 39.264 107.031 cv
38.496 106.287 37.368 105.591 35.88 104.967 cv
35.112 105.471 34.536 106.095 34.152 106.839 cv
33.744 107.607 33.552 108.399 33.552 109.263 cv
cp
41.784 109.071 mo
41.784 110.271 41.328 111.279 40.464 112.095 cv
39.6 112.911 38.448 113.295 37.008 113.295 cv
35.688 113.295 34.56 112.911 33.624 112.095 cv
32.688 111.279 32.232 110.343 32.232 109.287 cv
32.232 108.231 32.496 107.319 33.024 106.551 cv
33.552 105.807 34.32 105.159 35.328 104.583 cv
34.44 104.151 33.768 103.623 33.312 102.951 cv
32.832 102.303 32.616 101.559 32.616 100.743 cv
32.616 99.6875 33 98.7755 33.816 98.0315 cv
34.632 97.2875 35.76 96.9035 37.2 96.9035 cv
38.496 96.9035 39.576 97.2875 40.392 98.0315 cv
41.208 98.7755 41.616 99.6875 41.616 100.743 cv
41.616 101.511 41.376 102.207 40.896 102.855 cv
40.416 103.527 39.696 104.103 38.712 104.583 cv
39.768 105.207 40.536 105.903 41.04 106.647 cv
41.52 107.415 41.784 108.207 41.784 109.071 cv
cp
40.296 100.839 mo
40.296 99.9755 40.032 99.2075 39.528 98.5355 cv
39.024 97.8875 38.256 97.5515 37.2 97.5515 cv
36 97.5515 35.16 97.8635 34.656 98.4875 cv
34.152 99.1115 33.912 99.7835 33.912 100.455 cv
33.912 101.151 34.272 101.823 34.992 102.471 cv
35.712 103.143 36.72 103.719 38.04 104.199 cv
38.784 103.839 39.336 103.383 39.72 102.807 cv
40.104 102.255 40.296 101.607 40.296 100.839 cv
cp
f
50.2 22.7189 mo
46.7 22.7189 li
f
50.2 22.7189 mo
46.7 22.7189 li
@
14.04 14.617 mo
14.04 28.849 li
14.04 29.377 14.184 29.761 14.496 30.001 cv
14.808 30.241 15.24 30.361 15.816 30.361 cv
16.752 30.361 li
16.752 30.913 li
9.912 30.913 li
9.912 30.361 li
10.752 30.361 li
11.376 30.361 11.832 30.241 12.12 30.001 cv
12.408 29.761 12.552 29.377 12.552 28.849 cv
12.552 17.521 li
12.552 17.281 12.456 17.065 12.312 16.921 cv
12.144 16.777 11.904 16.681 11.616 16.681 cv
9.912 16.681 li
9.912 16.105 li
10.752 16.105 li
11.496 16.105 12.096 15.985 12.576 15.745 cv
13.056 15.505 13.416 15.121 13.68 14.617 cv
14.04 14.617 li
cp
f
22.2 31.201 mo
21.816 31.201 21.504 31.081 21.216 30.841 cv
20.928 30.601 20.784 30.241 20.784 29.809 cv
20.784 29.377 20.928 29.017 21.216 28.777 cv
21.504 28.537 21.816 28.393 22.2 28.393 cv
22.56 28.393 22.896 28.537 23.184 28.825 cv
23.472 29.113 23.616 29.425 23.616 29.785 cv
23.616 30.241 23.472 30.601 23.184 30.841 cv
22.896 31.081 22.56 31.201 22.2 31.201 cv
cp
f
37.2 15.457 mo
36.312 15.457 35.568 16.129 34.992 17.473 cv
34.392 18.817 34.104 20.617 34.104 22.849 cv
34.104 25.249 34.392 27.097 34.992 28.393 cv
35.568 29.713 36.336 30.361 37.248 30.361 cv
38.16 30.361 38.88 29.713 39.408 28.393 cv
39.936 27.097 40.2 25.249 40.2 22.849 cv
40.2 20.617 39.936 18.817 39.456 17.473 cv
38.952 16.129 38.208 15.457 37.2 15.457 cv
cp
37.2 31.105 mo
35.808 31.105 34.656 30.385 33.72 28.945 cv
32.784 27.505 32.328 25.489 32.328 22.849 cv
32.328 20.425 32.76 18.457 33.672 16.969 cv
34.584 15.481 35.76 14.713 37.2 14.713 cv
38.568 14.713 39.696 15.433 40.608 16.873 cv
41.52 18.313 41.976 20.305 41.976 22.873 cv
41.976 25.441 41.52 27.457 40.608 28.921 cv
39.696 30.385 38.568 31.105 37.2 31.105 cv
cp
f
1.5 lw
2 lc
70.4909 104.909 mo
78.7729 109.941 li
87.0549 114.973 li
95.3369 120.006 li
103.619 125.038 li
111.901 130.07 li
120.183 135.102 li
128.465 140.134 li
136.747 145.166 li
145.029 150.198 li
153.311 155.23 li
161.593 160.262 li
169.875 165.294 li
178.157 170.326 li
186.439 175.358 li
194.721 180.39 li
203.003 185.422 li
211.285 190.455 li
219.567 195.487 li
227.849 200.519 li
236.131 205.551 li
244.413 210.583 li
252.695 215.615 li
260.977 220.647 li
269.259 225.679 li
277.541 230.711 li
285.823 235.743 li
294.105 240.775 li
302.387 245.807 li
310.669 250.839 li
318.951 255.871 li
327.233 260.904 li
335.515 265.936 li
343.797 270.968 li
352.079 276 li
360.361 281.032 li
368.643 286.064 li
376.925 291.096 li
385.207 296.128 li
393.489 301.16 li
401.771 306.192 li
410.053 311.224 li
418.335 316.256 li
426.617 321.288 li
434.899 326.32 li
443.181 331.352 li
451.463 336.385 li
459.745 341.417 li
468.027 346.449 li
476.309 351.481 li
/1 
[/DeviceCMYK] /CSA add_res
.112612 .952178 .88159 0 cmyk
@
80.985 421.432 mo
81.7806 421.432 82.5437 421.116 83.1063 420.553 cv
83.6689 419.99 83.985 419.227 83.985 418.432 cv
83.985 417.636 83.6689 416.873 83.1063 416.31 cv
82.5437 415.748 81.7806 415.432 80.985 415.432 cv
80.1894 415.432 79.4263 415.748 78.8637 416.31 cv
78.3011 416.873 77.985 417.636 77.985 418.432 cv
77.985 419.227 78.3011 419.99 78.8637 420.553 cv
79.4263 421.116 80.1894 421.432 80.985 421.432 cv
cp
.817868 .452186 .0811475 0 cmyk
f
1 lw
0 lc
80.985 421.432 mo
81.7806 421.432 82.5437 421.116 83.1063 420.553 cv
83.6689 419.99 83.985 419.227 83.985 418.432 cv
83.985 417.636 83.6689 416.873 83.1063 416.31 cv
82.5437 415.748 81.7806 415.432 80.985 415.432 cv
80.1894 415.432 79.4263 415.748 78.8637 416.31 cv
78.3011 416.873 77.985 417.636 77.985 418.432 cv
77.985 419.227 78.3011 419.99 78.8637 420.553 cv
79.4263 421.116 80.1894 421.432 80.985 421.432 cv
cp
@
233.399 354.93 mo
234.195 354.93 234.958 354.614 235.52 354.051 cv
236.083 353.489 236.399 352.726 236.399 351.93 cv
236.399 351.134 236.083 350.371 235.52 349.809 cv
234.958 349.246 234.195 348.93 233.399 348.93 cv
232.603 348.93 231.84 349.246 231.278 349.809 cv
230.715 350.371 230.399 351.134 230.399 351.93 cv
230.399 352.726 230.715 353.489 231.278 354.051 cv
231.84 354.614 232.603 354.93 233.399 354.93 cv
cp
f
233.399 354.93 mo
234.195 354.93 234.958 354.614 235.52 354.051 cv
236.083 353.489 236.399 352.726 236.399 351.93 cv
236.399 351.134 236.083 350.371 235.52 349.809 cv
234.958 349.246 234.195 348.93 233.399 348.93 cv
232.603 348.93 231.84 349.246 231.278 349.809 cv
230.715 350.371 230.399 351.134 230.399 351.93 cv
230.399 352.726 230.715 353.489 231.278 354.051 cv
231.84 354.614 232.603 354.93 233.399 354.93 cv
cp
@
420.513 217.182 mo
421.308 217.182 422.071 216.866 422.634 216.303 cv
423.197 215.741 423.513 214.977 423.513 214.182 cv
423.513 213.386 423.197 212.623 422.634 212.06 cv
422.071 211.498 421.308 211.182 420.513 211.182 cv
419.717 211.182 418.954 211.498 418.391 212.06 cv
417.829 212.623 417.513 213.386 417.513 214.182 cv
417.513 214.977 417.829 215.741 418.391 216.303 cv
418.954 216.866 419.717 217.182 420.513 217.182 cv
cp
f
420.513 217.182 mo
421.308 217.182 422.071 216.866 422.634 216.303 cv
423.197 215.741 423.513 214.977 423.513 214.182 cv
423.513 213.386 423.197 212.623 422.634 212.06 cv
422.071 211.498 421.308 211.182 420.513 211.182 cv
419.717 211.182 418.954 211.498 418.391 212.06 cv
417.829 212.623 417.513 213.386 417.513 214.182 cv
417.513 214.977 417.829 215.741 418.391 216.303 cv
418.954 216.866 419.717 217.182 420.513 217.182 cv
cp
@
437.159 264.292 mo
437.955 264.292 438.718 263.976 439.281 263.414 cv
439.843 262.851 440.159 262.088 440.159 261.292 cv
440.159 260.497 439.843 259.733 439.281 259.171 cv
438.718 258.608 437.955 258.292 437.159 258.292 cv
436.364 258.292 435.601 258.608 435.038 259.171 cv
434.475 259.733 434.159 260.497 434.159 261.292 cv
434.159 262.088 434.475 262.851 435.038 263.414 cv
435.601 263.976 436.364 264.292 437.159 264.292 cv
cp
f
437.159 264.292 mo
437.955 264.292 438.718 263.976 439.281 263.414 cv
439.843 262.851 440.159 262.088 440.159 261.292 cv
440.159 260.497 439.843 259.733 439.281 259.171 cv
438.718 258.608 437.955 258.292 437.159 258.292 cv
436.364 258.292 435.601 258.608 435.038 259.171 cv
434.475 259.733 434.159 260.497 434.159 261.292 cv
434.159 262.088 434.475 262.851 435.038 263.414 cv
435.601 263.976 436.364 264.292 437.159 264.292 cv
cp
@
374.272 293.937 mo
375.067 293.937 375.831 293.621 376.393 293.058 cv
376.956 292.496 377.272 291.732 377.272 290.937 cv
377.272 290.141 376.956 289.378 376.393 288.815 cv
375.831 288.253 375.067 287.937 374.272 287.937 cv
373.476 287.937 372.713 288.253 372.15 288.815 cv
371.588 289.378 371.272 290.141 371.272 290.937 cv
371.272 291.732 371.588 292.496 372.15 293.058 cv
372.713 293.621 373.476 293.937 374.272 293.937 cv
cp
f
374.272 293.937 mo
375.067 293.937 375.831 293.621 376.393 293.058 cv
376.956 292.496 377.272 291.732 377.272 290.937 cv
377.272 290.141 376.956 289.378 376.393 288.815 cv
375.831 288.253 375.067 287.937 374.272 287.937 cv
373.476 287.937 372.713 288.253 372.15 288.815 cv
371.588 289.378 371.272 290.141 371.272 290.937 cv
371.272 291.732 371.588 292.496 372.15 293.058 cv
372.713 293.621 373.476 293.937 374.272 293.937 cv
cp
@
344.583 177.227 mo
345.379 177.227 346.142 176.911 346.705 176.348 cv
347.267 175.786 347.583 175.023 347.583 174.227 cv
347.583 173.431 347.267 172.668 346.705 172.106 cv
346.142 171.543 345.379 171.227 344.583 171.227 cv
343.788 171.227 343.025 171.543 342.462 172.106 cv
341.899 172.668 341.583 173.431 341.583 174.227 cv
341.583 175.023 341.899 175.786 342.462 176.348 cv
343.025 176.911 343.788 177.227 344.583 177.227 cv
cp
f
344.583 177.227 mo
345.379 177.227 346.142 176.911 346.705 176.348 cv
347.267 175.786 347.583 175.023 347.583 174.227 cv
347.583 173.431 347.267 172.668 346.705 172.106 cv
346.142 171.543 345.379 171.227 344.583 171.227 cv
343.788 171.227 343.025 171.543 342.462 172.106 cv
341.899 172.668 341.583 173.431 341.583 174.227 cv
341.583 175.023 341.899 175.786 342.462 176.348 cv
343.025 176.911 343.788 177.227 344.583 177.227 cv
cp
@
198.075 427.754 mo
198.871 427.754 199.634 427.438 200.196 426.875 cv
200.759 426.313 201.075 425.55 201.075 424.754 cv
201.075 423.958 200.759 423.195 200.196 422.633 cv
199.634 422.07 198.871 421.754 198.075 421.754 cv
197.279 421.754 196.516 422.07 195.954 422.633 cv
195.391 423.195 195.075 423.958 195.075 424.754 cv
195.075 425.55 195.391 426.313 195.954 426.875 cv
196.516 427.438 197.279 427.754 198.075 427.754 cv
cp
f
198.075 427.754 mo
198.871 427.754 199.634 427.438 200.196 426.875 cv
200.759 426.313 201.075 425.55 201.075 424.754 cv
201.075 423.958 200.759 423.195 200.196 422.633 cv
199.634 422.07 198.871 421.754 198.075 421.754 cv
197.279 421.754 196.516 422.07 195.954 422.633 cv
195.391 423.195 195.075 423.958 195.075 424.754 cv
195.075 425.55 195.391 426.313 195.954 426.875 cv
196.516 427.438 197.279 427.754 198.075 427.754 cv
cp
@
336.29 373.088 mo
337.085 373.088 337.849 372.772 338.411 372.209 cv
338.974 371.647 339.29 370.884 339.29 370.088 cv
339.29 369.292 338.974 368.529 338.411 367.967 cv
337.849 367.404 337.085 367.088 336.29 367.088 cv
335.494 367.088 334.731 367.404 334.168 367.967 cv
333.606 368.529 333.29 369.292 333.29 370.088 cv
333.29 370.884 333.606 371.647 334.168 372.209 cv
334.731 372.772 335.494 373.088 336.29 373.088 cv
cp
f
336.29 373.088 mo
337.085 373.088 337.849 372.772 338.411 372.209 cv
338.974 371.647 339.29 370.884 339.29 370.088 cv
339.29 369.292 338.974 368.529 338.411 367.967 cv
337.849 367.404 337.085 367.088 336.29 367.088 cv
335.494 367.088 334.731 367.404 334.168 367.967 cv
333.606 368.529 333.29 369.292 333.29 370.088 cv
333.29 370.884 333.606 371.647 334.168 372.209 cv
334.731 372.772 335.494 373.088 336.29 373.088 cv
cp
@
74.7831 275.009 mo
75.5788 275.009 76.3419 274.693 76.9045 274.131 cv
77.467 273.568 77.7831 272.805 77.7831 272.009 cv
77.7831 271.214 77.467 270.451 76.9045 269.888 cv
76.3419 269.326 75.5788 269.009 74.7831 269.009 cv
73.9875 269.009 73.2244 269.326 72.6618 269.888 cv
72.0992 270.451 71.7831 271.214 71.7831 272.009 cv
71.7831 272.805 72.0992 273.568 72.6618 274.131 cv
73.2244 274.693 73.9875 275.009 74.7831 275.009 cv
cp
f
74.7831 275.009 mo
75.5788 275.009 76.3419 274.693 76.9045 274.131 cv
77.467 273.568 77.7831 272.805 77.7831 272.009 cv
77.7831 271.214 77.467 270.451 76.9045 269.888 cv
76.3419 269.326 75.5788 269.009 74.7831 269.009 cv
73.9875 269.009 73.2244 269.326 72.6618 269.888 cv
72.0992 270.451 71.7831 271.214 71.7831 272.009 cv
71.7831 272.805 72.0992 273.568 72.6618 274.131 cv
73.2244 274.693 73.9875 275.009 74.7831 275.009 cv
cp
@
298.497 124.17 mo
299.292 124.17 300.055 123.854 300.618 123.292 cv
301.18 122.729 301.496 121.966 301.496 121.171 cv
301.496 120.375 301.18 119.612 300.618 119.049 cv
300.055 118.487 299.292 118.171 298.497 118.171 cv
297.701 118.171 296.938 118.487 296.375 119.049 cv
295.813 119.612 295.496 120.375 295.496 121.171 cv
295.496 121.966 295.813 122.729 296.375 123.292 cv
296.938 123.854 297.701 124.17 298.497 124.17 cv
f
298.497 124.17 mo
298.497 123.671 li
299.16 123.671 299.795 123.407 300.264 122.938 cv
300.733 122.469 300.997 121.833 300.997 121.171 cv
300.997 120.508 300.733 119.872 300.264 119.403 cv
299.795 118.934 299.16 118.67 298.497 118.67 cv
297.834 118.67 297.198 118.934 296.729 119.403 cv
296.26 119.872 295.997 120.508 295.997 121.171 cv
295.997 121.833 296.26 122.469 296.729 122.938 cv
297.198 123.407 297.834 123.671 298.497 123.671 cv
298.497 124.17 li
298.497 124.671 li
297.568 124.671 296.678 124.302 296.022 123.645 cv
295.365 122.989 294.997 122.099 294.997 121.171 cv
294.997 120.242 295.365 119.352 296.022 118.696 cv
296.678 118.039 297.568 117.671 298.497 117.671 cv
299.425 117.671 300.315 118.039 300.971 118.696 cv
301.628 119.352 301.997 120.242 301.997 121.171 cv
301.997 122.099 301.628 122.989 300.971 123.645 cv
300.315 124.302 299.425 124.671 298.497 124.671 cv
298.497 124.17 li
f
397.629 395.239 mo
398.425 395.239 399.188 394.923 399.75 394.36 cv
400.313 393.798 400.629 393.034 400.629 392.239 cv
400.629 391.443 400.313 390.68 399.75 390.118 cv
399.188 389.555 398.425 389.239 397.629 389.239 cv
396.833 389.239 396.07 389.555 395.508 390.118 cv
394.945 390.68 394.629 391.443 394.629 392.239 cv
394.629 393.034 394.945 393.798 395.508 394.36 cv
396.07 394.923 396.833 395.239 397.629 395.239 cv
cp
f
397.629 395.239 mo
398.425 395.239 399.188 394.923 399.75 394.36 cv
400.313 393.798 400.629 393.034 400.629 392.239 cv
400.629 391.443 400.313 390.68 399.75 390.118 cv
399.188 389.555 398.425 389.239 397.629 389.239 cv
396.833 389.239 396.07 389.555 395.508 390.118 cv
394.945 390.68 394.629 391.443 394.629 392.239 cv
394.629 393.034 394.945 393.798 395.508 394.36 cv
396.07 394.923 396.833 395.239 397.629 395.239 cv
cp
@
311.588 401.989 mo
312.383 401.989 313.147 401.672 313.709 401.11 cv
314.272 400.547 314.588 399.784 314.588 398.989 cv
314.588 398.193 314.272 397.43 313.709 396.867 cv
313.147 396.305 312.383 395.989 311.588 395.989 cv
310.792 395.989 310.029 396.305 309.466 396.867 cv
308.904 397.43 308.588 398.193 308.588 398.989 cv
308.588 399.784 308.904 400.547 309.466 401.11 cv
310.029 401.672 310.792 401.989 311.588 401.989 cv
cp
f
311.588 401.989 mo
312.383 401.989 313.147 401.672 313.709 401.11 cv
314.272 400.547 314.588 399.784 314.588 398.989 cv
314.588 398.193 314.272 397.43 313.709 396.867 cv
313.147 396.305 312.383 395.989 311.588 395.989 cv
310.792 395.989 310.029 396.305 309.466 396.867 cv
308.904 397.43 308.588 398.193 308.588 398.989 cv
308.588 399.784 308.904 400.547 309.466 401.11 cv
310.029 401.672 310.792 401.989 311.588 401.989 cv
cp
@
228.937 221.925 mo
229.732 221.925 230.495 221.609 231.058 221.047 cv
231.621 220.484 231.937 219.721 231.937 218.925 cv
231.937 218.13 231.621 217.367 231.058 216.804 cv
230.495 216.242 229.732 215.925 228.937 215.925 cv
228.141 215.925 227.378 216.242 226.815 216.804 cv
226.253 217.367 225.937 218.13 225.937 218.925 cv
225.937 219.721 226.253 220.484 226.815 221.047 cv
227.378 221.609 228.141 221.925 228.937 221.925 cv
cp
f
228.937 221.925 mo
229.732 221.925 230.495 221.609 231.058 221.047 cv
231.621 220.484 231.937 219.721 231.937 218.925 cv
231.937 218.13 231.621 217.367 231.058 216.804 cv
230.495 216.242 229.732 215.925 228.937 215.925 cv
228.141 215.925 227.378 216.242 226.815 216.804 cv
226.253 217.367 225.937 218.13 225.937 218.925 cv
225.937 219.721 226.253 220.484 226.815 221.047 cv
227.378 221.609 228.141 221.925 228.937 221.925 cv
cp
@
92.8231 330.491 mo
93.6187 330.491 94.3819 330.175 94.9445 329.612 cv
95.507 329.049 95.8231 328.286 95.8231 327.491 cv
95.8231 326.695 95.507 325.932 94.9445 325.369 cv
94.3819 324.807 93.6187 324.491 92.8231 324.491 cv
92.0275 324.491 91.2644 324.807 90.7018 325.369 cv
90.1392 325.932 89.8231 326.695 89.8231 327.491 cv
89.8231 328.286 90.1392 329.049 90.7018 329.612 cv
91.2644 330.175 92.0275 330.491 92.8231 330.491 cv
cp
f
92.8231 330.491 mo
93.6187 330.491 94.3819 330.175 94.9445 329.612 cv
95.507 329.049 95.8231 328.286 95.8231 327.491 cv
95.8231 326.695 95.507 325.932 94.9445 325.369 cv
94.3819 324.807 93.6187 324.491 92.8231 324.491 cv
92.0275 324.491 91.2644 324.807 90.7018 325.369 cv
90.1392 325.932 89.8231 326.695 89.8231 327.491 cv
89.8231 328.286 90.1392 329.049 90.7018 329.612 cv
91.2644 330.175 92.0275 330.491 92.8231 330.491 cv
cp
@
209.653 124.113 mo
210.448 124.113 211.211 123.797 211.774 123.235 cv
212.337 122.672 212.653 121.909 212.653 121.113 cv
212.653 120.318 212.337 119.555 211.774 118.992 cv
211.211 118.429 210.448 118.113 209.653 118.113 cv
208.857 118.113 208.094 118.429 207.531 118.992 cv
206.969 119.555 206.653 120.318 206.653 121.113 cv
206.653 121.909 206.969 122.672 207.531 123.235 cv
208.094 123.797 208.857 124.113 209.653 124.113 cv
cp
f
209.653 124.113 mo
210.448 124.113 211.211 123.797 211.774 123.235 cv
212.337 122.672 212.653 121.909 212.653 121.113 cv
212.653 120.318 212.337 119.555 211.774 118.992 cv
211.211 118.429 210.448 118.113 209.653 118.113 cv
208.857 118.113 208.094 118.429 207.531 118.992 cv
206.969 119.555 206.653 120.318 206.653 121.113 cv
206.653 121.909 206.969 122.672 207.531 123.235 cv
208.094 123.797 208.857 124.113 209.653 124.113 cv
cp
@
249.677 160.785 mo
250.472 160.785 251.236 160.469 251.798 159.906 cv
252.361 159.344 252.677 158.58 252.677 157.785 cv
252.677 156.989 252.361 156.226 251.798 155.663 cv
251.236 155.101 250.472 154.785 249.677 154.785 cv
248.881 154.785 248.118 155.101 247.555 155.663 cv
246.993 156.226 246.677 156.989 246.677 157.785 cv
246.677 158.58 246.993 159.344 247.555 159.906 cv
248.118 160.469 248.881 160.785 249.677 160.785 cv
cp
f
249.677 160.785 mo
250.472 160.785 251.236 160.469 251.798 159.906 cv
252.361 159.344 252.677 158.58 252.677 157.785 cv
252.677 156.989 252.361 156.226 251.798 155.663 cv
251.236 155.101 250.472 154.785 249.677 154.785 cv
248.881 154.785 248.118 155.101 247.555 155.663 cv
246.993 156.226 246.677 156.989 246.677 157.785 cv
246.677 158.58 246.993 159.344 247.555 159.906 cv
248.118 160.469 248.881 160.785 249.677 160.785 cv
cp
@
427.893 239.209 mo
428.689 239.209 429.452 238.893 430.014 238.33 cv
430.577 237.768 430.893 237.005 430.893 236.209 cv
430.893 235.413 430.577 234.65 430.014 234.088 cv
429.452 233.525 428.689 233.209 427.893 233.209 cv
427.097 233.209 426.334 233.525 425.772 234.088 cv
425.209 234.65 424.893 235.413 424.893 236.209 cv
424.893 237.005 425.209 237.768 425.772 238.33 cv
426.334 238.893 427.097 239.209 427.893 239.209 cv
cp
f
427.893 239.209 mo
428.689 239.209 429.452 238.893 430.014 238.33 cv
430.577 237.768 430.893 237.005 430.893 236.209 cv
430.893 235.413 430.577 234.65 430.014 234.088 cv
429.452 233.525 428.689 233.209 427.893 233.209 cv
427.097 233.209 426.334 233.525 425.772 234.088 cv
425.209 234.65 424.893 235.413 424.893 236.209 cv
424.893 237.005 425.209 237.768 425.772 238.33 cv
426.334 238.893 427.097 239.209 427.893 239.209 cv
cp
@
215.065 360.735 mo
215.861 360.735 216.624 360.419 217.187 359.856 cv
217.749 359.293 218.065 358.53 218.065 357.735 cv
218.065 356.939 217.749 356.176 217.187 355.613 cv
216.624 355.051 215.861 354.735 215.065 354.735 cv
214.27 354.735 213.507 355.051 212.944 355.613 cv
212.382 356.176 212.065 356.939 212.065 357.735 cv
212.065 358.53 212.382 359.293 212.944 359.856 cv
213.507 360.419 214.27 360.735 215.065 360.735 cv
cp
f
215.065 360.735 mo
215.861 360.735 216.624 360.419 217.187 359.856 cv
217.749 359.293 218.065 358.53 218.065 357.735 cv
218.065 356.939 217.749 356.176 217.187 355.613 cv
216.624 355.051 215.861 354.735 215.065 354.735 cv
214.27 354.735 213.507 355.051 212.944 355.613 cv
212.382 356.176 212.065 356.939 212.065 357.735 cv
212.065 358.53 212.382 359.293 212.944 359.856 cv
213.507 360.419 214.27 360.735 215.065 360.735 cv
cp
@
472.628 361.215 mo
473.424 361.215 474.187 360.899 474.749 360.336 cv
475.312 359.774 475.628 359.011 475.628 358.215 cv
475.628 357.419 475.312 356.656 474.749 356.094 cv
474.187 355.531 473.424 355.215 472.628 355.215 cv
471.833 355.215 471.069 355.531 470.507 356.094 cv
469.944 356.656 469.628 357.419 469.628 358.215 cv
469.628 359.011 469.944 359.774 470.507 360.336 cv
471.069 360.899 471.833 361.215 472.628 361.215 cv
cp
f
472.628 361.215 mo
473.424 361.215 474.187 360.899 474.749 360.336 cv
475.312 359.774 475.628 359.011 475.628 358.215 cv
475.628 357.419 475.312 356.656 474.749 356.094 cv
474.187 355.531 473.424 355.215 472.628 355.215 cv
471.833 355.215 471.069 355.531 470.507 356.094 cv
469.944 356.656 469.628 357.419 469.628 358.215 cv
469.628 359.011 469.944 359.774 470.507 360.336 cv
471.069 360.899 471.833 361.215 472.628 361.215 cv
cp
@
183.27 180.697 mo
184.065 180.697 184.829 180.381 185.391 179.818 cv
185.954 179.256 186.27 178.492 186.27 177.697 cv
186.27 176.901 185.954 176.138 185.391 175.576 cv
184.829 175.013 184.065 174.697 183.27 174.697 cv
182.474 174.697 181.711 175.013 181.148 175.576 cv
180.586 176.138 180.27 176.901 180.27 177.697 cv
180.27 178.492 180.586 179.256 181.148 179.818 cv
181.711 180.381 182.474 180.697 183.27 180.697 cv
cp
f
183.27 180.697 mo
184.065 180.697 184.829 180.381 185.391 179.818 cv
185.954 179.256 186.27 178.492 186.27 177.697 cv
186.27 176.901 185.954 176.138 185.391 175.576 cv
184.829 175.013 184.065 174.697 183.27 174.697 cv
182.474 174.697 181.711 175.013 181.148 175.576 cv
180.586 176.138 180.27 176.901 180.27 177.697 cv
180.27 178.492 180.586 179.256 181.148 179.818 cv
181.711 180.381 182.474 180.697 183.27 180.697 cv
cp
@
380.138 96.4394 mo
380.933 96.4394 381.696 96.1233 382.259 95.5608 cv
382.821 94.9982 383.138 94.235 383.138 93.4394 cv
383.138 92.6439 382.821 91.8807 382.259 91.3181 cv
381.696 90.7555 380.933 90.4394 380.138 90.4394 cv
379.342 90.4394 378.579 90.7555 378.016 91.3181 cv
377.454 91.8807 377.138 92.6439 377.138 93.4394 cv
377.138 94.235 377.454 94.9982 378.016 95.5608 cv
378.579 96.1233 379.342 96.4394 380.138 96.4394 cv
f
380.138 96.4394 mo
380.138 95.9394 li
380.801 95.9394 381.437 95.6759 381.905 95.2072 cv
382.374 94.7384 382.638 94.1025 382.638 93.4394 cv
382.638 92.7764 382.374 92.1404 381.905 91.6716 cv
381.437 91.2028 380.801 90.9395 380.138 90.9395 cv
379.475 90.9395 378.839 91.2028 378.37 91.6716 cv
377.901 92.1404 377.638 92.7764 377.638 93.4394 cv
377.638 94.1025 377.901 94.7384 378.37 95.2072 cv
378.839 95.6759 379.475 95.9394 380.138 95.9394 cv
380.138 96.4394 li
380.138 96.9394 li
379.209 96.9394 378.319 96.5707 377.663 95.9143 cv
377.006 95.258 376.638 94.3677 376.638 93.4394 cv
376.638 92.5112 377.006 91.6209 377.663 90.9646 cv
378.319 90.3082 379.209 89.9395 380.138 89.9395 cv
381.066 89.9395 381.956 90.3082 382.612 90.9646 cv
383.269 91.6209 383.638 92.5112 383.638 93.4394 cv
383.638 94.3677 383.269 95.258 382.612 95.9143 cv
381.956 96.5707 381.066 96.9394 380.138 96.9394 cv
380.138 96.4394 li
f
446.603 71.6069 mo
447.399 71.6069 448.162 71.2907 448.724 70.7282 cv
449.287 70.1656 449.603 69.4024 449.603 68.6068 cv
449.603 67.8113 449.287 67.0481 448.724 66.4855 cv
448.162 65.923 447.399 65.6068 446.603 65.6068 cv
445.807 65.6068 445.044 65.923 444.482 66.4855 cv
443.919 67.0481 443.603 67.8113 443.603 68.6068 cv
443.603 69.4024 443.919 70.1656 444.482 70.7282 cv
445.044 71.2907 445.807 71.6069 446.603 71.6069 cv
f
446.603 71.6069 mo
446.603 71.1068 li
447.266 71.1068 447.902 70.8435 448.371 70.3747 cv
448.371 70.3745 li
448.84 69.9058 449.103 69.2699 449.103 68.6068 cv
449.103 67.9438 448.84 67.3079 448.371 66.8391 cv
447.902 66.3703 447.266 66.1069 446.603 66.1069 cv
445.94 66.1069 445.304 66.3703 444.835 66.8391 cv
444.367 67.3079 444.103 67.9438 444.103 68.6068 cv
444.103 69.2699 444.367 69.9058 444.835 70.3745 cv
444.835 70.3747 li
445.304 70.8435 445.94 71.1068 446.603 71.1068 cv
446.603 71.6069 li
446.603 72.1068 li
445.675 72.1068 444.785 71.738 444.128 71.0817 cv
443.472 70.4254 443.103 69.5351 443.103 68.6068 cv
443.103 67.6786 443.472 66.7883 444.128 66.132 cv
444.785 65.4756 445.675 65.1068 446.603 65.1068 cv
447.531 65.1068 448.422 65.4756 449.078 66.132 cv
449.734 66.7883 450.103 67.6786 450.103 68.6068 cv
450.103 69.5351 449.734 70.4254 449.078 71.0817 cv
448.422 71.738 447.531 72.1068 446.603 72.1068 cv
446.603 71.6069 li
f
280.476 30.36 mo
281.272 30.36 282.035 30.0439 282.597 29.4813 cv
283.16 28.9187 283.476 28.1556 283.476 27.3599 cv
283.476 26.5644 283.16 25.8012 282.597 25.2387 cv
282.035 24.6761 281.272 24.36 280.476 24.36 cv
279.68 24.36 278.917 24.6761 278.355 25.2387 cv
277.792 25.8012 277.476 26.5644 277.476 27.3599 cv
277.476 28.1556 277.792 28.9187 278.355 29.4813 cv
278.917 30.0439 279.68 30.36 280.476 30.36 cv
f
280.476 30.36 mo
280.476 29.86 li
281.139 29.86 281.775 29.5966 282.244 29.1278 cv
282.713 28.659 282.976 28.023 282.976 27.3599 cv
282.976 26.6971 282.713 26.061 282.244 25.5922 cv
281.775 25.1234 281.139 24.86 280.476 24.86 cv
279.813 24.86 279.177 25.1234 278.708 25.5922 cv
278.239 26.061 277.976 26.6971 277.976 27.3599 cv
277.976 28.023 278.239 28.659 278.708 29.1278 cv
279.177 29.5966 279.813 29.86 280.476 29.86 cv
280.476 30.36 li
280.476 30.8599 li
279.548 30.8599 278.657 30.4912 278.001 29.8348 cv
277.345 29.1785 276.976 28.2882 276.976 27.3599 cv
276.976 26.4317 277.345 25.5415 278.001 24.8851 cv
278.657 24.2287 279.548 23.86 280.476 23.86 cv
281.404 23.86 282.295 24.2287 282.951 24.8851 cv
283.607 25.5415 283.976 26.4317 283.976 27.3599 cv
283.976 28.2882 283.607 29.1785 282.951 29.8348 cv
282.295 30.4912 281.404 30.8599 280.476 30.8599 cv
280.476 30.36 li
f
95.9713 179.154 mo
96.7669 179.154 97.5301 178.838 98.0927 178.275 cv
98.6552 177.713 98.9713 176.95 98.9713 176.154 cv
98.9713 175.358 98.6552 174.595 98.0927 174.033 cv
97.5301 173.47 96.7669 173.154 95.9713 173.154 cv
95.1757 173.154 94.4126 173.47 93.85 174.033 cv
93.2874 174.595 92.9713 175.358 92.9713 176.154 cv
92.9713 176.95 93.2874 177.713 93.85 178.275 cv
94.4126 178.838 95.1757 179.154 95.9713 179.154 cv
cp
f
95.9713 179.154 mo
96.7669 179.154 97.5301 178.838 98.0927 178.275 cv
98.6552 177.713 98.9713 176.95 98.9713 176.154 cv
98.9713 175.358 98.6552 174.595 98.0927 174.033 cv
97.5301 173.47 96.7669 173.154 95.9713 173.154 cv
95.1757 173.154 94.4126 173.47 93.85 174.033 cv
93.2874 174.595 92.9713 175.358 92.9713 176.154 cv
92.9713 176.95 93.2874 177.713 93.85 178.275 cv
94.4126 178.838 95.1757 179.154 95.9713 179.154 cv
cp
@
208.56 123.392 mo
209.356 123.392 210.119 123.076 210.681 122.514 cv
211.244 121.951 211.56 121.188 211.56 120.392 cv
211.56 119.597 211.244 118.834 210.681 118.271 cv
210.119 117.709 209.356 117.392 208.56 117.392 cv
207.764 117.392 207.001 117.709 206.439 118.271 cv
205.876 118.834 205.56 119.597 205.56 120.392 cv
205.56 121.188 205.876 121.951 206.439 122.514 cv
207.001 123.076 207.764 123.392 208.56 123.392 cv
cp
f
208.56 123.392 mo
209.356 123.392 210.119 123.076 210.681 122.514 cv
211.244 121.951 211.56 121.188 211.56 120.392 cv
211.56 119.597 211.244 118.834 210.681 118.271 cv
210.119 117.709 209.356 117.392 208.56 117.392 cv
207.764 117.392 207.001 117.709 206.439 118.271 cv
205.876 118.834 205.56 119.597 205.56 120.392 cv
205.56 121.188 205.876 121.951 206.439 122.514 cv
207.001 123.076 207.764 123.392 208.56 123.392 cv
cp
@
187.146 99.5573 mo
187.942 99.5573 188.705 99.2412 189.268 98.6786 cv
189.83 98.1161 190.146 97.3529 190.146 96.5573 cv
190.146 95.7617 189.83 94.9986 189.268 94.436 cv
188.705 93.8734 187.942 93.5573 187.146 93.5573 cv
186.351 93.5573 185.588 93.8734 185.025 94.436 cv
184.462 94.9986 184.146 95.7617 184.146 96.5573 cv
184.146 97.3529 184.462 98.1161 185.025 98.6786 cv
185.588 99.2412 186.351 99.5573 187.146 99.5573 cv
cp
f
187.146 99.5573 mo
187.942 99.5573 188.705 99.2412 189.268 98.6786 cv
189.83 98.1161 190.146 97.3529 190.146 96.5573 cv
190.146 95.7617 189.83 94.9986 189.268 94.436 cv
188.705 93.8734 187.942 93.5573 187.146 93.5573 cv
186.351 93.5573 185.588 93.8734 185.025 94.436 cv
184.462 94.9986 184.146 95.7617 184.146 96.5573 cv
184.146 97.3529 184.462 98.1161 185.025 98.6786 cv
185.588 99.2412 186.351 99.5573 187.146 99.5573 cv
cp
@
113.391 202.829 mo
114.186 202.829 114.949 202.512 115.512 201.95 cv
116.075 201.387 116.391 200.624 116.391 199.829 cv
116.391 199.033 116.075 198.27 115.512 197.707 cv
114.949 197.145 114.186 196.829 113.391 196.829 cv
112.595 196.829 111.832 197.145 111.269 197.707 cv
110.707 198.27 110.391 199.033 110.391 199.829 cv
110.391 200.624 110.707 201.387 111.269 201.95 cv
111.832 202.512 112.595 202.829 113.391 202.829 cv
cp
f
113.391 202.829 mo
114.186 202.829 114.949 202.512 115.512 201.95 cv
116.075 201.387 116.391 200.624 116.391 199.829 cv
116.391 199.033 116.075 198.27 115.512 197.707 cv
114.949 197.145 114.186 196.829 113.391 196.829 cv
112.595 196.829 111.832 197.145 111.269 197.707 cv
110.707 198.27 110.391 199.033 110.391 199.829 cv
110.391 200.624 110.707 201.387 111.269 201.95 cv
111.832 202.512 112.595 202.829 113.391 202.829 cv
cp
@
444.15 92.7921 mo
444.946 92.7921 445.709 92.476 446.271 91.9134 cv
446.834 91.3509 447.15 90.5877 447.15 89.792 cv
447.15 88.9965 446.834 88.2333 446.271 87.6708 cv
445.709 87.1082 444.946 86.7921 444.15 86.7921 cv
443.355 86.7921 442.591 87.1082 442.029 87.6708 cv
441.466 88.2333 441.15 88.9965 441.15 89.792 cv
441.15 90.5877 441.466 91.3509 442.029 91.9134 cv
442.591 92.476 443.355 92.7921 444.15 92.7921 cv
f
444.15 92.7921 mo
444.15 92.2921 li
444.813 92.2921 445.449 92.0287 445.918 91.5599 cv
446.387 91.0911 446.65 90.455 446.65 89.792 cv
446.65 89.1291 446.387 88.4931 445.918 88.0243 cv
445.449 87.5555 444.813 87.2921 444.15 87.2921 cv
443.487 87.2921 442.851 87.5555 442.382 88.0243 cv
441.914 88.4931 441.65 89.1291 441.65 89.792 cv
441.65 90.455 441.914 91.0911 442.382 91.5599 cv
442.851 92.0287 443.487 92.2921 444.15 92.2921 cv
444.15 92.7921 li
444.15 93.2921 li
443.222 93.2921 442.332 92.9234 441.675 92.2669 cv
441.019 91.6106 440.65 90.7203 440.65 89.792 cv
440.65 88.8639 441.019 87.9736 441.675 87.3171 cv
442.332 86.6608 443.222 86.292 444.15 86.292 cv
445.078 86.292 445.969 86.6608 446.625 87.3173 cv
447.281 87.9736 447.65 88.8639 447.65 89.792 cv
447.65 90.7203 447.281 91.6106 446.625 92.267 cv
445.969 92.9234 445.078 93.2921 444.15 93.2921 cv
444.15 92.7921 li
f
286.51 196.495 mo
287.305 196.495 288.069 196.179 288.631 195.617 cv
289.194 195.054 289.51 194.291 289.51 193.495 cv
289.51 192.7 289.194 191.936 288.631 191.374 cv
288.069 190.811 287.305 190.495 286.51 190.495 cv
285.714 190.495 284.951 190.811 284.388 191.374 cv
283.826 191.936 283.51 192.7 283.51 193.495 cv
283.51 194.291 283.826 195.054 284.388 195.617 cv
284.951 196.179 285.714 196.495 286.51 196.495 cv
cp
f
286.51 196.495 mo
287.305 196.495 288.069 196.179 288.631 195.617 cv
289.194 195.054 289.51 194.291 289.51 193.495 cv
289.51 192.7 289.194 191.936 288.631 191.374 cv
288.069 190.811 287.305 190.495 286.51 190.495 cv
285.714 190.495 284.951 190.811 284.388 191.374 cv
283.826 191.936 283.51 192.7 283.51 193.495 cv
283.51 194.291 283.826 195.054 284.388 195.617 cv
284.951 196.179 285.714 196.495 286.51 196.495 cv
cp
@
458.152 291.436 mo
458.948 291.436 459.711 291.12 460.274 290.557 cv
460.836 289.995 461.152 289.232 461.152 288.436 cv
461.152 287.641 460.836 286.877 460.274 286.315 cv
459.711 285.752 458.948 285.436 458.152 285.436 cv
457.357 285.436 456.593 285.752 456.031 286.315 cv
455.468 286.877 455.152 287.641 455.152 288.436 cv
455.152 289.232 455.468 289.995 456.031 290.557 cv
456.593 291.12 457.357 291.436 458.152 291.436 cv
cp
f
458.152 291.436 mo
458.948 291.436 459.711 291.12 460.274 290.557 cv
460.836 289.995 461.152 289.232 461.152 288.436 cv
461.152 287.641 460.836 286.877 460.274 286.315 cv
459.711 285.752 458.948 285.436 458.152 285.436 cv
457.357 285.436 456.593 285.752 456.031 286.315 cv
455.468 286.877 455.152 287.641 455.152 288.436 cv
455.152 289.232 455.468 289.995 456.031 290.557 cv
456.593 291.12 457.357 291.436 458.152 291.436 cv
cp
@
244.361 270.873 mo
245.157 270.873 245.92 270.557 246.482 269.994 cv
247.045 269.431 247.361 268.668 247.361 267.873 cv
247.361 267.077 247.045 266.314 246.482 265.751 cv
245.92 265.189 245.157 264.873 244.361 264.873 cv
243.565 264.873 242.802 265.189 242.24 265.751 cv
241.677 266.314 241.361 267.077 241.361 267.873 cv
241.361 268.668 241.677 269.431 242.24 269.994 cv
242.802 270.557 243.565 270.873 244.361 270.873 cv
cp
f
244.361 270.873 mo
245.157 270.873 245.92 270.557 246.482 269.994 cv
247.045 269.431 247.361 268.668 247.361 267.873 cv
247.361 267.077 247.045 266.314 246.482 265.751 cv
245.92 265.189 245.157 264.873 244.361 264.873 cv
243.565 264.873 242.802 265.189 242.24 265.751 cv
241.677 266.314 241.361 267.077 241.361 267.873 cv
241.361 268.668 241.677 269.431 242.24 269.994 cv
242.802 270.557 243.565 270.873 244.361 270.873 cv
cp
@
310.304 40.3258 mo
311.1 40.3258 311.863 40.0096 312.426 39.4471 cv
312.988 38.8845 313.304 38.1214 313.304 37.3258 cv
313.304 36.5302 312.988 35.7671 312.426 35.2044 cv
311.863 34.6419 311.1 34.3257 310.304 34.3257 cv
309.509 34.3257 308.746 34.6419 308.183 35.2044 cv
307.621 35.7671 307.304 36.5302 307.304 37.3258 cv
307.304 38.1214 307.621 38.8845 308.183 39.4471 cv
308.746 40.0096 309.509 40.3258 310.304 40.3258 cv
f
310.304 40.3258 mo
310.304 39.8258 li
310.967 39.8258 311.603 39.5623 312.072 39.0935 cv
312.541 38.6247 312.804 37.9888 312.804 37.3258 cv
312.804 36.6628 312.541 36.0269 312.072 35.5581 cv
312.072 35.5579 li
311.603 35.0892 310.967 34.8258 310.304 34.8258 cv
309.641 34.8258 309.005 35.0892 308.537 35.5579 cv
308.537 35.5581 li
308.068 36.0269 307.804 36.6628 307.804 37.3258 cv
307.804 37.9888 308.068 38.6247 308.537 39.0935 cv
309.005 39.5623 309.641 39.8258 310.304 39.8258 cv
310.304 40.3258 li
310.304 40.8258 li
309.376 40.8258 308.486 40.457 307.829 39.8007 cv
307.173 39.1443 306.804 38.254 306.804 37.3258 cv
306.804 36.3975 307.173 35.5072 307.829 34.8509 cv
308.486 34.1946 309.376 33.8258 310.304 33.8258 cv
311.233 33.8258 312.123 34.1946 312.779 34.8509 cv
313.436 35.5072 313.804 36.3975 313.804 37.3258 cv
313.804 38.254 313.436 39.1443 312.779 39.8007 cv
312.123 40.457 311.233 40.8258 310.304 40.8258 cv
310.304 40.3258 li
f
377.049 281.751 mo
377.845 281.751 378.608 281.435 379.17 280.873 cv
379.733 280.31 380.049 279.547 380.049 278.751 cv
380.049 277.956 379.733 277.193 379.17 276.63 cv
378.608 276.067 377.845 275.751 377.049 275.751 cv
376.253 275.751 375.49 276.067 374.928 276.63 cv
374.365 277.193 374.049 277.956 374.049 278.751 cv
374.049 279.547 374.365 280.31 374.928 280.873 cv
375.49 281.435 376.253 281.751 377.049 281.751 cv
cp
f
377.049 281.751 mo
377.845 281.751 378.608 281.435 379.17 280.873 cv
379.733 280.31 380.049 279.547 380.049 278.751 cv
380.049 277.956 379.733 277.193 379.17 276.63 cv
378.608 276.067 377.845 275.751 377.049 275.751 cv
376.253 275.751 375.49 276.067 374.928 276.63 cv
374.365 277.193 374.049 277.956 374.049 278.751 cv
374.049 279.547 374.365 280.31 374.928 280.873 cv
375.49 281.435 376.253 281.751 377.049 281.751 cv
cp
@
326.296 103.737 mo
327.091 103.737 327.854 103.421 328.417 102.858 cv
328.979 102.296 329.296 101.533 329.296 100.737 cv
329.296 99.9415 328.979 99.1785 328.417 98.6158 cv
327.854 98.0532 327.091 97.7371 326.296 97.7371 cv
325.5 97.7371 324.737 98.0532 324.174 98.6158 cv
323.612 99.1785 323.296 99.9415 323.296 100.737 cv
323.296 101.533 323.612 102.296 324.174 102.858 cv
324.737 103.421 325.5 103.737 326.296 103.737 cv
f
326.296 103.737 mo
326.296 103.237 li
326.959 103.237 327.595 102.974 328.063 102.505 cv
328.532 102.036 328.796 101.4 328.796 100.737 cv
328.796 100.074 328.532 99.4381 328.063 98.9694 cv
327.595 98.5006 326.959 98.2371 326.296 98.2371 cv
325.633 98.2371 324.997 98.5006 324.528 98.9694 cv
324.059 99.4381 323.796 100.074 323.796 100.737 cv
323.796 101.4 324.059 102.036 324.528 102.505 cv
324.997 102.974 325.633 103.237 326.296 103.237 cv
326.296 103.737 li
326.296 104.237 li
325.367 104.237 324.477 103.868 323.821 103.212 cv
323.164 102.556 322.796 101.665 322.796 100.737 cv
322.796 99.8089 323.164 98.9186 323.821 98.2623 cv
324.477 97.606 325.367 97.2372 326.296 97.2372 cv
327.224 97.2372 328.114 97.606 328.771 98.2623 cv
329.427 98.9186 329.796 99.8089 329.796 100.737 cv
329.796 101.665 329.427 102.556 328.771 103.212 cv
328.114 103.868 327.224 104.237 326.296 104.237 cv
326.296 103.737 li
f
312.208 64.6624 mo
313.003 64.6624 313.766 64.3463 314.329 63.7837 cv
314.892 63.2212 315.208 62.4581 315.208 61.6625 cv
315.208 60.8668 314.892 60.1038 314.329 59.5411 cv
313.766 58.9785 313.003 58.6624 312.208 58.6624 cv
311.412 58.6624 310.649 58.9785 310.086 59.5411 cv
309.524 60.1038 309.208 60.8668 309.208 61.6625 cv
309.208 62.4581 309.524 63.2212 310.086 63.7837 cv
310.649 64.3463 311.412 64.6624 312.208 64.6624 cv
f
312.208 64.6624 mo
312.208 64.1625 li
312.871 64.1625 313.507 63.899 313.975 63.4302 cv
314.444 62.9614 314.708 62.3254 314.708 61.6625 cv
314.708 60.9995 314.444 60.3634 313.975 59.8946 cv
313.507 59.4259 312.871 59.1624 312.208 59.1624 cv
311.545 59.1624 310.909 59.4259 310.44 59.8946 cv
309.971 60.3634 309.708 60.9995 309.708 61.6625 cv
309.708 62.3254 309.971 62.9614 310.44 63.4302 cv
310.909 63.899 311.545 64.1625 312.208 64.1625 cv
312.208 64.6624 li
312.208 65.1625 li
311.279 65.1625 310.389 64.7937 309.733 64.1374 cv
309.076 63.4809 308.708 62.5907 308.708 61.6625 cv
308.708 60.7342 309.076 59.8439 309.733 59.1876 cv
310.389 58.5312 311.279 58.1625 312.208 58.1625 cv
313.136 58.1625 314.026 58.5312 314.682 59.1876 cv
315.339 59.8439 315.708 60.7342 315.708 61.6625 cv
315.708 62.5907 315.339 63.4809 314.682 64.1374 cv
314.026 64.7937 313.136 65.1625 312.208 65.1625 cv
312.208 64.6624 li
f
144.986 94.612 mo
145.781 94.612 146.545 94.2959 147.107 93.7334 cv
147.67 93.1708 147.986 92.4076 147.986 91.612 cv
147.986 90.8164 147.67 90.0533 147.107 89.4907 cv
146.545 88.9281 145.781 88.612 144.986 88.612 cv
144.19 88.612 143.427 88.9281 142.864 89.4907 cv
142.302 90.0533 141.986 90.8164 141.986 91.612 cv
141.986 92.4076 142.302 93.1708 142.864 93.7334 cv
143.427 94.2959 144.19 94.612 144.986 94.612 cv
cp
f
144.986 94.612 mo
145.781 94.612 146.545 94.2959 147.107 93.7334 cv
147.67 93.1708 147.986 92.4076 147.986 91.612 cv
147.986 90.8164 147.67 90.0533 147.107 89.4907 cv
146.545 88.9281 145.781 88.612 144.986 88.612 cv
144.19 88.612 143.427 88.9281 142.864 89.4907 cv
142.302 90.0533 141.986 90.8164 141.986 91.612 cv
141.986 92.4076 142.302 93.1708 142.864 93.7334 cv
143.427 94.2959 144.19 94.612 144.986 94.612 cv
cp
@
114.903 271.418 mo
115.699 271.418 116.462 271.102 117.025 270.539 cv
117.587 269.977 117.903 269.214 117.903 268.418 cv
117.903 267.622 117.587 266.859 117.025 266.297 cv
116.462 265.734 115.699 265.418 114.903 265.418 cv
114.108 265.418 113.344 265.734 112.782 266.297 cv
112.219 266.859 111.903 267.622 111.903 268.418 cv
111.903 269.214 112.219 269.977 112.782 270.539 cv
113.344 271.102 114.108 271.418 114.903 271.418 cv
cp
f
114.903 271.418 mo
115.699 271.418 116.462 271.102 117.025 270.539 cv
117.587 269.977 117.903 269.214 117.903 268.418 cv
117.903 267.622 117.587 266.859 117.025 266.297 cv
116.462 265.734 115.699 265.418 114.903 265.418 cv
114.108 265.418 113.344 265.734 112.782 266.297 cv
112.219 266.859 111.903 267.622 111.903 268.418 cv
111.903 269.214 112.219 269.977 112.782 270.539 cv
113.344 271.102 114.108 271.418 114.903 271.418 cv
cp
@
250.908 327.503 mo
251.704 327.503 252.467 327.187 253.03 326.625 cv
253.592 326.062 253.908 325.299 253.908 324.503 cv
253.908 323.708 253.592 322.944 253.03 322.382 cv
252.467 321.819 251.704 321.503 250.908 321.503 cv
250.113 321.503 249.35 321.819 248.787 322.382 cv
248.224 322.944 247.908 323.708 247.908 324.503 cv
247.908 325.299 248.224 326.062 248.787 326.625 cv
249.35 327.187 250.113 327.503 250.908 327.503 cv
cp
f
250.908 327.503 mo
251.704 327.503 252.467 327.187 253.03 326.625 cv
253.592 326.062 253.908 325.299 253.908 324.503 cv
253.908 323.708 253.592 322.944 253.03 322.382 cv
252.467 321.819 251.704 321.503 250.908 321.503 cv
250.113 321.503 249.35 321.819 248.787 322.382 cv
248.224 322.944 247.908 323.708 247.908 324.503 cv
247.908 325.299 248.224 326.062 248.787 326.625 cv
249.35 327.187 250.113 327.503 250.908 327.503 cv
cp
@
299.09 415.336 mo
299.885 415.336 300.648 415.02 301.211 414.457 cv
301.774 413.895 302.09 413.132 302.09 412.336 cv
302.09 411.541 301.774 410.777 301.211 410.215 cv
300.648 409.652 299.885 409.336 299.09 409.336 cv
298.294 409.336 297.531 409.652 296.968 410.215 cv
296.406 410.777 296.09 411.541 296.09 412.336 cv
296.09 413.132 296.406 413.895 296.968 414.457 cv
297.531 415.02 298.294 415.336 299.09 415.336 cv
cp
f
299.09 415.336 mo
299.885 415.336 300.648 415.02 301.211 414.457 cv
301.774 413.895 302.09 413.132 302.09 412.336 cv
302.09 411.541 301.774 410.777 301.211 410.215 cv
300.648 409.652 299.885 409.336 299.09 409.336 cv
298.294 409.336 297.531 409.652 296.968 410.215 cv
296.406 410.777 296.09 411.541 296.09 412.336 cv
296.09 413.132 296.406 413.895 296.968 414.457 cv
297.531 415.02 298.294 415.336 299.09 415.336 cv
cp
@
332.117 198.127 mo
332.912 198.127 333.675 197.811 334.238 197.249 cv
334.801 196.686 335.117 195.923 335.117 195.127 cv
335.117 194.332 334.801 193.568 334.238 193.006 cv
333.675 192.443 332.912 192.127 332.117 192.127 cv
331.321 192.127 330.558 192.443 329.995 193.006 cv
329.433 193.568 329.117 194.332 329.117 195.127 cv
329.117 195.923 329.433 196.686 329.995 197.249 cv
330.558 197.811 331.321 198.127 332.117 198.127 cv
cp
f
332.117 198.127 mo
332.912 198.127 333.675 197.811 334.238 197.249 cv
334.801 196.686 335.117 195.923 335.117 195.127 cv
335.117 194.332 334.801 193.568 334.238 193.006 cv
333.675 192.443 332.912 192.127 332.117 192.127 cv
331.321 192.127 330.558 192.443 329.995 193.006 cv
329.433 193.568 329.117 194.332 329.117 195.127 cv
329.117 195.923 329.433 196.686 329.995 197.249 cv
330.558 197.811 331.321 198.127 332.117 198.127 cv
cp
@
299.306 161.65 mo
300.101 161.65 300.865 161.334 301.427 160.771 cv
301.99 160.209 302.306 159.445 302.306 158.65 cv
302.306 157.854 301.99 157.091 301.427 156.528 cv
300.865 155.966 300.101 155.65 299.306 155.65 cv
298.51 155.65 297.747 155.966 297.184 156.528 cv
296.622 157.091 296.306 157.854 296.306 158.65 cv
296.306 159.445 296.622 160.209 297.184 160.771 cv
297.747 161.334 298.51 161.65 299.306 161.65 cv
cp
f
299.306 161.65 mo
300.101 161.65 300.865 161.334 301.427 160.771 cv
301.99 160.209 302.306 159.445 302.306 158.65 cv
302.306 157.854 301.99 157.091 301.427 156.528 cv
300.865 155.966 300.101 155.65 299.306 155.65 cv
298.51 155.65 297.747 155.966 297.184 156.528 cv
296.622 157.091 296.306 157.854 296.306 158.65 cv
296.306 159.445 296.622 160.209 297.184 160.771 cv
297.747 161.334 298.51 161.65 299.306 161.65 cv
cp
@
355.123 421.597 mo
355.919 421.597 356.682 421.281 357.245 420.718 cv
357.807 420.155 358.123 419.392 358.123 418.597 cv
358.123 417.801 357.807 417.038 357.245 416.475 cv
356.682 415.913 355.919 415.597 355.123 415.597 cv
354.328 415.597 353.565 415.913 353.002 416.475 cv
352.439 417.038 352.123 417.801 352.123 418.597 cv
352.123 419.392 352.439 420.155 353.002 420.718 cv
353.565 421.281 354.328 421.597 355.123 421.597 cv
cp
f
355.123 421.597 mo
355.919 421.597 356.682 421.281 357.245 420.718 cv
357.807 420.155 358.123 419.392 358.123 418.597 cv
358.123 417.801 357.807 417.038 357.245 416.475 cv
356.682 415.913 355.919 415.597 355.123 415.597 cv
354.328 415.597 353.565 415.913 353.002 416.475 cv
352.439 417.038 352.123 417.801 352.123 418.597 cv
352.123 419.392 352.439 420.155 353.002 420.718 cv
353.565 421.281 354.328 421.597 355.123 421.597 cv
cp
@
175.42 209.038 mo
176.216 209.038 176.979 208.722 177.542 208.159 cv
178.104 207.596 178.42 206.833 178.42 206.038 cv
178.42 205.242 178.104 204.479 177.542 203.916 cv
176.979 203.354 176.216 203.038 175.42 203.038 cv
174.625 203.038 173.861 203.354 173.299 203.916 cv
172.736 204.479 172.42 205.242 172.42 206.038 cv
172.42 206.833 172.736 207.596 173.299 208.159 cv
173.861 208.722 174.625 209.038 175.42 209.038 cv
cp
f
175.42 209.038 mo
176.216 209.038 176.979 208.722 177.542 208.159 cv
178.104 207.596 178.42 206.833 178.42 206.038 cv
178.42 205.242 178.104 204.479 177.542 203.916 cv
176.979 203.354 176.216 203.038 175.42 203.038 cv
174.625 203.038 173.861 203.354 173.299 203.916 cv
172.736 204.479 172.42 205.242 172.42 206.038 cv
172.42 206.833 172.736 207.596 173.299 208.159 cv
173.861 208.722 174.625 209.038 175.42 209.038 cv
cp
@
444.756 267.344 mo
445.552 267.344 446.315 267.028 446.878 266.465 cv
447.44 265.903 447.756 265.14 447.756 264.344 cv
447.756 263.549 447.44 262.785 446.878 262.223 cv
446.315 261.66 445.552 261.344 444.756 261.344 cv
443.961 261.344 443.197 261.66 442.635 262.223 cv
442.072 262.785 441.756 263.549 441.756 264.344 cv
441.756 265.14 442.072 265.903 442.635 266.465 cv
443.197 267.028 443.961 267.344 444.756 267.344 cv
cp
f
444.756 267.344 mo
445.552 267.344 446.315 267.028 446.878 266.465 cv
447.44 265.903 447.756 265.14 447.756 264.344 cv
447.756 263.549 447.44 262.785 446.878 262.223 cv
446.315 261.66 445.552 261.344 444.756 261.344 cv
443.961 261.344 443.197 261.66 442.635 262.223 cv
442.072 262.785 441.756 263.549 441.756 264.344 cv
441.756 265.14 442.072 265.903 442.635 266.465 cv
443.197 267.028 443.961 267.344 444.756 267.344 cv
cp
@
215.257 406.854 mo
216.052 406.854 216.815 406.538 217.378 405.975 cv
217.94 405.413 218.257 404.65 218.257 403.854 cv
218.257 403.058 217.94 402.295 217.378 401.733 cv
216.815 401.17 216.052 400.854 215.257 400.854 cv
214.461 400.854 213.698 401.17 213.135 401.733 cv
212.573 402.295 212.257 403.058 212.257 403.854 cv
212.257 404.65 212.573 405.413 213.135 405.975 cv
213.698 406.538 214.461 406.854 215.257 406.854 cv
cp
f
215.257 406.854 mo
216.052 406.854 216.815 406.538 217.378 405.975 cv
217.94 405.413 218.257 404.65 218.257 403.854 cv
218.257 403.058 217.94 402.295 217.378 401.733 cv
216.815 401.17 216.052 400.854 215.257 400.854 cv
214.461 400.854 213.698 401.17 213.135 401.733 cv
212.573 402.295 212.257 403.058 212.257 403.854 cv
212.257 404.65 212.573 405.413 213.135 405.975 cv
213.698 406.538 214.461 406.854 215.257 406.854 cv
cp
@
291.475 128.538 mo
292.27 128.538 293.034 128.222 293.596 127.66 cv
294.159 127.097 294.475 126.334 294.475 125.538 cv
294.475 124.743 294.159 123.98 293.596 123.417 cv
293.034 122.854 292.27 122.538 291.475 122.538 cv
290.679 122.538 289.916 122.854 289.354 123.417 cv
288.791 123.98 288.475 124.743 288.475 125.538 cv
288.475 126.334 288.791 127.097 289.354 127.66 cv
289.916 128.222 290.679 128.538 291.475 128.538 cv
f
291.475 128.538 mo
291.475 128.038 li
292.138 128.038 292.774 127.775 293.243 127.306 cv
293.711 126.837 293.975 126.201 293.975 125.538 cv
293.975 124.875 293.711 124.239 293.243 123.77 cv
292.774 123.302 292.138 123.038 291.475 123.038 cv
290.812 123.038 290.176 123.302 289.707 123.77 cv
289.238 124.239 288.975 124.875 288.975 125.538 cv
288.975 126.201 289.238 126.837 289.707 127.306 cv
290.176 127.775 290.812 128.038 291.475 128.038 cv
291.475 128.538 li
291.475 129.038 li
290.547 129.038 289.656 128.669 289 128.013 cv
288.344 127.357 287.975 126.467 287.975 125.538 cv
287.975 124.61 288.344 123.72 289 123.063 cv
289.656 122.407 290.547 122.038 291.475 122.038 cv
292.403 122.038 293.293 122.407 293.95 123.063 cv
294.606 123.72 294.975 124.61 294.975 125.538 cv
294.975 126.467 294.606 127.357 293.95 128.013 cv
293.293 128.669 292.403 129.038 291.475 129.038 cv
291.475 128.538 li
f
125.752 148.157 mo
126.548 148.157 127.311 147.841 127.873 147.279 cv
128.436 146.716 128.752 145.953 128.752 145.157 cv
128.752 144.362 128.436 143.598 127.873 143.036 cv
127.311 142.473 126.548 142.157 125.752 142.157 cv
124.956 142.157 124.193 142.473 123.631 143.036 cv
123.068 143.598 122.752 144.362 122.752 145.157 cv
122.752 145.953 123.068 146.716 123.631 147.279 cv
124.193 147.841 124.956 148.157 125.752 148.157 cv
cp
f
125.752 148.157 mo
126.548 148.157 127.311 147.841 127.873 147.279 cv
128.436 146.716 128.752 145.953 128.752 145.157 cv
128.752 144.362 128.436 143.598 127.873 143.036 cv
127.311 142.473 126.548 142.157 125.752 142.157 cv
124.956 142.157 124.193 142.473 123.631 143.036 cv
123.068 143.598 122.752 144.362 122.752 145.157 cv
122.752 145.953 123.068 146.716 123.631 147.279 cv
124.193 147.841 124.956 148.157 125.752 148.157 cv
cp
@
102.73 63.6722 mo
103.525 63.6722 104.289 63.3561 104.851 62.7935 cv
105.414 62.2309 105.73 61.4678 105.73 60.6722 cv
105.73 59.8766 105.414 59.1135 104.851 58.5509 cv
104.289 57.9883 103.525 57.6722 102.73 57.6722 cv
101.934 57.6722 101.171 57.9883 100.609 58.5509 cv
100.046 59.1135 99.7299 59.8766 99.7299 60.6722 cv
99.7299 61.4678 100.046 62.2309 100.609 62.7935 cv
101.171 63.3561 101.934 63.6722 102.73 63.6722 cv
cp
f
102.73 63.6722 mo
103.525 63.6722 104.289 63.3561 104.851 62.7935 cv
105.414 62.2309 105.73 61.4678 105.73 60.6722 cv
105.73 59.8766 105.414 59.1135 104.851 58.5509 cv
104.289 57.9883 103.525 57.6722 102.73 57.6722 cv
101.934 57.6722 101.171 57.9883 100.609 58.5509 cv
100.046 59.1135 99.7299 59.8766 99.7299 60.6722 cv
99.7299 61.4678 100.046 62.2309 100.609 62.7935 cv
101.171 63.3561 101.934 63.6722 102.73 63.6722 cv
cp
@
81.19 143.601 mo
81.9856 143.601 82.7487 143.285 83.3113 142.722 cv
83.8739 142.16 84.19 141.396 84.19 140.601 cv
84.19 139.805 83.8739 139.042 83.3113 138.48 cv
82.7487 137.917 81.9856 137.601 81.19 137.601 cv
80.3944 137.601 79.6312 137.917 79.0686 138.48 cv
78.5061 139.042 78.19 139.805 78.19 140.601 cv
78.19 141.396 78.5061 142.16 79.0686 142.722 cv
79.6312 143.285 80.3944 143.601 81.19 143.601 cv
cp
f
81.19 143.601 mo
81.9856 143.601 82.7487 143.285 83.3113 142.722 cv
83.8739 142.16 84.19 141.396 84.19 140.601 cv
84.19 139.805 83.8739 139.042 83.3113 138.48 cv
82.7487 137.917 81.9856 137.601 81.19 137.601 cv
80.3944 137.601 79.6312 137.917 79.0686 138.48 cv
78.5061 139.042 78.19 139.805 78.19 140.601 cv
78.19 141.396 78.5061 142.16 79.0686 142.722 cv
79.6312 143.285 80.3944 143.601 81.19 143.601 cv
cp
@
124.605 157.449 mo
125.401 157.449 126.164 157.133 126.726 156.57 cv
127.289 156.007 127.605 155.244 127.605 154.449 cv
127.605 153.653 127.289 152.89 126.726 152.327 cv
126.164 151.765 125.401 151.449 124.605 151.449 cv
123.81 151.449 123.046 151.765 122.484 152.327 cv
121.921 152.89 121.605 153.653 121.605 154.449 cv
121.605 155.244 121.921 156.007 122.484 156.57 cv
123.046 157.133 123.81 157.449 124.605 157.449 cv
cp
f
124.605 157.449 mo
125.401 157.449 126.164 157.133 126.726 156.57 cv
127.289 156.007 127.605 155.244 127.605 154.449 cv
127.605 153.653 127.289 152.89 126.726 152.327 cv
126.164 151.765 125.401 151.449 124.605 151.449 cv
123.81 151.449 123.046 151.765 122.484 152.327 cv
121.921 152.89 121.605 153.653 121.605 154.449 cv
121.605 155.244 121.921 156.007 122.484 156.57 cv
123.046 157.133 123.81 157.449 124.605 157.449 cv
cp
@
447.262 373.87 mo
448.058 373.87 448.821 373.554 449.383 372.991 cv
449.946 372.429 450.262 371.666 450.262 370.87 cv
450.262 370.074 449.946 369.311 449.383 368.749 cv
448.821 368.186 448.058 367.87 447.262 367.87 cv
446.466 367.87 445.703 368.186 445.141 368.749 cv
444.578 369.311 444.262 370.074 444.262 370.87 cv
444.262 371.666 444.578 372.429 445.141 372.991 cv
445.703 373.554 446.466 373.87 447.262 373.87 cv
cp
f
447.262 373.87 mo
448.058 373.87 448.821 373.554 449.383 372.991 cv
449.946 372.429 450.262 371.666 450.262 370.87 cv
450.262 370.074 449.946 369.311 449.383 368.749 cv
448.821 368.186 448.058 367.87 447.262 367.87 cv
446.466 367.87 445.703 368.186 445.141 368.749 cv
444.578 369.311 444.262 370.074 444.262 370.87 cv
444.262 371.666 444.578 372.429 445.141 372.991 cv
445.703 373.554 446.466 373.87 447.262 373.87 cv
cp
@
218.663 229.693 mo
219.458 229.693 220.221 229.377 220.784 228.815 cv
221.347 228.252 221.663 227.489 221.663 226.693 cv
221.663 225.898 221.347 225.135 220.784 224.572 cv
220.221 224.009 219.458 223.693 218.663 223.693 cv
217.867 223.693 217.104 224.009 216.541 224.572 cv
215.979 225.135 215.663 225.898 215.663 226.693 cv
215.663 227.489 215.979 228.252 216.541 228.815 cv
217.104 229.377 217.867 229.693 218.663 229.693 cv
cp
f
218.663 229.693 mo
219.458 229.693 220.221 229.377 220.784 228.815 cv
221.347 228.252 221.663 227.489 221.663 226.693 cv
221.663 225.898 221.347 225.135 220.784 224.572 cv
220.221 224.009 219.458 223.693 218.663 223.693 cv
217.867 223.693 217.104 224.009 216.541 224.572 cv
215.979 225.135 215.663 225.898 215.663 226.693 cv
215.663 227.489 215.979 228.252 216.541 228.815 cv
217.104 229.377 217.867 229.693 218.663 229.693 cv
cp
@
383.466 107.185 mo
384.261 107.185 385.024 106.869 385.587 106.307 cv
386.149 105.744 386.465 104.981 386.465 104.185 cv
386.465 103.39 386.149 102.626 385.587 102.064 cv
385.024 101.501 384.261 101.185 383.466 101.185 cv
382.67 101.185 381.907 101.501 381.344 102.064 cv
380.782 102.626 380.466 103.39 380.466 104.185 cv
380.466 104.981 380.782 105.744 381.344 106.307 cv
381.907 106.869 382.67 107.185 383.466 107.185 cv
f
383.466 107.185 mo
383.466 106.685 li
384.128 106.685 384.764 106.422 385.233 105.953 cv
385.702 105.484 385.966 104.848 385.966 104.185 cv
385.966 103.522 385.702 102.886 385.233 102.417 cv
385.233 102.417 li
384.764 101.949 384.128 101.685 383.466 101.685 cv
382.803 101.685 382.167 101.949 381.698 102.417 cv
381.698 102.417 li
381.229 102.886 380.965 103.522 380.965 104.185 cv
380.965 104.848 381.229 105.484 381.698 105.953 cv
382.167 106.422 382.803 106.685 383.466 106.685 cv
383.466 107.185 li
383.466 107.685 li
382.537 107.685 381.647 107.316 380.991 106.66 cv
380.334 106.004 379.965 105.113 379.965 104.185 cv
379.965 103.257 380.334 102.367 380.991 101.71 cv
381.647 101.054 382.537 100.685 383.466 100.685 cv
384.394 100.685 385.284 101.054 385.94 101.71 cv
386.597 102.367 386.966 103.257 386.966 104.185 cv
386.966 105.113 386.597 106.004 385.94 106.66 cv
385.284 107.316 384.394 107.685 383.466 107.685 cv
383.466 107.185 li
f
365.11 216.577 mo
365.906 216.577 366.669 216.261 367.232 215.698 cv
367.794 215.136 368.11 214.373 368.11 213.577 cv
368.11 212.781 367.794 212.018 367.232 211.456 cv
366.669 210.893 365.906 210.577 365.11 210.577 cv
364.315 210.577 363.552 210.893 362.989 211.456 cv
362.427 212.018 362.11 212.781 362.11 213.577 cv
362.11 214.373 362.427 215.136 362.989 215.698 cv
363.552 216.261 364.315 216.577 365.11 216.577 cv
cp
f
365.11 216.577 mo
365.906 216.577 366.669 216.261 367.232 215.698 cv
367.794 215.136 368.11 214.373 368.11 213.577 cv
368.11 212.781 367.794 212.018 367.232 211.456 cv
366.669 210.893 365.906 210.577 365.11 210.577 cv
364.315 210.577 363.552 210.893 362.989 211.456 cv
362.427 212.018 362.11 212.781 362.11 213.577 cv
362.11 214.373 362.427 215.136 362.989 215.698 cv
363.552 216.261 364.315 216.577 365.11 216.577 cv
cp
@
364.895 154.463 mo
365.69 154.463 366.453 154.147 367.016 153.584 cv
367.579 153.022 367.895 152.259 367.895 151.463 cv
367.895 150.667 367.579 149.904 367.016 149.342 cv
366.453 148.779 365.69 148.463 364.895 148.463 cv
364.099 148.463 363.336 148.779 362.773 149.342 cv
362.211 149.904 361.895 150.667 361.895 151.463 cv
361.895 152.259 362.211 153.022 362.773 153.584 cv
363.336 154.147 364.099 154.463 364.895 154.463 cv
cp
f
364.895 154.463 mo
365.69 154.463 366.453 154.147 367.016 153.584 cv
367.579 153.022 367.895 152.259 367.895 151.463 cv
367.895 150.667 367.579 149.904 367.016 149.342 cv
366.453 148.779 365.69 148.463 364.895 148.463 cv
364.099 148.463 363.336 148.779 362.773 149.342 cv
362.211 149.904 361.895 150.667 361.895 151.463 cv
361.895 152.259 362.211 153.022 362.773 153.584 cv
363.336 154.147 364.099 154.463 364.895 154.463 cv
cp
@
127.348 314.471 mo
128.143 314.471 128.906 314.155 129.469 313.592 cv
130.032 313.03 130.348 312.267 130.348 311.471 cv
130.348 310.675 130.032 309.912 129.469 309.35 cv
128.906 308.787 128.143 308.471 127.348 308.471 cv
126.552 308.471 125.789 308.787 125.226 309.35 cv
124.664 309.912 124.348 310.675 124.348 311.471 cv
124.348 312.267 124.664 313.03 125.226 313.592 cv
125.789 314.155 126.552 314.471 127.348 314.471 cv
cp
f
127.348 314.471 mo
128.143 314.471 128.906 314.155 129.469 313.592 cv
130.032 313.03 130.348 312.267 130.348 311.471 cv
130.348 310.675 130.032 309.912 129.469 309.35 cv
128.906 308.787 128.143 308.471 127.348 308.471 cv
126.552 308.471 125.789 308.787 125.226 309.35 cv
124.664 309.912 124.348 310.675 124.348 311.471 cv
124.348 312.267 124.664 313.03 125.226 313.592 cv
125.789 314.155 126.552 314.471 127.348 314.471 cv
cp
@
81.5808 421.458 mo
82.3764 421.458 83.1395 421.142 83.7021 420.579 cv
84.2647 420.017 84.5808 419.254 84.5808 418.458 cv
84.5808 417.662 84.2647 416.899 83.7021 416.337 cv
83.1395 415.774 82.3764 415.458 81.5808 415.458 cv
80.7852 415.458 80.0221 415.774 79.4595 416.337 cv
78.8969 416.899 78.5808 417.662 78.5808 418.458 cv
78.5808 419.254 78.8969 420.017 79.4595 420.579 cv
80.0221 421.142 80.7852 421.458 81.5808 421.458 cv
cp
f
81.5808 421.458 mo
82.3764 421.458 83.1395 421.142 83.7021 420.579 cv
84.2647 420.017 84.5808 419.254 84.5808 418.458 cv
84.5808 417.662 84.2647 416.899 83.7021 416.337 cv
83.1395 415.774 82.3764 415.458 81.5808 415.458 cv
80.7852 415.458 80.0221 415.774 79.4595 416.337 cv
78.8969 416.899 78.5808 417.662 78.5808 418.458 cv
78.5808 419.254 78.8969 420.017 79.4595 420.579 cv
80.0221 421.142 80.7852 421.458 81.5808 421.458 cv
cp
@
254.021 35.0506 mo
254.817 35.0506 255.58 34.7345 256.142 34.1719 cv
256.705 33.6093 257.021 32.8462 257.021 32.0506 cv
257.021 31.255 256.705 30.4918 256.142 29.9292 cv
255.58 29.3667 254.817 29.0506 254.021 29.0506 cv
253.226 29.0506 252.462 29.3667 251.9 29.9292 cv
251.337 30.4918 251.021 31.255 251.021 32.0506 cv
251.021 32.8462 251.337 33.6093 251.9 34.1719 cv
252.462 34.7345 253.226 35.0506 254.021 35.0506 cv
cp
f
254.021 35.0506 mo
254.817 35.0506 255.58 34.7345 256.142 34.1719 cv
256.705 33.6093 257.021 32.8462 257.021 32.0506 cv
257.021 31.255 256.705 30.4918 256.142 29.9292 cv
255.58 29.3667 254.817 29.0506 254.021 29.0506 cv
253.226 29.0506 252.462 29.3667 251.9 29.9292 cv
251.337 30.4918 251.021 31.255 251.021 32.0506 cv
251.021 32.8462 251.337 33.6093 251.9 34.1719 cv
252.462 34.7345 253.226 35.0506 254.021 35.0506 cv
cp
@
369.869 228.469 mo
370.664 228.469 371.427 228.152 371.99 227.59 cv
372.553 227.027 372.869 226.264 372.869 225.469 cv
372.869 224.673 372.553 223.91 371.99 223.347 cv
371.427 222.785 370.664 222.469 369.869 222.469 cv
369.073 222.469 368.31 222.785 367.747 223.347 cv
367.185 223.91 366.869 224.673 366.869 225.469 cv
366.869 226.264 367.185 227.027 367.747 227.59 cv
368.31 228.152 369.073 228.469 369.869 228.469 cv
cp
f
369.869 228.469 mo
370.664 228.469 371.427 228.152 371.99 227.59 cv
372.553 227.027 372.869 226.264 372.869 225.469 cv
372.869 224.673 372.553 223.91 371.99 223.347 cv
371.427 222.785 370.664 222.469 369.869 222.469 cv
369.073 222.469 368.31 222.785 367.747 223.347 cv
367.185 223.91 366.869 224.673 366.869 225.469 cv
366.869 226.264 367.185 227.027 367.747 227.59 cv
368.31 228.152 369.073 228.469 369.869 228.469 cv
cp
@
80.7604 107.446 mo
81.556 107.446 82.3191 107.13 82.8817 106.568 cv
83.4443 106.005 83.7604 105.242 83.7604 104.446 cv
83.7604 103.651 83.4443 102.888 82.8817 102.325 cv
82.3191 101.762 81.556 101.446 80.7604 101.446 cv
79.9648 101.446 79.2016 101.762 78.6391 102.325 cv
78.0765 102.888 77.7604 103.651 77.7604 104.446 cv
77.7604 105.242 78.0765 106.005 78.6391 106.568 cv
79.2016 107.13 79.9648 107.446 80.7604 107.446 cv
cp
f
80.7604 107.446 mo
81.556 107.446 82.3191 107.13 82.8817 106.568 cv
83.4443 106.005 83.7604 105.242 83.7604 104.446 cv
83.7604 103.651 83.4443 102.888 82.8817 102.325 cv
82.3191 101.762 81.556 101.446 80.7604 101.446 cv
79.9648 101.446 79.2016 101.762 78.6391 102.325 cv
78.0765 102.888 77.7604 103.651 77.7604 104.446 cv
77.7604 105.242 78.0765 106.005 78.6391 106.568 cv
79.2016 107.13 79.9648 107.446 80.7604 107.446 cv
cp
@
269.049 188.947 mo
269.845 188.947 270.608 188.63 271.17 188.068 cv
271.733 187.505 272.049 186.742 272.049 185.947 cv
272.049 185.151 271.733 184.388 271.17 183.825 cv
270.608 183.263 269.845 182.947 269.049 182.947 cv
268.254 182.947 267.49 183.263 266.928 183.825 cv
266.365 184.388 266.049 185.151 266.049 185.947 cv
266.049 186.742 266.365 187.505 266.928 188.068 cv
267.49 188.63 268.254 188.947 269.049 188.947 cv
cp
f
269.049 188.947 mo
269.845 188.947 270.608 188.63 271.17 188.068 cv
271.733 187.505 272.049 186.742 272.049 185.947 cv
272.049 185.151 271.733 184.388 271.17 183.825 cv
270.608 183.263 269.845 182.947 269.049 182.947 cv
268.254 182.947 267.49 183.263 266.928 183.825 cv
266.365 184.388 266.049 185.151 266.049 185.947 cv
266.049 186.742 266.365 187.505 266.928 188.068 cv
267.49 188.63 268.254 188.947 269.049 188.947 cv
cp
@
426.602 193.18 mo
427.397 193.18 428.161 192.864 428.723 192.302 cv
429.286 191.739 429.602 190.976 429.602 190.18 cv
429.602 189.385 429.286 188.621 428.723 188.059 cv
428.161 187.496 427.397 187.18 426.602 187.18 cv
425.806 187.18 425.043 187.496 424.481 188.059 cv
423.918 188.621 423.602 189.385 423.602 190.18 cv
423.602 190.976 423.918 191.739 424.481 192.302 cv
425.043 192.864 425.806 193.18 426.602 193.18 cv
cp
f
426.602 193.18 mo
427.397 193.18 428.161 192.864 428.723 192.302 cv
429.286 191.739 429.602 190.976 429.602 190.18 cv
429.602 189.385 429.286 188.621 428.723 188.059 cv
428.161 187.496 427.397 187.18 426.602 187.18 cv
425.806 187.18 425.043 187.496 424.481 188.059 cv
423.918 188.621 423.602 189.385 423.602 190.18 cv
423.602 190.976 423.918 191.739 424.481 192.302 cv
425.043 192.864 425.806 193.18 426.602 193.18 cv
cp
@
239.371 62.3683 mo
240.166 62.3683 240.929 62.0522 241.492 61.4896 cv
242.054 60.927 242.371 60.1639 242.371 59.3683 cv
242.371 58.5726 242.054 57.8095 241.492 57.2469 cv
240.929 56.6844 240.166 56.3683 239.371 56.3683 cv
238.575 56.3683 237.812 56.6844 237.249 57.2469 cv
236.687 57.8095 236.371 58.5726 236.371 59.3683 cv
236.371 60.1639 236.687 60.927 237.249 61.4896 cv
237.812 62.0522 238.575 62.3683 239.371 62.3683 cv
cp
f
239.371 62.3683 mo
240.166 62.3683 240.929 62.0522 241.492 61.4896 cv
242.054 60.927 242.371 60.1639 242.371 59.3683 cv
242.371 58.5726 242.054 57.8095 241.492 57.2469 cv
240.929 56.6844 240.166 56.3683 239.371 56.3683 cv
238.575 56.3683 237.812 56.6844 237.249 57.2469 cv
236.687 57.8095 236.371 58.5726 236.371 59.3683 cv
236.371 60.1639 236.687 60.927 237.249 61.4896 cv
237.812 62.0522 238.575 62.3683 239.371 62.3683 cv
cp
@
416.716 356.506 mo
417.512 356.506 418.275 356.19 418.838 355.628 cv
419.4 355.065 419.716 354.302 419.716 353.506 cv
419.716 352.711 419.4 351.948 418.838 351.385 cv
418.275 350.822 417.512 350.506 416.716 350.506 cv
415.921 350.506 415.158 350.822 414.595 351.385 cv
414.032 351.948 413.716 352.711 413.716 353.506 cv
413.716 354.302 414.032 355.065 414.595 355.628 cv
415.158 356.19 415.921 356.506 416.716 356.506 cv
cp
f
416.716 356.506 mo
417.512 356.506 418.275 356.19 418.838 355.628 cv
419.4 355.065 419.716 354.302 419.716 353.506 cv
419.716 352.711 419.4 351.948 418.838 351.385 cv
418.275 350.822 417.512 350.506 416.716 350.506 cv
415.921 350.506 415.158 350.822 414.595 351.385 cv
414.032 351.948 413.716 352.711 413.716 353.506 cv
413.716 354.302 414.032 355.065 414.595 355.628 cv
415.158 356.19 415.921 356.506 416.716 356.506 cv
cp
@
255.011 286.681 mo
255.806 286.681 256.569 286.364 257.132 285.802 cv
257.694 285.239 258.011 284.476 258.011 283.681 cv
258.011 282.885 257.694 282.122 257.132 281.559 cv
256.569 280.997 255.806 280.681 255.011 280.681 cv
254.215 280.681 253.452 280.997 252.889 281.559 cv
252.327 282.122 252.011 282.885 252.011 283.681 cv
252.011 284.476 252.327 285.239 252.889 285.802 cv
253.452 286.364 254.215 286.681 255.011 286.681 cv
cp
f
255.011 286.681 mo
255.806 286.681 256.569 286.364 257.132 285.802 cv
257.694 285.239 258.011 284.476 258.011 283.681 cv
258.011 282.885 257.694 282.122 257.132 281.559 cv
256.569 280.997 255.806 280.681 255.011 280.681 cv
254.215 280.681 253.452 280.997 252.889 281.559 cv
252.327 282.122 252.011 282.885 252.011 283.681 cv
252.011 284.476 252.327 285.239 252.889 285.802 cv
253.452 286.364 254.215 286.681 255.011 286.681 cv
cp
@
72.9232 227.097 mo
73.7188 227.097 74.4819 226.781 75.0445 226.219 cv
75.6071 225.656 75.9232 224.893 75.9232 224.097 cv
75.9232 223.302 75.6071 222.538 75.0445 221.976 cv
74.4819 221.413 73.7188 221.097 72.9232 221.097 cv
72.1276 221.097 71.3644 221.413 70.8018 221.976 cv
70.2393 222.538 69.9232 223.302 69.9232 224.097 cv
69.9232 224.893 70.2393 225.656 70.8018 226.219 cv
71.3644 226.781 72.1276 227.097 72.9232 227.097 cv
cp
f
72.9232 227.097 mo
73.7188 227.097 74.4819 226.781 75.0445 226.219 cv
75.6071 225.656 75.9232 224.893 75.9232 224.097 cv
75.9232 223.302 75.6071 222.538 75.0445 221.976 cv
74.4819 221.413 73.7188 221.097 72.9232 221.097 cv
72.1276 221.097 71.3644 221.413 70.8018 221.976 cv
70.2393 222.538 69.9232 223.302 69.9232 224.097 cv
69.9232 224.893 70.2393 225.656 70.8018 226.219 cv
71.3644 226.781 72.1276 227.097 72.9232 227.097 cv
cp
@
166.283 411.359 mo
167.079 411.359 167.842 411.043 168.405 410.481 cv
168.967 409.918 169.283 409.155 169.283 408.359 cv
169.283 407.564 168.967 406.801 168.405 406.238 cv
167.842 405.675 167.079 405.359 166.283 405.359 cv
165.488 405.359 164.725 405.675 164.162 406.238 cv
163.6 406.801 163.283 407.564 163.283 408.359 cv
163.283 409.155 163.6 409.918 164.162 410.481 cv
164.725 411.043 165.488 411.359 166.283 411.359 cv
cp
f
166.283 411.359 mo
167.079 411.359 167.842 411.043 168.405 410.481 cv
168.967 409.918 169.283 409.155 169.283 408.359 cv
169.283 407.564 168.967 406.801 168.405 406.238 cv
167.842 405.675 167.079 405.359 166.283 405.359 cv
165.488 405.359 164.725 405.675 164.162 406.238 cv
163.6 406.801 163.283 407.564 163.283 408.359 cv
163.283 409.155 163.6 409.918 164.162 410.481 cv
164.725 411.043 165.488 411.359 166.283 411.359 cv
cp
@
196.6 190.663 mo
197.395 190.663 198.159 190.347 198.721 189.784 cv
199.284 189.222 199.6 188.459 199.6 187.663 cv
199.6 186.867 199.284 186.104 198.721 185.542 cv
198.159 184.979 197.395 184.663 196.6 184.663 cv
195.804 184.663 195.041 184.979 194.479 185.542 cv
193.916 186.104 193.6 186.867 193.6 187.663 cv
193.6 188.459 193.916 189.222 194.479 189.784 cv
195.041 190.347 195.804 190.663 196.6 190.663 cv
cp
f
196.6 190.663 mo
197.395 190.663 198.159 190.347 198.721 189.784 cv
199.284 189.222 199.6 188.459 199.6 187.663 cv
199.6 186.867 199.284 186.104 198.721 185.542 cv
198.159 184.979 197.395 184.663 196.6 184.663 cv
195.804 184.663 195.041 184.979 194.479 185.542 cv
193.916 186.104 193.6 186.867 193.6 187.663 cv
193.6 188.459 193.916 189.222 194.479 189.784 cv
195.041 190.347 195.804 190.663 196.6 190.663 cv
cp
@
130.716 89.714 mo
131.512 89.714 132.275 89.3979 132.838 88.8353 cv
133.4 88.2728 133.716 87.5096 133.716 86.714 cv
133.716 85.9184 133.4 85.1553 132.838 84.5927 cv
132.275 84.0301 131.512 83.714 130.716 83.714 cv
129.921 83.714 129.158 84.0301 128.595 84.5927 cv
128.033 85.1553 127.716 85.9184 127.716 86.714 cv
127.716 87.5096 128.033 88.2728 128.595 88.8353 cv
129.158 89.3979 129.921 89.714 130.716 89.714 cv
cp
f
130.716 89.714 mo
131.512 89.714 132.275 89.3979 132.838 88.8353 cv
133.4 88.2728 133.716 87.5096 133.716 86.714 cv
133.716 85.9184 133.4 85.1553 132.838 84.5927 cv
132.275 84.0301 131.512 83.714 130.716 83.714 cv
129.921 83.714 129.158 84.0301 128.595 84.5927 cv
128.033 85.1553 127.716 85.9184 127.716 86.714 cv
127.716 87.5096 128.033 88.2728 128.595 88.8353 cv
129.158 89.3979 129.921 89.714 130.716 89.714 cv
cp
@
115.067 425.433 mo
115.863 425.433 116.626 425.117 117.189 424.555 cv
117.751 423.992 118.067 423.229 118.067 422.433 cv
118.067 421.638 117.751 420.875 117.189 420.312 cv
116.626 419.75 115.863 419.433 115.067 419.433 cv
114.272 419.433 113.508 419.75 112.946 420.312 cv
112.383 420.875 112.067 421.638 112.067 422.433 cv
112.067 423.229 112.383 423.992 112.946 424.555 cv
113.508 425.117 114.272 425.433 115.067 425.433 cv
cp
f
115.067 425.433 mo
115.863 425.433 116.626 425.117 117.189 424.555 cv
117.751 423.992 118.067 423.229 118.067 422.433 cv
118.067 421.638 117.751 420.875 117.189 420.312 cv
116.626 419.75 115.863 419.433 115.067 419.433 cv
114.272 419.433 113.508 419.75 112.946 420.312 cv
112.383 420.875 112.067 421.638 112.067 422.433 cv
112.067 423.229 112.383 423.992 112.946 424.555 cv
113.508 425.117 114.272 425.433 115.067 425.433 cv
cp
@
309.935 364.989 mo
310.731 364.989 311.494 364.673 312.056 364.11 cv
312.619 363.547 312.935 362.784 312.935 361.989 cv
312.935 361.193 312.619 360.43 312.056 359.867 cv
311.494 359.305 310.731 358.989 309.935 358.989 cv
309.14 358.989 308.376 359.305 307.814 359.867 cv
307.251 360.43 306.935 361.193 306.935 361.989 cv
306.935 362.784 307.251 363.547 307.814 364.11 cv
308.376 364.673 309.14 364.989 309.935 364.989 cv
cp
f
309.935 364.989 mo
310.731 364.989 311.494 364.673 312.056 364.11 cv
312.619 363.547 312.935 362.784 312.935 361.989 cv
312.935 361.193 312.619 360.43 312.056 359.867 cv
311.494 359.305 310.731 358.989 309.935 358.989 cv
309.14 358.989 308.376 359.305 307.814 359.867 cv
307.251 360.43 306.935 361.193 306.935 361.989 cv
306.935 362.784 307.251 363.547 307.814 364.11 cv
308.376 364.673 309.14 364.989 309.935 364.989 cv
cp
@
329.543 334.193 mo
330.339 334.193 331.102 333.877 331.664 333.314 cv
332.227 332.752 332.543 331.989 332.543 331.193 cv
332.543 330.397 332.227 329.634 331.664 329.072 cv
331.102 328.509 330.339 328.193 329.543 328.193 cv
328.747 328.193 327.984 328.509 327.422 329.072 cv
326.859 329.634 326.543 330.397 326.543 331.193 cv
326.543 331.989 326.859 332.752 327.422 333.314 cv
327.984 333.877 328.747 334.193 329.543 334.193 cv
cp
f
329.543 334.193 mo
330.339 334.193 331.102 333.877 331.664 333.314 cv
332.227 332.752 332.543 331.989 332.543 331.193 cv
332.543 330.397 332.227 329.634 331.664 329.072 cv
331.102 328.509 330.339 328.193 329.543 328.193 cv
328.747 328.193 327.984 328.509 327.422 329.072 cv
326.859 329.634 326.543 330.397 326.543 331.193 cv
326.543 331.989 326.859 332.752 327.422 333.314 cv
327.984 333.877 328.747 334.193 329.543 334.193 cv
cp
@
354.585 58.0658 mo
355.381 58.0658 356.144 57.7497 356.707 57.1871 cv
357.269 56.6245 357.585 55.8614 357.585 55.0657 cv
357.585 54.2701 357.269 53.507 356.707 52.9445 cv
356.144 52.3819 355.381 52.0658 354.585 52.0658 cv
353.79 52.0658 353.026 52.3819 352.464 52.9445 cv
351.901 53.507 351.585 54.2701 351.585 55.0657 cv
351.585 55.8614 351.901 56.6245 352.464 57.1871 cv
353.026 57.7497 353.79 58.0658 354.585 58.0658 cv
f
354.585 58.0658 mo
354.585 57.5658 li
355.248 57.5658 355.884 57.3024 356.353 56.8336 cv
356.822 56.3648 357.085 55.7287 357.085 55.0657 cv
357.085 54.4028 356.822 53.7668 356.353 53.298 cv
355.884 52.8292 355.248 52.5658 354.585 52.5658 cv
353.922 52.5658 353.286 52.8292 352.818 53.298 cv
352.349 53.7668 352.085 54.4028 352.085 55.0657 cv
352.085 55.7287 352.349 56.3648 352.818 56.8336 cv
353.286 57.3024 353.922 57.5658 354.585 57.5658 cv
354.585 58.0658 li
354.585 58.5657 li
353.657 58.5657 352.767 58.1971 352.11 57.5406 cv
351.454 56.8843 351.085 55.994 351.085 55.0657 cv
351.085 54.1375 351.454 53.2473 352.11 52.5908 cv
352.767 51.9345 353.657 51.5657 354.585 51.5657 cv
355.513 51.5657 356.404 51.9345 357.06 52.5908 cv
357.716 53.2473 358.085 54.1375 358.085 55.0657 cv
358.085 55.994 357.716 56.8843 357.06 57.5406 cv
356.404 58.1971 355.513 58.5657 354.585 58.5657 cv
354.585 58.0658 li
f
413.791 432.148 mo
414.586 432.148 415.35 431.832 415.912 431.269 cv
416.475 430.706 416.791 429.943 416.791 429.148 cv
416.791 428.352 416.475 427.589 415.912 427.026 cv
415.35 426.464 414.586 426.148 413.791 426.148 cv
412.995 426.148 412.232 426.464 411.67 427.026 cv
411.107 427.589 410.791 428.352 410.791 429.148 cv
410.791 429.943 411.107 430.706 411.67 431.269 cv
412.232 431.832 412.995 432.148 413.791 432.148 cv
cp
f
413.791 432.148 mo
414.586 432.148 415.35 431.832 415.912 431.269 cv
416.475 430.706 416.791 429.943 416.791 429.148 cv
416.791 428.352 416.475 427.589 415.912 427.026 cv
415.35 426.464 414.586 426.148 413.791 426.148 cv
412.995 426.148 412.232 426.464 411.67 427.026 cv
411.107 427.589 410.791 428.352 410.791 429.148 cv
410.791 429.943 411.107 430.706 411.67 431.269 cv
412.232 431.832 412.995 432.148 413.791 432.148 cv
cp
@
340.326 236.438 mo
341.122 236.438 341.885 236.122 342.448 235.559 cv
343.01 234.997 343.326 234.234 343.326 233.438 cv
343.326 232.642 343.01 231.879 342.448 231.317 cv
341.885 230.754 341.122 230.438 340.326 230.438 cv
339.531 230.438 338.768 230.754 338.205 231.317 cv
337.643 231.879 337.326 232.642 337.326 233.438 cv
337.326 234.234 337.643 234.997 338.205 235.559 cv
338.768 236.122 339.531 236.438 340.326 236.438 cv
cp
f
340.326 236.438 mo
341.122 236.438 341.885 236.122 342.448 235.559 cv
343.01 234.997 343.326 234.234 343.326 233.438 cv
343.326 232.642 343.01 231.879 342.448 231.317 cv
341.885 230.754 341.122 230.438 340.326 230.438 cv
339.531 230.438 338.768 230.754 338.205 231.317 cv
337.643 231.879 337.326 232.642 337.326 233.438 cv
337.326 234.234 337.643 234.997 338.205 235.559 cv
338.768 236.122 339.531 236.438 340.326 236.438 cv
cp
@
328.522 385.936 mo
329.318 385.936 330.081 385.619 330.643 385.057 cv
331.206 384.494 331.522 383.731 331.522 382.936 cv
331.522 382.14 331.206 381.377 330.643 380.814 cv
330.081 380.252 329.318 379.936 328.522 379.936 cv
327.727 379.936 326.963 380.252 326.401 380.814 cv
325.838 381.377 325.522 382.14 325.522 382.936 cv
325.522 383.731 325.838 384.494 326.401 385.057 cv
326.963 385.619 327.727 385.936 328.522 385.936 cv
cp
f
328.522 385.936 mo
329.318 385.936 330.081 385.619 330.643 385.057 cv
331.206 384.494 331.522 383.731 331.522 382.936 cv
331.522 382.14 331.206 381.377 330.643 380.814 cv
330.081 380.252 329.318 379.936 328.522 379.936 cv
327.727 379.936 326.963 380.252 326.401 380.814 cv
325.838 381.377 325.522 382.14 325.522 382.936 cv
325.522 383.731 325.838 384.494 326.401 385.057 cv
326.963 385.619 327.727 385.936 328.522 385.936 cv
cp
@
397.646 247.72 mo
398.441 247.72 399.205 247.404 399.767 246.842 cv
400.33 246.279 400.646 245.516 400.646 244.72 cv
400.646 243.925 400.33 243.162 399.767 242.599 cv
399.205 242.036 398.441 241.72 397.646 241.72 cv
396.85 241.72 396.087 242.036 395.525 242.599 cv
394.962 243.162 394.646 243.925 394.646 244.72 cv
394.646 245.516 394.962 246.279 395.525 246.842 cv
396.087 247.404 396.85 247.72 397.646 247.72 cv
cp
f
397.646 247.72 mo
398.441 247.72 399.205 247.404 399.767 246.842 cv
400.33 246.279 400.646 245.516 400.646 244.72 cv
400.646 243.925 400.33 243.162 399.767 242.599 cv
399.205 242.036 398.441 241.72 397.646 241.72 cv
396.85 241.72 396.087 242.036 395.525 242.599 cv
394.962 243.162 394.646 243.925 394.646 244.72 cv
394.646 245.516 394.962 246.279 395.525 246.842 cv
396.087 247.404 396.85 247.72 397.646 247.72 cv
cp
@
81.4205 264.827 mo
82.2161 264.827 82.9793 264.511 83.5419 263.948 cv
84.1044 263.386 84.4205 262.623 84.4205 261.827 cv
84.4205 261.032 84.1044 260.268 83.5419 259.706 cv
82.9793 259.143 82.2161 258.827 81.4205 258.827 cv
80.6249 258.827 79.8618 259.143 79.2992 259.706 cv
78.7366 260.268 78.4205 261.032 78.4205 261.827 cv
78.4205 262.623 78.7366 263.386 79.2992 263.948 cv
79.8618 264.511 80.6249 264.827 81.4205 264.827 cv
cp
f
81.4205 264.827 mo
82.2161 264.827 82.9793 264.511 83.5419 263.948 cv
84.1044 263.386 84.4205 262.623 84.4205 261.827 cv
84.4205 261.032 84.1044 260.268 83.5419 259.706 cv
82.9793 259.143 82.2161 258.827 81.4205 258.827 cv
80.6249 258.827 79.8618 259.143 79.2992 259.706 cv
78.7366 260.268 78.4205 261.032 78.4205 261.827 cv
78.4205 262.623 78.7366 263.386 79.2992 263.948 cv
79.8618 264.511 80.6249 264.827 81.4205 264.827 cv
cp
@
129.558 116.594 mo
130.354 116.594 131.117 116.278 131.679 115.715 cv
132.242 115.153 132.558 114.39 132.558 113.594 cv
132.558 112.798 132.242 112.035 131.679 111.473 cv
131.117 110.91 130.354 110.594 129.558 110.594 cv
128.763 110.594 127.999 110.91 127.437 111.473 cv
126.874 112.035 126.558 112.798 126.558 113.594 cv
126.558 114.39 126.874 115.153 127.437 115.715 cv
127.999 116.278 128.763 116.594 129.558 116.594 cv
cp
f
129.558 116.594 mo
130.354 116.594 131.117 116.278 131.679 115.715 cv
132.242 115.153 132.558 114.39 132.558 113.594 cv
132.558 112.798 132.242 112.035 131.679 111.473 cv
131.117 110.91 130.354 110.594 129.558 110.594 cv
128.763 110.594 127.999 110.91 127.437 111.473 cv
126.874 112.035 126.558 112.798 126.558 113.594 cv
126.558 114.39 126.874 115.153 127.437 115.715 cv
127.999 116.278 128.763 116.594 129.558 116.594 cv
cp
@
135.309 366.977 mo
136.105 366.977 136.868 366.66 137.431 366.098 cv
137.993 365.535 138.309 364.772 138.309 363.977 cv
138.309 363.181 137.993 362.418 137.431 361.855 cv
136.868 361.293 136.105 360.977 135.309 360.977 cv
134.514 360.977 133.751 361.293 133.188 361.855 cv
132.626 362.418 132.309 363.181 132.309 363.977 cv
132.309 364.772 132.626 365.535 133.188 366.098 cv
133.751 366.66 134.514 366.977 135.309 366.977 cv
cp
f
135.309 366.977 mo
136.105 366.977 136.868 366.66 137.431 366.098 cv
137.993 365.535 138.309 364.772 138.309 363.977 cv
138.309 363.181 137.993 362.418 137.431 361.855 cv
136.868 361.293 136.105 360.977 135.309 360.977 cv
134.514 360.977 133.751 361.293 133.188 361.855 cv
132.626 362.418 132.309 363.181 132.309 363.977 cv
132.309 364.772 132.626 365.535 133.188 366.098 cv
133.751 366.66 134.514 366.977 135.309 366.977 cv
cp
@
238.669 311.636 mo
239.464 311.636 240.227 311.32 240.79 310.758 cv
241.352 310.195 241.669 309.432 241.669 308.636 cv
241.669 307.841 241.352 307.078 240.79 306.515 cv
240.227 305.952 239.464 305.636 238.669 305.636 cv
237.873 305.636 237.11 305.952 236.547 306.515 cv
235.985 307.078 235.669 307.841 235.669 308.636 cv
235.669 309.432 235.985 310.195 236.547 310.758 cv
237.11 311.32 237.873 311.636 238.669 311.636 cv
cp
f
238.669 311.636 mo
239.464 311.636 240.227 311.32 240.79 310.758 cv
241.352 310.195 241.669 309.432 241.669 308.636 cv
241.669 307.841 241.352 307.078 240.79 306.515 cv
240.227 305.952 239.464 305.636 238.669 305.636 cv
237.873 305.636 237.11 305.952 236.547 306.515 cv
235.985 307.078 235.669 307.841 235.669 308.636 cv
235.669 309.432 235.985 310.195 236.547 310.758 cv
237.11 311.32 237.873 311.636 238.669 311.636 cv
cp
@
464.501 375.865 mo
465.297 375.865 466.06 375.549 466.622 374.987 cv
467.185 374.424 467.501 373.661 467.501 372.865 cv
467.501 372.07 467.185 371.307 466.622 370.744 cv
466.06 370.182 465.297 369.865 464.501 369.865 cv
463.706 369.865 462.942 370.182 462.38 370.744 cv
461.817 371.307 461.501 372.07 461.501 372.865 cv
461.501 373.661 461.817 374.424 462.38 374.987 cv
462.942 375.549 463.706 375.865 464.501 375.865 cv
cp
f
464.501 375.865 mo
465.297 375.865 466.06 375.549 466.622 374.987 cv
467.185 374.424 467.501 373.661 467.501 372.865 cv
467.501 372.07 467.185 371.307 466.622 370.744 cv
466.06 370.182 465.297 369.865 464.501 369.865 cv
463.706 369.865 462.942 370.182 462.38 370.744 cv
461.817 371.307 461.501 372.07 461.501 372.865 cv
461.501 373.661 461.817 374.424 462.38 374.987 cv
462.942 375.549 463.706 375.865 464.501 375.865 cv
cp
@
283.89 77.9799 mo
284.686 77.9799 285.449 77.6638 286.012 77.1012 cv
286.574 76.5387 286.89 75.7756 286.89 74.98 cv
286.89 74.1843 286.574 73.4213 286.012 72.8586 cv
285.449 72.296 284.686 71.9799 283.89 71.9799 cv
283.095 71.9799 282.331 72.296 281.769 72.8586 cv
281.206 73.4213 280.89 74.1843 280.89 74.98 cv
280.89 75.7756 281.206 76.5387 281.769 77.1012 cv
282.331 77.6638 283.095 77.9799 283.89 77.9799 cv
f
283.89 77.9799 mo
283.89 77.48 li
284.553 77.48 285.189 77.2165 285.658 76.7477 cv
286.127 76.2789 286.39 75.6429 286.39 74.98 cv
286.39 74.317 286.127 73.6809 285.658 73.2122 cv
285.189 72.7434 284.553 72.4799 283.89 72.4799 cv
283.227 72.4799 282.591 72.7434 282.122 73.2122 cv
281.654 73.6809 281.39 74.317 281.39 74.98 cv
281.39 75.6429 281.654 76.2789 282.122 76.7477 cv
282.591 77.2165 283.227 77.48 283.89 77.48 cv
283.89 77.9799 li
283.89 78.48 li
282.962 78.48 282.072 78.1112 281.415 77.4549 cv
280.759 76.7984 280.39 75.9082 280.39 74.98 cv
280.39 74.0517 280.759 73.1614 281.415 72.5051 cv
282.072 71.8488 282.962 71.48 283.89 71.48 cv
284.818 71.48 285.709 71.8488 286.365 72.5051 cv
287.022 73.1614 287.39 74.0517 287.39 74.98 cv
287.39 75.9082 287.022 76.7984 286.365 77.4549 cv
285.709 78.1112 284.818 78.48 283.89 78.48 cv
283.89 77.9799 li
f
92.4172 227.776 mo
93.2128 227.776 93.976 227.46 94.5385 226.897 cv
95.1011 226.334 95.4172 225.571 95.4172 224.776 cv
95.4172 223.98 95.1011 223.217 94.5385 222.654 cv
93.976 222.092 93.2128 221.776 92.4172 221.776 cv
91.6216 221.776 90.8585 222.092 90.2959 222.654 cv
89.7333 223.217 89.4172 223.98 89.4172 224.776 cv
89.4172 225.571 89.7333 226.334 90.2959 226.897 cv
90.8585 227.46 91.6216 227.776 92.4172 227.776 cv
cp
f
92.4172 227.776 mo
93.2128 227.776 93.976 227.46 94.5385 226.897 cv
95.1011 226.334 95.4172 225.571 95.4172 224.776 cv
95.4172 223.98 95.1011 223.217 94.5385 222.654 cv
93.976 222.092 93.2128 221.776 92.4172 221.776 cv
91.6216 221.776 90.8585 222.092 90.2959 222.654 cv
89.7333 223.217 89.4172 223.98 89.4172 224.776 cv
89.4172 225.571 89.7333 226.334 90.2959 226.897 cv
90.8585 227.46 91.6216 227.776 92.4172 227.776 cv
cp
@
127.336 124.163 mo
128.131 124.163 128.894 123.847 129.457 123.285 cv
130.019 122.722 130.336 121.959 130.336 121.163 cv
130.336 120.368 130.019 119.605 129.457 119.042 cv
128.894 118.48 128.131 118.163 127.336 118.163 cv
126.54 118.163 125.777 118.48 125.214 119.042 cv
124.652 119.605 124.336 120.368 124.336 121.163 cv
124.336 121.959 124.652 122.722 125.214 123.285 cv
125.777 123.847 126.54 124.163 127.336 124.163 cv
cp
f
127.336 124.163 mo
128.131 124.163 128.894 123.847 129.457 123.285 cv
130.019 122.722 130.336 121.959 130.336 121.163 cv
130.336 120.368 130.019 119.605 129.457 119.042 cv
128.894 118.48 128.131 118.163 127.336 118.163 cv
126.54 118.163 125.777 118.48 125.214 119.042 cv
124.652 119.605 124.336 120.368 124.336 121.163 cv
124.336 121.959 124.652 122.722 125.214 123.285 cv
125.777 123.847 126.54 124.163 127.336 124.163 cv
cp
@
241.059 114.733 mo
241.854 114.733 242.617 114.416 243.18 113.854 cv
243.743 113.291 244.059 112.528 244.059 111.733 cv
244.059 110.937 243.743 110.174 243.18 109.611 cv
242.617 109.049 241.854 108.733 241.059 108.733 cv
240.263 108.733 239.5 109.049 238.937 109.611 cv
238.375 110.174 238.059 110.937 238.059 111.733 cv
238.059 112.528 238.375 113.291 238.937 113.854 cv
239.5 114.416 240.263 114.733 241.059 114.733 cv
cp
f
241.059 114.733 mo
241.854 114.733 242.617 114.416 243.18 113.854 cv
243.743 113.291 244.059 112.528 244.059 111.733 cv
244.059 110.937 243.743 110.174 243.18 109.611 cv
242.617 109.049 241.854 108.733 241.059 108.733 cv
240.263 108.733 239.5 109.049 238.937 109.611 cv
238.375 110.174 238.059 110.937 238.059 111.733 cv
238.059 112.528 238.375 113.291 238.937 113.854 cv
239.5 114.416 240.263 114.733 241.059 114.733 cv
cp
@
248.546 249.294 mo
249.342 249.294 250.105 248.978 250.667 248.415 cv
251.23 247.852 251.546 247.089 251.546 246.294 cv
251.546 245.498 251.23 244.735 250.667 244.172 cv
250.105 243.61 249.342 243.294 248.546 243.294 cv
247.75 243.294 246.987 243.61 246.425 244.172 cv
245.862 244.735 245.546 245.498 245.546 246.294 cv
245.546 247.089 245.862 247.852 246.425 248.415 cv
246.987 248.978 247.75 249.294 248.546 249.294 cv
cp
f
248.546 249.294 mo
249.342 249.294 250.105 248.978 250.667 248.415 cv
251.23 247.852 251.546 247.089 251.546 246.294 cv
251.546 245.498 251.23 244.735 250.667 244.172 cv
250.105 243.61 249.342 243.294 248.546 243.294 cv
247.75 243.294 246.987 243.61 246.425 244.172 cv
245.862 244.735 245.546 245.498 245.546 246.294 cv
245.546 247.089 245.862 247.852 246.425 248.415 cv
246.987 248.978 247.75 249.294 248.546 249.294 cv
cp
@
319.975 369.459 mo
320.771 369.459 321.534 369.143 322.096 368.58 cv
322.659 368.018 322.975 367.254 322.975 366.459 cv
322.975 365.663 322.659 364.9 322.096 364.337 cv
321.534 363.775 320.771 363.459 319.975 363.459 cv
319.179 363.459 318.416 363.775 317.854 364.337 cv
317.291 364.9 316.975 365.663 316.975 366.459 cv
316.975 367.254 317.291 368.018 317.854 368.58 cv
318.416 369.143 319.179 369.459 319.975 369.459 cv
cp
f
319.975 369.459 mo
320.771 369.459 321.534 369.143 322.096 368.58 cv
322.659 368.018 322.975 367.254 322.975 366.459 cv
322.975 365.663 322.659 364.9 322.096 364.337 cv
321.534 363.775 320.771 363.459 319.975 363.459 cv
319.179 363.459 318.416 363.775 317.854 364.337 cv
317.291 364.9 316.975 365.663 316.975 366.459 cv
316.975 367.254 317.291 368.018 317.854 368.58 cv
318.416 369.143 319.179 369.459 319.975 369.459 cv
cp
@
154.724 167.613 mo
155.52 167.613 156.283 167.297 156.845 166.735 cv
157.408 166.172 157.724 165.409 157.724 164.613 cv
157.724 163.818 157.408 163.055 156.845 162.492 cv
156.283 161.93 155.52 161.613 154.724 161.613 cv
153.928 161.613 153.165 161.93 152.603 162.492 cv
152.04 163.055 151.724 163.818 151.724 164.613 cv
151.724 165.409 152.04 166.172 152.603 166.735 cv
153.165 167.297 153.928 167.613 154.724 167.613 cv
cp
f
154.724 167.613 mo
155.52 167.613 156.283 167.297 156.845 166.735 cv
157.408 166.172 157.724 165.409 157.724 164.613 cv
157.724 163.818 157.408 163.055 156.845 162.492 cv
156.283 161.93 155.52 161.613 154.724 161.613 cv
153.928 161.613 153.165 161.93 152.603 162.492 cv
152.04 163.055 151.724 163.818 151.724 164.613 cv
151.724 165.409 152.04 166.172 152.603 166.735 cv
153.165 167.297 153.928 167.613 154.724 167.613 cv
cp
@
454.407 160.229 mo
455.203 160.229 455.966 159.913 456.528 159.35 cv
457.091 158.787 457.407 158.024 457.407 157.229 cv
457.407 156.433 457.091 155.67 456.528 155.107 cv
455.966 154.545 455.203 154.229 454.407 154.229 cv
453.611 154.229 452.848 154.545 452.286 155.107 cv
451.723 155.67 451.407 156.433 451.407 157.229 cv
451.407 158.024 451.723 158.787 452.286 159.35 cv
452.848 159.913 453.611 160.229 454.407 160.229 cv
cp
f
454.407 160.229 mo
455.203 160.229 455.966 159.913 456.528 159.35 cv
457.091 158.787 457.407 158.024 457.407 157.229 cv
457.407 156.433 457.091 155.67 456.528 155.107 cv
455.966 154.545 455.203 154.229 454.407 154.229 cv
453.611 154.229 452.848 154.545 452.286 155.107 cv
451.723 155.67 451.407 156.433 451.407 157.229 cv
451.407 158.024 451.723 158.787 452.286 159.35 cv
452.848 159.913 453.611 160.229 454.407 160.229 cv
cp
@
327.178 272.391 mo
327.974 272.391 328.737 272.075 329.299 271.512 cv
329.862 270.95 330.178 270.187 330.178 269.391 cv
330.178 268.595 329.862 267.832 329.299 267.27 cv
328.737 266.707 327.974 266.391 327.178 266.391 cv
326.382 266.391 325.619 266.707 325.057 267.27 cv
324.494 267.832 324.178 268.595 324.178 269.391 cv
324.178 270.187 324.494 270.95 325.057 271.512 cv
325.619 272.075 326.382 272.391 327.178 272.391 cv
cp
f
327.178 272.391 mo
327.974 272.391 328.737 272.075 329.299 271.512 cv
329.862 270.95 330.178 270.187 330.178 269.391 cv
330.178 268.595 329.862 267.832 329.299 267.27 cv
328.737 266.707 327.974 266.391 327.178 266.391 cv
326.382 266.391 325.619 266.707 325.057 267.27 cv
324.494 267.832 324.178 268.595 324.178 269.391 cv
324.178 270.187 324.494 270.95 325.057 271.512 cv
325.619 272.075 326.382 272.391 327.178 272.391 cv
cp
@
169.168 433.56 mo
169.964 433.56 170.727 433.244 171.289 432.681 cv
171.852 432.119 172.168 431.356 172.168 430.56 cv
172.168 429.764 171.852 429.001 171.289 428.439 cv
170.727 427.876 169.964 427.56 169.168 427.56 cv
168.373 427.56 167.609 427.876 167.047 428.439 cv
166.484 429.001 166.168 429.764 166.168 430.56 cv
166.168 431.356 166.484 432.119 167.047 432.681 cv
167.609 433.244 168.373 433.56 169.168 433.56 cv
cp
f
169.168 433.56 mo
169.964 433.56 170.727 433.244 171.289 432.681 cv
171.852 432.119 172.168 431.356 172.168 430.56 cv
172.168 429.764 171.852 429.001 171.289 428.439 cv
170.727 427.876 169.964 427.56 169.168 427.56 cv
168.373 427.56 167.609 427.876 167.047 428.439 cv
166.484 429.001 166.168 429.764 166.168 430.56 cv
166.168 431.356 166.484 432.119 167.047 432.681 cv
167.609 433.244 168.373 433.56 169.168 433.56 cv
cp
@
79.2245 413.201 mo
80.0201 413.201 80.7832 412.885 81.3458 412.323 cv
81.9084 411.76 82.2245 410.997 82.2245 410.201 cv
82.2245 409.406 81.9084 408.642 81.3458 408.08 cv
80.7832 407.517 80.0201 407.201 79.2245 407.201 cv
78.4289 407.201 77.6657 407.517 77.1032 408.08 cv
76.5406 408.642 76.2245 409.406 76.2245 410.201 cv
76.2245 410.997 76.5406 411.76 77.1032 412.323 cv
77.6657 412.885 78.4289 413.201 79.2245 413.201 cv
cp
f
79.2245 413.201 mo
80.0201 413.201 80.7832 412.885 81.3458 412.323 cv
81.9084 411.76 82.2245 410.997 82.2245 410.201 cv
82.2245 409.406 81.9084 408.642 81.3458 408.08 cv
80.7832 407.517 80.0201 407.201 79.2245 407.201 cv
78.4289 407.201 77.6657 407.517 77.1032 408.08 cv
76.5406 408.642 76.2245 409.406 76.2245 410.201 cv
76.2245 410.997 76.5406 411.76 77.1032 412.323 cv
77.6657 412.885 78.4289 413.201 79.2245 413.201 cv
cp
@
104.573 420.883 mo
105.369 420.883 106.132 420.567 106.695 420.005 cv
107.257 419.442 107.573 418.679 107.573 417.883 cv
107.573 417.088 107.257 416.324 106.695 415.762 cv
106.132 415.199 105.369 414.883 104.573 414.883 cv
103.778 414.883 103.015 415.199 102.452 415.762 cv
101.89 416.324 101.573 417.088 101.573 417.883 cv
101.573 418.679 101.89 419.442 102.452 420.005 cv
103.015 420.567 103.778 420.883 104.573 420.883 cv
cp
f
104.573 420.883 mo
105.369 420.883 106.132 420.567 106.695 420.005 cv
107.257 419.442 107.573 418.679 107.573 417.883 cv
107.573 417.088 107.257 416.324 106.695 415.762 cv
106.132 415.199 105.369 414.883 104.573 414.883 cv
103.778 414.883 103.015 415.199 102.452 415.762 cv
101.89 416.324 101.573 417.088 101.573 417.883 cv
101.573 418.679 101.89 419.442 102.452 420.005 cv
103.015 420.567 103.778 420.883 104.573 420.883 cv
cp
@
335.643 198.471 mo
336.438 198.471 337.201 198.155 337.764 197.592 cv
338.327 197.03 338.643 196.267 338.643 195.471 cv
338.643 194.675 338.327 193.912 337.764 193.35 cv
337.201 192.787 336.438 192.471 335.643 192.471 cv
334.847 192.471 334.084 192.787 333.521 193.35 cv
332.959 193.912 332.643 194.675 332.643 195.471 cv
332.643 196.267 332.959 197.03 333.521 197.592 cv
334.084 198.155 334.847 198.471 335.643 198.471 cv
cp
f
335.643 198.471 mo
336.438 198.471 337.201 198.155 337.764 197.592 cv
338.327 197.03 338.643 196.267 338.643 195.471 cv
338.643 194.675 338.327 193.912 337.764 193.35 cv
337.201 192.787 336.438 192.471 335.643 192.471 cv
334.847 192.471 334.084 192.787 333.521 193.35 cv
332.959 193.912 332.643 194.675 332.643 195.471 cv
332.643 196.267 332.959 197.03 333.521 197.592 cv
334.084 198.155 334.847 198.471 335.643 198.471 cv
cp
@
406.541 185.342 mo
407.336 185.342 408.099 185.026 408.662 184.464 cv
409.225 183.901 409.541 183.138 409.541 182.342 cv
409.541 181.547 409.225 180.783 408.662 180.221 cv
408.099 179.658 407.336 179.342 406.541 179.342 cv
405.745 179.342 404.982 179.658 404.419 180.221 cv
403.857 180.783 403.541 181.547 403.541 182.342 cv
403.541 183.138 403.857 183.901 404.419 184.464 cv
404.982 185.026 405.745 185.342 406.541 185.342 cv
cp
f
406.541 185.342 mo
407.336 185.342 408.099 185.026 408.662 184.464 cv
409.225 183.901 409.541 183.138 409.541 182.342 cv
409.541 181.547 409.225 180.783 408.662 180.221 cv
408.099 179.658 407.336 179.342 406.541 179.342 cv
405.745 179.342 404.982 179.658 404.419 180.221 cv
403.857 180.783 403.541 181.547 403.541 182.342 cv
403.541 183.138 403.857 183.901 404.419 184.464 cv
404.982 185.026 405.745 185.342 406.541 185.342 cv
cp
@
350.734 388.893 mo
351.53 388.893 352.293 388.577 352.856 388.014 cv
353.418 387.452 353.734 386.689 353.734 385.893 cv
353.734 385.097 353.418 384.334 352.856 383.772 cv
352.293 383.209 351.53 382.893 350.734 382.893 cv
349.939 382.893 349.176 383.209 348.613 383.772 cv
348.05 384.334 347.734 385.097 347.734 385.893 cv
347.734 386.689 348.05 387.452 348.613 388.014 cv
349.176 388.577 349.939 388.893 350.734 388.893 cv
cp
f
350.734 388.893 mo
351.53 388.893 352.293 388.577 352.856 388.014 cv
353.418 387.452 353.734 386.689 353.734 385.893 cv
353.734 385.097 353.418 384.334 352.856 383.772 cv
352.293 383.209 351.53 382.893 350.734 382.893 cv
349.939 382.893 349.176 383.209 348.613 383.772 cv
348.05 384.334 347.734 385.097 347.734 385.893 cv
347.734 386.689 348.05 387.452 348.613 388.014 cv
349.176 388.577 349.939 388.893 350.734 388.893 cv
cp
@
216.477 113.436 mo
217.272 113.436 218.035 113.12 218.598 112.557 cv
219.161 111.994 219.477 111.231 219.477 110.436 cv
219.477 109.64 219.161 108.877 218.598 108.314 cv
218.035 107.752 217.272 107.436 216.477 107.436 cv
215.681 107.436 214.918 107.752 214.355 108.314 cv
213.793 108.877 213.477 109.64 213.477 110.436 cv
213.477 111.231 213.793 111.994 214.355 112.557 cv
214.918 113.12 215.681 113.436 216.477 113.436 cv
cp
f
216.477 113.436 mo
217.272 113.436 218.035 113.12 218.598 112.557 cv
219.161 111.994 219.477 111.231 219.477 110.436 cv
219.477 109.64 219.161 108.877 218.598 108.314 cv
218.035 107.752 217.272 107.436 216.477 107.436 cv
215.681 107.436 214.918 107.752 214.355 108.314 cv
213.793 108.877 213.477 109.64 213.477 110.436 cv
213.477 111.231 213.793 111.994 214.355 112.557 cv
214.918 113.12 215.681 113.436 216.477 113.436 cv
cp
@
358.781 167.248 mo
359.577 167.248 360.34 166.932 360.903 166.369 cv
361.465 165.807 361.781 165.044 361.781 164.248 cv
361.781 163.453 361.465 162.689 360.903 162.127 cv
360.34 161.564 359.577 161.248 358.781 161.248 cv
357.986 161.248 357.222 161.564 356.66 162.127 cv
356.097 162.689 355.781 163.453 355.781 164.248 cv
355.781 165.044 356.097 165.807 356.66 166.369 cv
357.222 166.932 357.986 167.248 358.781 167.248 cv
cp
f
358.781 167.248 mo
359.577 167.248 360.34 166.932 360.903 166.369 cv
361.465 165.807 361.781 165.044 361.781 164.248 cv
361.781 163.453 361.465 162.689 360.903 162.127 cv
360.34 161.564 359.577 161.248 358.781 161.248 cv
357.986 161.248 357.222 161.564 356.66 162.127 cv
356.097 162.689 355.781 163.453 355.781 164.248 cv
355.781 165.044 356.097 165.807 356.66 166.369 cv
357.222 166.932 357.986 167.248 358.781 167.248 cv
cp
@
325.108 415.844 mo
325.903 415.844 326.666 415.528 327.229 414.965 cv
327.791 414.402 328.108 413.639 328.108 412.844 cv
328.108 412.048 327.791 411.285 327.229 410.722 cv
326.666 410.16 325.903 409.844 325.108 409.844 cv
324.312 409.844 323.549 410.16 322.986 410.722 cv
322.424 411.285 322.108 412.048 322.108 412.844 cv
322.108 413.639 322.424 414.402 322.986 414.965 cv
323.549 415.528 324.312 415.844 325.108 415.844 cv
cp
f
325.108 415.844 mo
325.903 415.844 326.666 415.528 327.229 414.965 cv
327.791 414.402 328.108 413.639 328.108 412.844 cv
328.108 412.048 327.791 411.285 327.229 410.722 cv
326.666 410.16 325.903 409.844 325.108 409.844 cv
324.312 409.844 323.549 410.16 322.986 410.722 cv
322.424 411.285 322.108 412.048 322.108 412.844 cv
322.108 413.639 322.424 414.402 322.986 414.965 cv
323.549 415.528 324.312 415.844 325.108 415.844 cv
cp
@
80.985 421.432 mo
81.7806 421.432 82.5437 421.116 83.1063 420.553 cv
83.6689 419.99 83.985 419.227 83.985 418.432 cv
83.985 417.636 83.6689 416.873 83.1063 416.31 cv
82.5437 415.748 81.7806 415.432 80.985 415.432 cv
80.1894 415.432 79.4263 415.748 78.8637 416.31 cv
78.3011 416.873 77.985 417.636 77.985 418.432 cv
77.985 419.227 78.3011 419.99 78.8637 420.553 cv
79.4263 421.116 80.1894 421.432 80.985 421.432 cv
cp
.760891 .105776 1 0 cmyk
f
80.985 421.432 mo
81.7806 421.432 82.5437 421.116 83.1063 420.553 cv
83.6689 419.99 83.985 419.227 83.985 418.432 cv
83.985 417.636 83.6689 416.873 83.1063 416.31 cv
82.5437 415.748 81.7806 415.432 80.985 415.432 cv
80.1894 415.432 79.4263 415.748 78.8637 416.31 cv
78.3011 416.873 77.985 417.636 77.985 418.432 cv
77.985 419.227 78.3011 419.99 78.8637 420.553 cv
79.4263 421.116 80.1894 421.432 80.985 421.432 cv
cp
@
233.399 354.93 mo
234.195 354.93 234.958 354.614 235.52 354.051 cv
236.083 353.489 236.399 352.726 236.399 351.93 cv
236.399 351.134 236.083 350.371 235.52 349.809 cv
234.958 349.246 234.195 348.93 233.399 348.93 cv
232.603 348.93 231.84 349.246 231.278 349.809 cv
230.715 350.371 230.399 351.134 230.399 351.93 cv
230.399 352.726 230.715 353.489 231.278 354.051 cv
231.84 354.614 232.603 354.93 233.399 354.93 cv
cp
f
233.399 354.93 mo
234.195 354.93 234.958 354.614 235.52 354.051 cv
236.083 353.489 236.399 352.726 236.399 351.93 cv
236.399 351.134 236.083 350.371 235.52 349.809 cv
234.958 349.246 234.195 348.93 233.399 348.93 cv
232.603 348.93 231.84 349.246 231.278 349.809 cv
230.715 350.371 230.399 351.134 230.399 351.93 cv
230.399 352.726 230.715 353.489 231.278 354.051 cv
231.84 354.614 232.603 354.93 233.399 354.93 cv
cp
@
374.272 293.937 mo
375.067 293.937 375.831 293.621 376.393 293.058 cv
376.956 292.496 377.272 291.732 377.272 290.937 cv
377.272 290.141 376.956 289.378 376.393 288.815 cv
375.831 288.253 375.067 287.937 374.272 287.937 cv
373.476 287.937 372.713 288.253 372.15 288.815 cv
371.588 289.378 371.272 290.141 371.272 290.937 cv
371.272 291.732 371.588 292.496 372.15 293.058 cv
372.713 293.621 373.476 293.937 374.272 293.937 cv
cp
f
374.272 293.937 mo
375.067 293.937 375.831 293.621 376.393 293.058 cv
376.956 292.496 377.272 291.732 377.272 290.937 cv
377.272 290.141 376.956 289.378 376.393 288.815 cv
375.831 288.253 375.067 287.937 374.272 287.937 cv
373.476 287.937 372.713 288.253 372.15 288.815 cv
371.588 289.378 371.272 290.141 371.272 290.937 cv
371.272 291.732 371.588 292.496 372.15 293.058 cv
372.713 293.621 373.476 293.937 374.272 293.937 cv
cp
@
198.075 427.754 mo
198.871 427.754 199.634 427.438 200.196 426.875 cv
200.759 426.313 201.075 425.55 201.075 424.754 cv
201.075 423.958 200.759 423.195 200.196 422.633 cv
199.634 422.07 198.871 421.754 198.075 421.754 cv
197.279 421.754 196.516 422.07 195.954 422.633 cv
195.391 423.195 195.075 423.958 195.075 424.754 cv
195.075 425.55 195.391 426.313 195.954 426.875 cv
196.516 427.438 197.279 427.754 198.075 427.754 cv
cp
f
198.075 427.754 mo
198.871 427.754 199.634 427.438 200.196 426.875 cv
200.759 426.313 201.075 425.55 201.075 424.754 cv
201.075 423.958 200.759 423.195 200.196 422.633 cv
199.634 422.07 198.871 421.754 198.075 421.754 cv
197.279 421.754 196.516 422.07 195.954 422.633 cv
195.391 423.195 195.075 423.958 195.075 424.754 cv
195.075 425.55 195.391 426.313 195.954 426.875 cv
196.516 427.438 197.279 427.754 198.075 427.754 cv
cp
@
336.29 373.088 mo
337.085 373.088 337.849 372.772 338.411 372.209 cv
338.974 371.647 339.29 370.884 339.29 370.088 cv
339.29 369.292 338.974 368.529 338.411 367.967 cv
337.849 367.404 337.085 367.088 336.29 367.088 cv
335.494 367.088 334.731 367.404 334.168 367.967 cv
333.606 368.529 333.29 369.292 333.29 370.088 cv
333.29 370.884 333.606 371.647 334.168 372.209 cv
334.731 372.772 335.494 373.088 336.29 373.088 cv
cp
f
336.29 373.088 mo
337.085 373.088 337.849 372.772 338.411 372.209 cv
338.974 371.647 339.29 370.884 339.29 370.088 cv
339.29 369.292 338.974 368.529 338.411 367.967 cv
337.849 367.404 337.085 367.088 336.29 367.088 cv
335.494 367.088 334.731 367.404 334.168 367.967 cv
333.606 368.529 333.29 369.292 333.29 370.088 cv
333.29 370.884 333.606 371.647 334.168 372.209 cv
334.731 372.772 335.494 373.088 336.29 373.088 cv
cp
@
74.7832 275.009 mo
75.5788 275.009 76.3419 274.693 76.9045 274.131 cv
77.4671 273.568 77.7832 272.805 77.7832 272.009 cv
77.7832 271.214 77.4671 270.451 76.9045 269.888 cv
76.3419 269.326 75.5788 269.009 74.7832 269.009 cv
73.9876 269.009 73.2244 269.326 72.6618 269.888 cv
72.0993 270.451 71.7832 271.214 71.7832 272.009 cv
71.7832 272.805 72.0993 273.568 72.6618 274.131 cv
73.2244 274.693 73.9876 275.009 74.7832 275.009 cv
cp
f
74.7832 275.009 mo
75.5788 275.009 76.3419 274.693 76.9045 274.131 cv
77.4671 273.568 77.7832 272.805 77.7832 272.009 cv
77.7832 271.214 77.4671 270.451 76.9045 269.888 cv
76.3419 269.326 75.5788 269.009 74.7832 269.009 cv
73.9876 269.009 73.2244 269.326 72.6618 269.888 cv
72.0993 270.451 71.7832 271.214 71.7832 272.009 cv
71.7832 272.805 72.0993 273.568 72.6618 274.131 cv
73.2244 274.693 73.9876 275.009 74.7832 275.009 cv
cp
@
397.629 395.239 mo
398.425 395.239 399.188 394.923 399.75 394.36 cv
400.313 393.798 400.629 393.034 400.629 392.239 cv
400.629 391.443 400.313 390.68 399.75 390.118 cv
399.188 389.555 398.425 389.239 397.629 389.239 cv
396.833 389.239 396.07 389.555 395.508 390.118 cv
394.945 390.68 394.629 391.443 394.629 392.239 cv
394.629 393.034 394.945 393.798 395.508 394.36 cv
396.07 394.923 396.833 395.239 397.629 395.239 cv
cp
f
397.629 395.239 mo
398.425 395.239 399.188 394.923 399.75 394.36 cv
400.313 393.798 400.629 393.034 400.629 392.239 cv
400.629 391.443 400.313 390.68 399.75 390.118 cv
399.188 389.555 398.425 389.239 397.629 389.239 cv
396.833 389.239 396.07 389.555 395.508 390.118 cv
394.945 390.68 394.629 391.443 394.629 392.239 cv
394.629 393.034 394.945 393.798 395.508 394.36 cv
396.07 394.923 396.833 395.239 397.629 395.239 cv
cp
@
311.588 401.989 mo
312.383 401.989 313.147 401.672 313.709 401.11 cv
314.272 400.547 314.588 399.784 314.588 398.989 cv
314.588 398.193 314.272 397.43 313.709 396.867 cv
313.147 396.305 312.383 395.989 311.588 395.989 cv
310.792 395.989 310.029 396.305 309.466 396.867 cv
308.904 397.43 308.588 398.193 308.588 398.989 cv
308.588 399.784 308.904 400.547 309.466 401.11 cv
310.029 401.672 310.792 401.989 311.588 401.989 cv
cp
f
311.588 401.989 mo
312.383 401.989 313.147 401.672 313.709 401.11 cv
314.272 400.547 314.588 399.784 314.588 398.989 cv
314.588 398.193 314.272 397.43 313.709 396.867 cv
313.147 396.305 312.383 395.989 311.588 395.989 cv
310.792 395.989 310.029 396.305 309.466 396.867 cv
308.904 397.43 308.588 398.193 308.588 398.989 cv
308.588 399.784 308.904 400.547 309.466 401.11 cv
310.029 401.672 310.792 401.989 311.588 401.989 cv
cp
@
228.937 221.925 mo
229.732 221.925 230.495 221.609 231.058 221.047 cv
231.621 220.484 231.937 219.721 231.937 218.925 cv
231.937 218.13 231.621 217.367 231.058 216.804 cv
230.495 216.242 229.732 215.925 228.937 215.925 cv
228.141 215.925 227.378 216.242 226.815 216.804 cv
226.253 217.367 225.937 218.13 225.937 218.925 cv
225.937 219.721 226.253 220.484 226.815 221.047 cv
227.378 221.609 228.141 221.925 228.937 221.925 cv
cp
f
228.937 221.925 mo
229.732 221.925 230.495 221.609 231.058 221.047 cv
231.621 220.484 231.937 219.721 231.937 218.925 cv
231.937 218.13 231.621 217.367 231.058 216.804 cv
230.495 216.242 229.732 215.925 228.937 215.925 cv
228.141 215.925 227.378 216.242 226.815 216.804 cv
226.253 217.367 225.937 218.13 225.937 218.925 cv
225.937 219.721 226.253 220.484 226.815 221.047 cv
227.378 221.609 228.141 221.925 228.937 221.925 cv
cp
@
92.8231 330.491 mo
93.6187 330.491 94.3819 330.175 94.9445 329.612 cv
95.507 329.049 95.8231 328.286 95.8231 327.491 cv
95.8231 326.695 95.507 325.932 94.9445 325.369 cv
94.3819 324.807 93.6187 324.491 92.8231 324.491 cv
92.0275 324.491 91.2644 324.807 90.7018 325.369 cv
90.1392 325.932 89.8231 326.695 89.8231 327.491 cv
89.8231 328.286 90.1392 329.049 90.7018 329.612 cv
91.2644 330.175 92.0275 330.491 92.8231 330.491 cv
cp
f
92.8231 330.491 mo
93.6187 330.491 94.3819 330.175 94.9445 329.612 cv
95.507 329.049 95.8231 328.286 95.8231 327.491 cv
95.8231 326.695 95.507 325.932 94.9445 325.369 cv
94.3819 324.807 93.6187 324.491 92.8231 324.491 cv
92.0275 324.491 91.2644 324.807 90.7018 325.369 cv
90.1392 325.932 89.8231 326.695 89.8231 327.491 cv
89.8231 328.286 90.1392 329.049 90.7018 329.612 cv
91.2644 330.175 92.0275 330.491 92.8231 330.491 cv
cp
@
215.065 360.735 mo
215.861 360.735 216.624 360.419 217.187 359.856 cv
217.749 359.293 218.065 358.53 218.065 357.735 cv
218.065 356.939 217.749 356.176 217.187 355.613 cv
216.624 355.051 215.861 354.735 215.065 354.735 cv
214.27 354.735 213.507 355.051 212.944 355.613 cv
212.382 356.176 212.065 356.939 212.065 357.735 cv
212.065 358.53 212.382 359.293 212.944 359.856 cv
213.507 360.419 214.27 360.735 215.065 360.735 cv
cp
f
215.065 360.735 mo
215.861 360.735 216.624 360.419 217.187 359.856 cv
217.749 359.293 218.065 358.53 218.065 357.735 cv
218.065 356.939 217.749 356.176 217.187 355.613 cv
216.624 355.051 215.861 354.735 215.065 354.735 cv
214.27 354.735 213.507 355.051 212.944 355.613 cv
212.382 356.176 212.065 356.939 212.065 357.735 cv
212.065 358.53 212.382 359.293 212.944 359.856 cv
213.507 360.419 214.27 360.735 215.065 360.735 cv
cp
@
472.628 361.215 mo
473.424 361.215 474.187 360.899 474.75 360.336 cv
475.312 359.774 475.628 359.011 475.628 358.215 cv
475.628 357.419 475.312 356.656 474.75 356.094 cv
474.187 355.531 473.424 355.215 472.628 355.215 cv
471.833 355.215 471.069 355.531 470.507 356.094 cv
469.944 356.656 469.628 357.419 469.628 358.215 cv
469.628 359.011 469.944 359.774 470.507 360.336 cv
471.069 360.899 471.833 361.215 472.628 361.215 cv
cp
f
472.628 361.215 mo
473.424 361.215 474.187 360.899 474.75 360.336 cv
475.312 359.774 475.628 359.011 475.628 358.215 cv
475.628 357.419 475.312 356.656 474.75 356.094 cv
474.187 355.531 473.424 355.215 472.628 355.215 cv
471.833 355.215 471.069 355.531 470.507 356.094 cv
469.944 356.656 469.628 357.419 469.628 358.215 cv
469.628 359.011 469.944 359.774 470.507 360.336 cv
471.069 360.899 471.833 361.215 472.628 361.215 cv
cp
@
183.27 180.697 mo
184.065 180.697 184.829 180.381 185.391 179.818 cv
185.954 179.256 186.27 178.492 186.27 177.697 cv
186.27 176.901 185.954 176.138 185.391 175.576 cv
184.829 175.013 184.065 174.697 183.27 174.697 cv
182.474 174.697 181.711 175.013 181.148 175.576 cv
180.586 176.138 180.27 176.901 180.27 177.697 cv
180.27 178.492 180.586 179.256 181.148 179.818 cv
181.711 180.381 182.474 180.697 183.27 180.697 cv
cp
f
183.27 180.697 mo
184.065 180.697 184.829 180.381 185.391 179.818 cv
185.954 179.256 186.27 178.492 186.27 177.697 cv
186.27 176.901 185.954 176.138 185.391 175.576 cv
184.829 175.013 184.065 174.697 183.27 174.697 cv
182.474 174.697 181.711 175.013 181.148 175.576 cv
180.586 176.138 180.27 176.901 180.27 177.697 cv
180.27 178.492 180.586 179.256 181.148 179.818 cv
181.711 180.381 182.474 180.697 183.27 180.697 cv
cp
@
95.9714 179.154 mo
96.767 179.154 97.5301 178.838 98.0927 178.275 cv
98.6553 177.713 98.9714 176.95 98.9714 176.154 cv
98.9714 175.358 98.6553 174.595 98.0927 174.033 cv
97.5301 173.47 96.767 173.154 95.9714 173.154 cv
95.1757 173.154 94.4126 173.47 93.85 174.033 cv
93.2875 174.595 92.9714 175.358 92.9714 176.154 cv
92.9714 176.95 93.2875 177.713 93.85 178.275 cv
94.4126 178.838 95.1757 179.154 95.9714 179.154 cv
cp
f
95.9714 179.154 mo
96.767 179.154 97.5301 178.838 98.0927 178.275 cv
98.6553 177.713 98.9714 176.95 98.9714 176.154 cv
98.9714 175.358 98.6553 174.595 98.0927 174.033 cv
97.5301 173.47 96.767 173.154 95.9714 173.154 cv
95.1757 173.154 94.4126 173.47 93.85 174.033 cv
93.2875 174.595 92.9714 175.358 92.9714 176.154 cv
92.9714 176.95 93.2875 177.713 93.85 178.275 cv
94.4126 178.838 95.1757 179.154 95.9714 179.154 cv
cp
@
113.391 202.829 mo
114.186 202.829 114.949 202.512 115.512 201.95 cv
116.075 201.387 116.391 200.624 116.391 199.829 cv
116.391 199.033 116.075 198.27 115.512 197.707 cv
114.949 197.145 114.186 196.829 113.391 196.829 cv
112.595 196.829 111.832 197.145 111.269 197.707 cv
110.707 198.27 110.391 199.033 110.391 199.829 cv
110.391 200.624 110.707 201.387 111.269 201.95 cv
111.832 202.512 112.595 202.829 113.391 202.829 cv
cp
f
113.391 202.829 mo
114.186 202.829 114.949 202.512 115.512 201.95 cv
116.075 201.387 116.391 200.624 116.391 199.829 cv
116.391 199.033 116.075 198.27 115.512 197.707 cv
114.949 197.145 114.186 196.829 113.391 196.829 cv
112.595 196.829 111.832 197.145 111.269 197.707 cv
110.707 198.27 110.391 199.033 110.391 199.829 cv
110.391 200.624 110.707 201.387 111.269 201.95 cv
111.832 202.512 112.595 202.829 113.391 202.829 cv
cp
@
244.361 270.873 mo
245.157 270.873 245.92 270.557 246.482 269.994 cv
247.045 269.431 247.361 268.668 247.361 267.873 cv
247.361 267.077 247.045 266.314 246.482 265.751 cv
245.92 265.189 245.157 264.873 244.361 264.873 cv
243.565 264.873 242.802 265.189 242.24 265.751 cv
241.677 266.314 241.361 267.077 241.361 267.873 cv
241.361 268.668 241.677 269.431 242.24 269.994 cv
242.802 270.557 243.565 270.873 244.361 270.873 cv
cp
f
244.361 270.873 mo
245.157 270.873 245.92 270.557 246.482 269.994 cv
247.045 269.431 247.361 268.668 247.361 267.873 cv
247.361 267.077 247.045 266.314 246.482 265.751 cv
245.92 265.189 245.157 264.873 244.361 264.873 cv
243.565 264.873 242.802 265.189 242.24 265.751 cv
241.677 266.314 241.361 267.077 241.361 267.873 cv
241.361 268.668 241.677 269.431 242.24 269.994 cv
242.802 270.557 243.565 270.873 244.361 270.873 cv
cp
@
114.903 271.418 mo
115.699 271.418 116.462 271.102 117.025 270.539 cv
117.587 269.977 117.903 269.214 117.903 268.418 cv
117.903 267.622 117.587 266.859 117.025 266.297 cv
116.462 265.734 115.699 265.418 114.903 265.418 cv
114.108 265.418 113.345 265.734 112.782 266.297 cv
112.219 266.859 111.903 267.622 111.903 268.418 cv
111.903 269.214 112.219 269.977 112.782 270.539 cv
113.345 271.102 114.108 271.418 114.903 271.418 cv
cp
f
114.903 271.418 mo
115.699 271.418 116.462 271.102 117.025 270.539 cv
117.587 269.977 117.903 269.214 117.903 268.418 cv
117.903 267.622 117.587 266.859 117.025 266.297 cv
116.462 265.734 115.699 265.418 114.903 265.418 cv
114.108 265.418 113.345 265.734 112.782 266.297 cv
112.219 266.859 111.903 267.622 111.903 268.418 cv
111.903 269.214 112.219 269.977 112.782 270.539 cv
113.345 271.102 114.108 271.418 114.903 271.418 cv
cp
@
250.908 327.503 mo
251.704 327.503 252.467 327.187 253.03 326.625 cv
253.592 326.062 253.908 325.299 253.908 324.503 cv
253.908 323.708 253.592 322.945 253.03 322.382 cv
252.467 321.819 251.704 321.503 250.908 321.503 cv
250.113 321.503 249.35 321.819 248.787 322.382 cv
248.224 322.945 247.908 323.708 247.908 324.503 cv
247.908 325.299 248.224 326.062 248.787 326.625 cv
249.35 327.187 250.113 327.503 250.908 327.503 cv
cp
f
250.908 327.503 mo
251.704 327.503 252.467 327.187 253.03 326.625 cv
253.592 326.062 253.908 325.299 253.908 324.503 cv
253.908 323.708 253.592 322.945 253.03 322.382 cv
252.467 321.819 251.704 321.503 250.908 321.503 cv
250.113 321.503 249.35 321.819 248.787 322.382 cv
248.224 322.945 247.908 323.708 247.908 324.503 cv
247.908 325.299 248.224 326.062 248.787 326.625 cv
249.35 327.187 250.113 327.503 250.908 327.503 cv
cp
@
299.09 415.336 mo
299.885 415.336 300.649 415.02 301.211 414.458 cv
301.774 413.895 302.09 413.132 302.09 412.336 cv
302.09 411.541 301.774 410.777 301.211 410.215 cv
300.649 409.652 299.885 409.336 299.09 409.336 cv
298.294 409.336 297.531 409.652 296.969 410.215 cv
296.406 410.777 296.09 411.541 296.09 412.336 cv
296.09 413.132 296.406 413.895 296.969 414.458 cv
297.531 415.02 298.294 415.336 299.09 415.336 cv
cp
f
299.09 415.336 mo
299.885 415.336 300.649 415.02 301.211 414.458 cv
301.774 413.895 302.09 413.132 302.09 412.336 cv
302.09 411.541 301.774 410.777 301.211 410.215 cv
300.649 409.652 299.885 409.336 299.09 409.336 cv
298.294 409.336 297.531 409.652 296.969 410.215 cv
296.406 410.777 296.09 411.541 296.09 412.336 cv
296.09 413.132 296.406 413.895 296.969 414.458 cv
297.531 415.02 298.294 415.336 299.09 415.336 cv
cp
@
355.123 421.597 mo
355.919 421.597 356.682 421.281 357.245 420.718 cv
357.807 420.155 358.123 419.392 358.123 418.597 cv
358.123 417.801 357.807 417.038 357.245 416.475 cv
356.682 415.913 355.919 415.597 355.123 415.597 cv
354.328 415.597 353.565 415.913 353.002 416.475 cv
352.44 417.038 352.123 417.801 352.123 418.597 cv
352.123 419.392 352.44 420.155 353.002 420.718 cv
353.565 421.281 354.328 421.597 355.123 421.597 cv
cp
f
355.123 421.597 mo
355.919 421.597 356.682 421.281 357.245 420.718 cv
357.807 420.155 358.123 419.392 358.123 418.597 cv
358.123 417.801 357.807 417.038 357.245 416.475 cv
356.682 415.913 355.919 415.597 355.123 415.597 cv
354.328 415.597 353.565 415.913 353.002 416.475 cv
352.44 417.038 352.123 417.801 352.123 418.597 cv
352.123 419.392 352.44 420.155 353.002 420.718 cv
353.565 421.281 354.328 421.597 355.123 421.597 cv
cp
@
175.42 209.038 mo
176.216 209.038 176.979 208.722 177.542 208.159 cv
178.104 207.597 178.42 206.833 178.42 206.038 cv
178.42 205.242 178.104 204.479 177.542 203.916 cv
176.979 203.354 176.216 203.038 175.42 203.038 cv
174.625 203.038 173.862 203.354 173.299 203.916 cv
172.736 204.479 172.42 205.242 172.42 206.038 cv
172.42 206.833 172.736 207.597 173.299 208.159 cv
173.862 208.722 174.625 209.038 175.42 209.038 cv
cp
f
175.42 209.038 mo
176.216 209.038 176.979 208.722 177.542 208.159 cv
178.104 207.597 178.42 206.833 178.42 206.038 cv
178.42 205.242 178.104 204.479 177.542 203.916 cv
176.979 203.354 176.216 203.038 175.42 203.038 cv
174.625 203.038 173.862 203.354 173.299 203.916 cv
172.736 204.479 172.42 205.242 172.42 206.038 cv
172.42 206.833 172.736 207.597 173.299 208.159 cv
173.862 208.722 174.625 209.038 175.42 209.038 cv
cp
@
215.257 406.854 mo
216.052 406.854 216.815 406.538 217.378 405.975 cv
217.94 405.413 218.257 404.65 218.257 403.854 cv
218.257 403.058 217.94 402.295 217.378 401.733 cv
216.815 401.17 216.052 400.854 215.257 400.854 cv
214.461 400.854 213.698 401.17 213.135 401.733 cv
212.573 402.295 212.257 403.058 212.257 403.854 cv
212.257 404.65 212.573 405.413 213.135 405.975 cv
213.698 406.538 214.461 406.854 215.257 406.854 cv
cp
f
215.257 406.854 mo
216.052 406.854 216.815 406.538 217.378 405.975 cv
217.94 405.413 218.257 404.65 218.257 403.854 cv
218.257 403.058 217.94 402.295 217.378 401.733 cv
216.815 401.17 216.052 400.854 215.257 400.854 cv
214.461 400.854 213.698 401.17 213.135 401.733 cv
212.573 402.295 212.257 403.058 212.257 403.854 cv
212.257 404.65 212.573 405.413 213.135 405.975 cv
213.698 406.538 214.461 406.854 215.257 406.854 cv
cp
@
125.752 148.157 mo
126.548 148.157 127.311 147.841 127.873 147.279 cv
128.436 146.716 128.752 145.953 128.752 145.157 cv
128.752 144.362 128.436 143.599 127.873 143.036 cv
127.311 142.473 126.548 142.157 125.752 142.157 cv
124.956 142.157 124.193 142.473 123.631 143.036 cv
123.068 143.599 122.752 144.362 122.752 145.157 cv
122.752 145.953 123.068 146.716 123.631 147.279 cv
124.193 147.841 124.956 148.157 125.752 148.157 cv
cp
f
125.752 148.157 mo
126.548 148.157 127.311 147.841 127.873 147.279 cv
128.436 146.716 128.752 145.953 128.752 145.157 cv
128.752 144.362 128.436 143.599 127.873 143.036 cv
127.311 142.473 126.548 142.157 125.752 142.157 cv
124.956 142.157 124.193 142.473 123.631 143.036 cv
123.068 143.599 122.752 144.362 122.752 145.157 cv
122.752 145.953 123.068 146.716 123.631 147.279 cv
124.193 147.841 124.956 148.157 125.752 148.157 cv
cp
@
81.19 143.601 mo
81.9856 143.601 82.7487 143.285 83.3113 142.722 cv
83.8739 142.16 84.19 141.397 84.19 140.601 cv
84.19 139.805 83.8739 139.042 83.3113 138.48 cv
82.7487 137.917 81.9856 137.601 81.19 137.601 cv
80.3944 137.601 79.6313 137.917 79.0687 138.48 cv
78.5061 139.042 78.19 139.805 78.19 140.601 cv
78.19 141.397 78.5061 142.16 79.0687 142.722 cv
79.6313 143.285 80.3944 143.601 81.19 143.601 cv
cp
f
81.19 143.601 mo
81.9856 143.601 82.7487 143.285 83.3113 142.722 cv
83.8739 142.16 84.19 141.397 84.19 140.601 cv
84.19 139.805 83.8739 139.042 83.3113 138.48 cv
82.7487 137.917 81.9856 137.601 81.19 137.601 cv
80.3944 137.601 79.6313 137.917 79.0687 138.48 cv
78.5061 139.042 78.19 139.805 78.19 140.601 cv
78.19 141.397 78.5061 142.16 79.0687 142.722 cv
79.6313 143.285 80.3944 143.601 81.19 143.601 cv
cp
@
124.605 157.449 mo
125.401 157.449 126.164 157.133 126.726 156.57 cv
127.289 156.007 127.605 155.244 127.605 154.449 cv
127.605 153.653 127.289 152.89 126.726 152.327 cv
126.164 151.765 125.401 151.449 124.605 151.449 cv
123.81 151.449 123.046 151.765 122.484 152.327 cv
121.921 152.89 121.605 153.653 121.605 154.449 cv
121.605 155.244 121.921 156.007 122.484 156.57 cv
123.046 157.133 123.81 157.449 124.605 157.449 cv
cp
f
124.605 157.449 mo
125.401 157.449 126.164 157.133 126.726 156.57 cv
127.289 156.007 127.605 155.244 127.605 154.449 cv
127.605 153.653 127.289 152.89 126.726 152.327 cv
126.164 151.765 125.401 151.449 124.605 151.449 cv
123.81 151.449 123.046 151.765 122.484 152.327 cv
121.921 152.89 121.605 153.653 121.605 154.449 cv
121.605 155.244 121.921 156.007 122.484 156.57 cv
123.046 157.133 123.81 157.449 124.605 157.449 cv
cp
@
447.262 373.87 mo
448.058 373.87 448.821 373.554 449.383 372.991 cv
449.946 372.429 450.262 371.666 450.262 370.87 cv
450.262 370.074 449.946 369.311 449.383 368.749 cv
448.821 368.186 448.058 367.87 447.262 367.87 cv
446.467 367.87 445.703 368.186 445.141 368.749 cv
444.578 369.311 444.262 370.074 444.262 370.87 cv
444.262 371.666 444.578 372.429 445.141 372.991 cv
445.703 373.554 446.467 373.87 447.262 373.87 cv
cp
f
447.262 373.87 mo
448.058 373.87 448.821 373.554 449.383 372.991 cv
449.946 372.429 450.262 371.666 450.262 370.87 cv
450.262 370.074 449.946 369.311 449.383 368.749 cv
448.821 368.186 448.058 367.87 447.262 367.87 cv
446.467 367.87 445.703 368.186 445.141 368.749 cv
444.578 369.311 444.262 370.074 444.262 370.87 cv
444.262 371.666 444.578 372.429 445.141 372.991 cv
445.703 373.554 446.467 373.87 447.262 373.87 cv
cp
@
218.663 229.693 mo
219.458 229.693 220.222 229.377 220.784 228.815 cv
221.347 228.252 221.663 227.489 221.663 226.693 cv
221.663 225.898 221.347 225.135 220.784 224.572 cv
220.222 224.01 219.458 223.693 218.663 223.693 cv
217.867 223.693 217.104 224.01 216.541 224.572 cv
215.979 225.135 215.663 225.898 215.663 226.693 cv
215.663 227.489 215.979 228.252 216.541 228.815 cv
217.104 229.377 217.867 229.693 218.663 229.693 cv
cp
f
218.663 229.693 mo
219.458 229.693 220.222 229.377 220.784 228.815 cv
221.347 228.252 221.663 227.489 221.663 226.693 cv
221.663 225.898 221.347 225.135 220.784 224.572 cv
220.222 224.01 219.458 223.693 218.663 223.693 cv
217.867 223.693 217.104 224.01 216.541 224.572 cv
215.979 225.135 215.663 225.898 215.663 226.693 cv
215.663 227.489 215.979 228.252 216.541 228.815 cv
217.104 229.377 217.867 229.693 218.663 229.693 cv
cp
@
127.348 314.471 mo
128.143 314.471 128.906 314.155 129.469 313.592 cv
130.032 313.03 130.348 312.266 130.348 311.471 cv
130.348 310.675 130.032 309.912 129.469 309.35 cv
128.906 308.787 128.143 308.471 127.348 308.471 cv
126.552 308.471 125.789 308.787 125.226 309.35 cv
124.664 309.912 124.348 310.675 124.348 311.471 cv
124.348 312.266 124.664 313.03 125.226 313.592 cv
125.789 314.155 126.552 314.471 127.348 314.471 cv
cp
f
127.348 314.471 mo
128.143 314.471 128.906 314.155 129.469 313.592 cv
130.032 313.03 130.348 312.266 130.348 311.471 cv
130.348 310.675 130.032 309.912 129.469 309.35 cv
128.906 308.787 128.143 308.471 127.348 308.471 cv
126.552 308.471 125.789 308.787 125.226 309.35 cv
124.664 309.912 124.348 310.675 124.348 311.471 cv
124.348 312.266 124.664 313.03 125.226 313.592 cv
125.789 314.155 126.552 314.471 127.348 314.471 cv
cp
@
81.5808 421.458 mo
82.3764 421.458 83.1395 421.142 83.7021 420.579 cv
84.2647 420.017 84.5808 419.254 84.5808 418.458 cv
84.5808 417.662 84.2647 416.899 83.7021 416.337 cv
83.1395 415.774 82.3764 415.458 81.5808 415.458 cv
80.7852 415.458 80.0221 415.774 79.4595 416.337 cv
78.8969 416.899 78.5808 417.662 78.5808 418.458 cv
78.5808 419.254 78.8969 420.017 79.4595 420.579 cv
80.0221 421.142 80.7852 421.458 81.5808 421.458 cv
cp
f
81.5808 421.458 mo
82.3764 421.458 83.1395 421.142 83.7021 420.579 cv
84.2647 420.017 84.5808 419.254 84.5808 418.458 cv
84.5808 417.662 84.2647 416.899 83.7021 416.337 cv
83.1395 415.774 82.3764 415.458 81.5808 415.458 cv
80.7852 415.458 80.0221 415.774 79.4595 416.337 cv
78.8969 416.899 78.5808 417.662 78.5808 418.458 cv
78.5808 419.254 78.8969 420.017 79.4595 420.579 cv
80.0221 421.142 80.7852 421.458 81.5808 421.458 cv
cp
@
416.716 356.506 mo
417.512 356.506 418.275 356.19 418.838 355.628 cv
419.4 355.065 419.716 354.302 419.716 353.506 cv
419.716 352.711 419.4 351.948 418.838 351.385 cv
418.275 350.822 417.512 350.506 416.716 350.506 cv
415.921 350.506 415.158 350.822 414.595 351.385 cv
414.032 351.948 413.716 352.711 413.716 353.506 cv
413.716 354.302 414.032 355.065 414.595 355.628 cv
415.158 356.19 415.921 356.506 416.716 356.506 cv
cp
f
416.716 356.506 mo
417.512 356.506 418.275 356.19 418.838 355.628 cv
419.4 355.065 419.716 354.302 419.716 353.506 cv
419.716 352.711 419.4 351.948 418.838 351.385 cv
418.275 350.822 417.512 350.506 416.716 350.506 cv
415.921 350.506 415.158 350.822 414.595 351.385 cv
414.032 351.948 413.716 352.711 413.716 353.506 cv
413.716 354.302 414.032 355.065 414.595 355.628 cv
415.158 356.19 415.921 356.506 416.716 356.506 cv
cp
@
255.011 286.68 mo
255.806 286.68 256.569 286.364 257.132 285.802 cv
257.694 285.239 258.011 284.476 258.011 283.68 cv
258.011 282.885 257.694 282.122 257.132 281.559 cv
256.569 280.997 255.806 280.68 255.011 280.68 cv
254.215 280.68 253.452 280.997 252.889 281.559 cv
252.327 282.122 252.011 282.885 252.011 283.68 cv
252.011 284.476 252.327 285.239 252.889 285.802 cv
253.452 286.364 254.215 286.68 255.011 286.68 cv
cp
f
255.011 286.68 mo
255.806 286.68 256.569 286.364 257.132 285.802 cv
257.694 285.239 258.011 284.476 258.011 283.68 cv
258.011 282.885 257.694 282.122 257.132 281.559 cv
256.569 280.997 255.806 280.68 255.011 280.68 cv
254.215 280.68 253.452 280.997 252.889 281.559 cv
252.327 282.122 252.011 282.885 252.011 283.68 cv
252.011 284.476 252.327 285.239 252.889 285.802 cv
253.452 286.364 254.215 286.68 255.011 286.68 cv
cp
@
72.9232 227.097 mo
73.7188 227.097 74.4819 226.781 75.0445 226.218 cv
75.6071 225.656 75.9232 224.893 75.9232 224.097 cv
75.9232 223.302 75.6071 222.538 75.0445 221.976 cv
74.4819 221.413 73.7188 221.097 72.9232 221.097 cv
72.1276 221.097 71.3644 221.413 70.8019 221.976 cv
70.2393 222.538 69.9232 223.302 69.9232 224.097 cv
69.9232 224.893 70.2393 225.656 70.8019 226.218 cv
71.3644 226.781 72.1276 227.097 72.9232 227.097 cv
cp
f
72.9232 227.097 mo
73.7188 227.097 74.4819 226.781 75.0445 226.218 cv
75.6071 225.656 75.9232 224.893 75.9232 224.097 cv
75.9232 223.302 75.6071 222.538 75.0445 221.976 cv
74.4819 221.413 73.7188 221.097 72.9232 221.097 cv
72.1276 221.097 71.3644 221.413 70.8019 221.976 cv
70.2393 222.538 69.9232 223.302 69.9232 224.097 cv
69.9232 224.893 70.2393 225.656 70.8019 226.218 cv
71.3644 226.781 72.1276 227.097 72.9232 227.097 cv
cp
@
166.283 411.359 mo
167.079 411.359 167.842 411.043 168.405 410.481 cv
168.967 409.918 169.283 409.155 169.283 408.359 cv
169.283 407.564 168.967 406.801 168.405 406.238 cv
167.842 405.675 167.079 405.359 166.283 405.359 cv
165.488 405.359 164.725 405.675 164.162 406.238 cv
163.6 406.801 163.283 407.564 163.283 408.359 cv
163.283 409.155 163.6 409.918 164.162 410.481 cv
164.725 411.043 165.488 411.359 166.283 411.359 cv
cp
f
166.283 411.359 mo
167.079 411.359 167.842 411.043 168.405 410.481 cv
168.967 409.918 169.283 409.155 169.283 408.359 cv
169.283 407.564 168.967 406.801 168.405 406.238 cv
167.842 405.675 167.079 405.359 166.283 405.359 cv
165.488 405.359 164.725 405.675 164.162 406.238 cv
163.6 406.801 163.283 407.564 163.283 408.359 cv
163.283 409.155 163.6 409.918 164.162 410.481 cv
164.725 411.043 165.488 411.359 166.283 411.359 cv
cp
@
196.6 190.663 mo
197.395 190.663 198.159 190.347 198.721 189.784 cv
199.284 189.222 199.6 188.459 199.6 187.663 cv
199.6 186.867 199.284 186.104 198.721 185.542 cv
198.159 184.979 197.395 184.663 196.6 184.663 cv
195.804 184.663 195.041 184.979 194.479 185.542 cv
193.916 186.104 193.6 186.867 193.6 187.663 cv
193.6 188.459 193.916 189.222 194.479 189.784 cv
195.041 190.347 195.804 190.663 196.6 190.663 cv
cp
f
196.6 190.663 mo
197.395 190.663 198.159 190.347 198.721 189.784 cv
199.284 189.222 199.6 188.459 199.6 187.663 cv
199.6 186.867 199.284 186.104 198.721 185.542 cv
198.159 184.979 197.395 184.663 196.6 184.663 cv
195.804 184.663 195.041 184.979 194.479 185.542 cv
193.916 186.104 193.6 186.867 193.6 187.663 cv
193.6 188.459 193.916 189.222 194.479 189.784 cv
195.041 190.347 195.804 190.663 196.6 190.663 cv
cp
@
115.067 425.433 mo
115.863 425.433 116.626 425.117 117.189 424.555 cv
117.751 423.992 118.067 423.229 118.067 422.433 cv
118.067 421.638 117.751 420.875 117.189 420.312 cv
116.626 419.749 115.863 419.433 115.067 419.433 cv
114.272 419.433 113.508 419.749 112.946 420.312 cv
112.383 420.875 112.067 421.638 112.067 422.433 cv
112.067 423.229 112.383 423.992 112.946 424.555 cv
113.508 425.117 114.272 425.433 115.067 425.433 cv
cp
f
115.067 425.433 mo
115.863 425.433 116.626 425.117 117.189 424.555 cv
117.751 423.992 118.067 423.229 118.067 422.433 cv
118.067 421.638 117.751 420.875 117.189 420.312 cv
116.626 419.749 115.863 419.433 115.067 419.433 cv
114.272 419.433 113.508 419.749 112.946 420.312 cv
112.383 420.875 112.067 421.638 112.067 422.433 cv
112.067 423.229 112.383 423.992 112.946 424.555 cv
113.508 425.117 114.272 425.433 115.067 425.433 cv
cp
@
309.935 364.989 mo
310.731 364.989 311.494 364.673 312.056 364.11 cv
312.619 363.547 312.935 362.784 312.935 361.989 cv
312.935 361.193 312.619 360.43 312.056 359.867 cv
311.494 359.305 310.731 358.989 309.935 358.989 cv
309.14 358.989 308.376 359.305 307.814 359.867 cv
307.251 360.43 306.935 361.193 306.935 361.989 cv
306.935 362.784 307.251 363.547 307.814 364.11 cv
308.376 364.673 309.14 364.989 309.935 364.989 cv
cp
f
309.935 364.989 mo
310.731 364.989 311.494 364.673 312.056 364.11 cv
312.619 363.547 312.935 362.784 312.935 361.989 cv
312.935 361.193 312.619 360.43 312.056 359.867 cv
311.494 359.305 310.731 358.989 309.935 358.989 cv
309.14 358.989 308.376 359.305 307.814 359.867 cv
307.251 360.43 306.935 361.193 306.935 361.989 cv
306.935 362.784 307.251 363.547 307.814 364.11 cv
308.376 364.673 309.14 364.989 309.935 364.989 cv
cp
@
329.543 334.193 mo
330.339 334.193 331.102 333.877 331.664 333.314 cv
332.227 332.752 332.543 331.989 332.543 331.193 cv
332.543 330.397 332.227 329.634 331.664 329.072 cv
331.102 328.509 330.339 328.193 329.543 328.193 cv
328.747 328.193 327.984 328.509 327.422 329.072 cv
326.859 329.634 326.543 330.397 326.543 331.193 cv
326.543 331.989 326.859 332.752 327.422 333.314 cv
327.984 333.877 328.747 334.193 329.543 334.193 cv
cp
f
329.543 334.193 mo
330.339 334.193 331.102 333.877 331.664 333.314 cv
332.227 332.752 332.543 331.989 332.543 331.193 cv
332.543 330.397 332.227 329.634 331.664 329.072 cv
331.102 328.509 330.339 328.193 329.543 328.193 cv
328.747 328.193 327.984 328.509 327.422 329.072 cv
326.859 329.634 326.543 330.397 326.543 331.193 cv
326.543 331.989 326.859 332.752 327.422 333.314 cv
327.984 333.877 328.747 334.193 329.543 334.193 cv
cp
@
413.791 432.148 mo
414.586 432.148 415.35 431.832 415.912 431.269 cv
416.475 430.706 416.791 429.943 416.791 429.148 cv
416.791 428.352 416.475 427.589 415.912 427.026 cv
415.35 426.464 414.586 426.148 413.791 426.148 cv
412.995 426.148 412.232 426.464 411.669 427.026 cv
411.107 427.589 410.791 428.352 410.791 429.148 cv
410.791 429.943 411.107 430.706 411.669 431.269 cv
412.232 431.832 412.995 432.148 413.791 432.148 cv
cp
f
413.791 432.148 mo
414.586 432.148 415.35 431.832 415.912 431.269 cv
416.475 430.706 416.791 429.943 416.791 429.148 cv
416.791 428.352 416.475 427.589 415.912 427.026 cv
415.35 426.464 414.586 426.148 413.791 426.148 cv
412.995 426.148 412.232 426.464 411.669 427.026 cv
411.107 427.589 410.791 428.352 410.791 429.148 cv
410.791 429.943 411.107 430.706 411.669 431.269 cv
412.232 431.832 412.995 432.148 413.791 432.148 cv
cp
@
328.522 385.935 mo
329.318 385.935 330.081 385.619 330.643 385.057 cv
331.206 384.494 331.522 383.731 331.522 382.935 cv
331.522 382.14 331.206 381.377 330.643 380.814 cv
330.081 380.252 329.318 379.935 328.522 379.935 cv
327.727 379.935 326.963 380.252 326.401 380.814 cv
325.838 381.377 325.522 382.14 325.522 382.935 cv
325.522 383.731 325.838 384.494 326.401 385.057 cv
326.963 385.619 327.727 385.935 328.522 385.935 cv
cp
f
328.522 385.935 mo
329.318 385.935 330.081 385.619 330.643 385.057 cv
331.206 384.494 331.522 383.731 331.522 382.935 cv
331.522 382.14 331.206 381.377 330.643 380.814 cv
330.081 380.252 329.318 379.935 328.522 379.935 cv
327.727 379.935 326.963 380.252 326.401 380.814 cv
325.838 381.377 325.522 382.14 325.522 382.935 cv
325.522 383.731 325.838 384.494 326.401 385.057 cv
326.963 385.619 327.727 385.935 328.522 385.935 cv
cp
@
81.4205 264.827 mo
82.2161 264.827 82.9792 264.511 83.5418 263.948 cv
84.1044 263.386 84.4205 262.623 84.4205 261.827 cv
84.4205 261.031 84.1044 260.268 83.5418 259.706 cv
82.9792 259.143 82.2161 258.827 81.4205 258.827 cv
80.6249 258.827 79.8618 259.143 79.2992 259.706 cv
78.7366 260.268 78.4205 261.031 78.4205 261.827 cv
78.4205 262.623 78.7366 263.386 79.2992 263.948 cv
79.8618 264.511 80.6249 264.827 81.4205 264.827 cv
cp
f
81.4205 264.827 mo
82.2161 264.827 82.9792 264.511 83.5418 263.948 cv
84.1044 263.386 84.4205 262.623 84.4205 261.827 cv
84.4205 261.031 84.1044 260.268 83.5418 259.706 cv
82.9792 259.143 82.2161 258.827 81.4205 258.827 cv
80.6249 258.827 79.8618 259.143 79.2992 259.706 cv
78.7366 260.268 78.4205 261.031 78.4205 261.827 cv
78.4205 262.623 78.7366 263.386 79.2992 263.948 cv
79.8618 264.511 80.6249 264.827 81.4205 264.827 cv
cp
@
135.309 366.976 mo
136.105 366.976 136.868 366.66 137.431 366.098 cv
137.993 365.535 138.309 364.772 138.309 363.976 cv
138.309 363.181 137.993 362.418 137.431 361.855 cv
136.868 361.293 136.105 360.976 135.309 360.976 cv
134.514 360.976 133.751 361.293 133.188 361.855 cv
132.625 362.418 132.309 363.181 132.309 363.976 cv
132.309 364.772 132.625 365.535 133.188 366.098 cv
133.751 366.66 134.514 366.976 135.309 366.976 cv
cp
f
135.309 366.976 mo
136.105 366.976 136.868 366.66 137.431 366.098 cv
137.993 365.535 138.309 364.772 138.309 363.976 cv
138.309 363.181 137.993 362.418 137.431 361.855 cv
136.868 361.293 136.105 360.976 135.309 360.976 cv
134.514 360.976 133.751 361.293 133.188 361.855 cv
132.625 362.418 132.309 363.181 132.309 363.976 cv
132.309 364.772 132.625 365.535 133.188 366.098 cv
133.751 366.66 134.514 366.976 135.309 366.976 cv
cp
@
238.668 311.636 mo
239.464 311.636 240.227 311.32 240.79 310.758 cv
241.352 310.195 241.668 309.432 241.668 308.636 cv
241.668 307.841 241.352 307.078 240.79 306.515 cv
240.227 305.952 239.464 305.636 238.668 305.636 cv
237.873 305.636 237.11 305.952 236.547 306.515 cv
235.985 307.078 235.668 307.841 235.668 308.636 cv
235.668 309.432 235.985 310.195 236.547 310.758 cv
237.11 311.32 237.873 311.636 238.668 311.636 cv
cp
f
238.668 311.636 mo
239.464 311.636 240.227 311.32 240.79 310.758 cv
241.352 310.195 241.668 309.432 241.668 308.636 cv
241.668 307.841 241.352 307.078 240.79 306.515 cv
240.227 305.952 239.464 305.636 238.668 305.636 cv
237.873 305.636 237.11 305.952 236.547 306.515 cv
235.985 307.078 235.668 307.841 235.668 308.636 cv
235.668 309.432 235.985 310.195 236.547 310.758 cv
237.11 311.32 237.873 311.636 238.668 311.636 cv
cp
@
464.501 375.865 mo
465.297 375.865 466.06 375.549 466.622 374.987 cv
467.185 374.424 467.501 373.661 467.501 372.865 cv
467.501 372.07 467.185 371.307 466.622 370.744 cv
466.06 370.182 465.297 369.865 464.501 369.865 cv
463.706 369.865 462.942 370.182 462.38 370.744 cv
461.817 371.307 461.501 372.07 461.501 372.865 cv
461.501 373.661 461.817 374.424 462.38 374.987 cv
462.942 375.549 463.706 375.865 464.501 375.865 cv
cp
f
464.501 375.865 mo
465.297 375.865 466.06 375.549 466.622 374.987 cv
467.185 374.424 467.501 373.661 467.501 372.865 cv
467.501 372.07 467.185 371.307 466.622 370.744 cv
466.06 370.182 465.297 369.865 464.501 369.865 cv
463.706 369.865 462.942 370.182 462.38 370.744 cv
461.817 371.307 461.501 372.07 461.501 372.865 cv
461.501 373.661 461.817 374.424 462.38 374.987 cv
462.942 375.549 463.706 375.865 464.501 375.865 cv
cp
@
92.4172 227.776 mo
93.2128 227.776 93.9759 227.46 94.5385 226.897 cv
95.1011 226.334 95.4172 225.571 95.4172 224.776 cv
95.4172 223.98 95.1011 223.217 94.5385 222.654 cv
93.9759 222.092 93.2128 221.776 92.4172 221.776 cv
91.6216 221.776 90.8584 222.092 90.2959 222.654 cv
89.7333 223.217 89.4172 223.98 89.4172 224.776 cv
89.4172 225.571 89.7333 226.334 90.2959 226.897 cv
90.8584 227.46 91.6216 227.776 92.4172 227.776 cv
cp
f
92.4172 227.776 mo
93.2128 227.776 93.9759 227.46 94.5385 226.897 cv
95.1011 226.334 95.4172 225.571 95.4172 224.776 cv
95.4172 223.98 95.1011 223.217 94.5385 222.654 cv
93.9759 222.092 93.2128 221.776 92.4172 221.776 cv
91.6216 221.776 90.8584 222.092 90.2959 222.654 cv
89.7333 223.217 89.4172 223.98 89.4172 224.776 cv
89.4172 225.571 89.7333 226.334 90.2959 226.897 cv
90.8584 227.46 91.6216 227.776 92.4172 227.776 cv
cp
@
248.546 249.294 mo
249.342 249.294 250.105 248.977 250.667 248.415 cv
251.23 247.852 251.546 247.089 251.546 246.294 cv
251.546 245.498 251.23 244.735 250.667 244.172 cv
250.105 243.61 249.342 243.294 248.546 243.294 cv
247.75 243.294 246.987 243.61 246.425 244.172 cv
245.862 244.735 245.546 245.498 245.546 246.294 cv
245.546 247.089 245.862 247.852 246.425 248.415 cv
246.987 248.977 247.75 249.294 248.546 249.294 cv
cp
f
248.546 249.294 mo
249.342 249.294 250.105 248.977 250.667 248.415 cv
251.23 247.852 251.546 247.089 251.546 246.294 cv
251.546 245.498 251.23 244.735 250.667 244.172 cv
250.105 243.61 249.342 243.294 248.546 243.294 cv
247.75 243.294 246.987 243.61 246.425 244.172 cv
245.862 244.735 245.546 245.498 245.546 246.294 cv
245.546 247.089 245.862 247.852 246.425 248.415 cv
246.987 248.977 247.75 249.294 248.546 249.294 cv
cp
@
319.975 369.459 mo
320.771 369.459 321.534 369.143 322.096 368.58 cv
322.659 368.017 322.975 367.254 322.975 366.459 cv
322.975 365.663 322.659 364.9 322.096 364.337 cv
321.534 363.775 320.771 363.459 319.975 363.459 cv
319.179 363.459 318.416 363.775 317.854 364.337 cv
317.291 364.9 316.975 365.663 316.975 366.459 cv
316.975 367.254 317.291 368.017 317.854 368.58 cv
318.416 369.143 319.179 369.459 319.975 369.459 cv
cp
f
319.975 369.459 mo
320.771 369.459 321.534 369.143 322.096 368.58 cv
322.659 368.017 322.975 367.254 322.975 366.459 cv
322.975 365.663 322.659 364.9 322.096 364.337 cv
321.534 363.775 320.771 363.459 319.975 363.459 cv
319.179 363.459 318.416 363.775 317.854 364.337 cv
317.291 364.9 316.975 365.663 316.975 366.459 cv
316.975 367.254 317.291 368.017 317.854 368.58 cv
318.416 369.143 319.179 369.459 319.975 369.459 cv
cp
@
154.724 167.613 mo
155.52 167.613 156.283 167.297 156.845 166.735 cv
157.408 166.172 157.724 165.409 157.724 164.613 cv
157.724 163.818 157.408 163.055 156.845 162.492 cv
156.283 161.93 155.52 161.613 154.724 161.613 cv
153.928 161.613 153.165 161.93 152.603 162.492 cv
152.04 163.055 151.724 163.818 151.724 164.613 cv
151.724 165.409 152.04 166.172 152.603 166.735 cv
153.165 167.297 153.928 167.613 154.724 167.613 cv
cp
f
154.724 167.613 mo
155.52 167.613 156.283 167.297 156.845 166.735 cv
157.408 166.172 157.724 165.409 157.724 164.613 cv
157.724 163.818 157.408 163.055 156.845 162.492 cv
156.283 161.93 155.52 161.613 154.724 161.613 cv
153.928 161.613 153.165 161.93 152.603 162.492 cv
152.04 163.055 151.724 163.818 151.724 164.613 cv
151.724 165.409 152.04 166.172 152.603 166.735 cv
153.165 167.297 153.928 167.613 154.724 167.613 cv
cp
@
327.178 272.391 mo
327.974 272.391 328.737 272.075 329.299 271.512 cv
329.862 270.95 330.178 270.187 330.178 269.391 cv
330.178 268.595 329.862 267.832 329.299 267.27 cv
328.737 266.707 327.974 266.391 327.178 266.391 cv
326.382 266.391 325.619 266.707 325.057 267.27 cv
324.494 267.832 324.178 268.595 324.178 269.391 cv
324.178 270.187 324.494 270.95 325.057 271.512 cv
325.619 272.075 326.382 272.391 327.178 272.391 cv
cp
f
327.178 272.391 mo
327.974 272.391 328.737 272.075 329.299 271.512 cv
329.862 270.95 330.178 270.187 330.178 269.391 cv
330.178 268.595 329.862 267.832 329.299 267.27 cv
328.737 266.707 327.974 266.391 327.178 266.391 cv
326.382 266.391 325.619 266.707 325.057 267.27 cv
324.494 267.832 324.178 268.595 324.178 269.391 cv
324.178 270.187 324.494 270.95 325.057 271.512 cv
325.619 272.075 326.382 272.391 327.178 272.391 cv
cp
@
169.168 433.56 mo
169.964 433.56 170.727 433.244 171.289 432.681 cv
171.852 432.119 172.168 431.356 172.168 430.56 cv
172.168 429.764 171.852 429.001 171.289 428.439 cv
170.727 427.876 169.964 427.56 169.168 427.56 cv
168.373 427.56 167.609 427.876 167.047 428.439 cv
166.484 429.001 166.168 429.764 166.168 430.56 cv
166.168 431.356 166.484 432.119 167.047 432.681 cv
167.609 433.244 168.373 433.56 169.168 433.56 cv
cp
f
169.168 433.56 mo
169.964 433.56 170.727 433.244 171.289 432.681 cv
171.852 432.119 172.168 431.356 172.168 430.56 cv
172.168 429.764 171.852 429.001 171.289 428.439 cv
170.727 427.876 169.964 427.56 169.168 427.56 cv
168.373 427.56 167.609 427.876 167.047 428.439 cv
166.484 429.001 166.168 429.764 166.168 430.56 cv
166.168 431.356 166.484 432.119 167.047 432.681 cv
167.609 433.244 168.373 433.56 169.168 433.56 cv
cp
@
79.2244 413.201 mo
80.0201 413.201 80.7832 412.885 81.3458 412.323 cv
81.9083 411.76 82.2244 410.997 82.2244 410.201 cv
82.2244 409.406 81.9083 408.642 81.3458 408.08 cv
80.7832 407.517 80.0201 407.201 79.2244 407.201 cv
78.4288 407.201 77.6657 407.517 77.1031 408.08 cv
76.5405 408.642 76.2244 409.406 76.2244 410.201 cv
76.2244 410.997 76.5405 411.76 77.1031 412.323 cv
77.6657 412.885 78.4288 413.201 79.2244 413.201 cv
cp
f
79.2244 413.201 mo
80.0201 413.201 80.7832 412.885 81.3458 412.323 cv
81.9083 411.76 82.2244 410.997 82.2244 410.201 cv
82.2244 409.406 81.9083 408.642 81.3458 408.08 cv
80.7832 407.517 80.0201 407.201 79.2244 407.201 cv
78.4288 407.201 77.6657 407.517 77.1031 408.08 cv
76.5405 408.642 76.2244 409.406 76.2244 410.201 cv
76.2244 410.997 76.5405 411.76 77.1031 412.323 cv
77.6657 412.885 78.4288 413.201 79.2244 413.201 cv
cp
@
104.573 420.883 mo
105.369 420.883 106.132 420.567 106.695 420.005 cv
107.257 419.442 107.573 418.679 107.573 417.883 cv
107.573 417.088 107.257 416.324 106.695 415.762 cv
106.132 415.199 105.369 414.883 104.573 414.883 cv
103.778 414.883 103.015 415.199 102.452 415.762 cv
101.89 416.324 101.573 417.088 101.573 417.883 cv
101.573 418.679 101.89 419.442 102.452 420.005 cv
103.015 420.567 103.778 420.883 104.573 420.883 cv
cp
f
104.573 420.883 mo
105.369 420.883 106.132 420.567 106.695 420.005 cv
107.257 419.442 107.573 418.679 107.573 417.883 cv
107.573 417.088 107.257 416.324 106.695 415.762 cv
106.132 415.199 105.369 414.883 104.573 414.883 cv
103.778 414.883 103.015 415.199 102.452 415.762 cv
101.89 416.324 101.573 417.088 101.573 417.883 cv
101.573 418.679 101.89 419.442 102.452 420.005 cv
103.015 420.567 103.778 420.883 104.573 420.883 cv
cp
@
350.734 388.893 mo
351.53 388.893 352.293 388.577 352.856 388.014 cv
353.418 387.452 353.734 386.689 353.734 385.893 cv
353.734 385.097 353.418 384.334 352.856 383.772 cv
352.293 383.209 351.53 382.893 350.734 382.893 cv
349.939 382.893 349.176 383.209 348.613 383.772 cv
348.05 384.334 347.734 385.097 347.734 385.893 cv
347.734 386.689 348.05 387.452 348.613 388.014 cv
349.176 388.577 349.939 388.893 350.734 388.893 cv
cp
f
350.734 388.893 mo
351.53 388.893 352.293 388.577 352.856 388.014 cv
353.418 387.452 353.734 386.689 353.734 385.893 cv
353.734 385.097 353.418 384.334 352.856 383.772 cv
352.293 383.209 351.53 382.893 350.734 382.893 cv
349.939 382.893 349.176 383.209 348.613 383.772 cv
348.05 384.334 347.734 385.097 347.734 385.893 cv
347.734 386.689 348.05 387.452 348.613 388.014 cv
349.176 388.577 349.939 388.893 350.734 388.893 cv
cp
@
325.108 415.844 mo
325.903 415.844 326.666 415.527 327.229 414.965 cv
327.791 414.402 328.108 413.639 328.108 412.844 cv
328.108 412.048 327.791 411.285 327.229 410.722 cv
326.666 410.16 325.903 409.844 325.108 409.844 cv
324.312 409.844 323.549 410.16 322.986 410.722 cv
322.424 411.285 322.108 412.048 322.108 412.844 cv
322.108 413.639 322.424 414.402 322.986 414.965 cv
323.549 415.527 324.312 415.844 325.108 415.844 cv
cp
f
325.108 415.844 mo
325.903 415.844 326.666 415.527 327.229 414.965 cv
327.791 414.402 328.108 413.639 328.108 412.844 cv
328.108 412.048 327.791 411.285 327.229 410.722 cv
326.666 410.16 325.903 409.844 325.108 409.844 cv
324.312 409.844 323.549 410.16 322.986 410.722 cv
322.424 411.285 322.108 412.048 322.108 412.844 cv
322.108 413.639 322.424 414.402 322.986 414.965 cv
323.549 415.527 324.312 415.844 325.108 415.844 cv
cp
@
.8 lw
2 lc
0 lj
50.2 450.72 mo
50.2 7.20001 li
1 /0 /CSD get_res sepcs
1 sep
@
496.6 450.72 mo
496.6 7.20001 li
@
50.2 450.72 mo
496.6 450.72 li
@
50.2 7.20001 mo
496.6 7.20001 li
@
479.8 128.181 mo
293.769 128.181 li
293.831 128.128 293.891 128.071 293.95 128.013 cv
294.606 127.357 294.975 126.467 294.975 125.538 cv
294.975 124.61 294.606 123.72 293.95 123.063 cv
293.293 122.407 292.403 122.038 291.475 122.038 cv
290.547 122.038 289.656 122.407 289 123.063 cv
288.344 123.72 287.975 124.61 287.975 125.538 cv
287.975 126.467 288.344 127.357 289 128.013 cv
289.058 128.071 289.119 128.128 289.18 128.181 cv
283 128.181 li
281.477 128.179 280.429 127.804 279.754 127.128 cv
279.077 126.452 278.702 125.404 278.7 123.881 cv
278.7 30.3759 li
279.234 30.6901 279.846 30.8599 280.476 30.8599 cv
280.476 30.8599 li
281.404 30.8599 282.295 30.4912 282.951 29.8348 cv
283.607 29.1785 283.976 28.2882 283.976 27.3599 cv
283.976 26.4317 283.607 25.5415 282.951 24.8851 cv
282.295 24.2287 281.404 23.86 280.476 23.86 cv
279.846 23.86 279.234 24.0298 278.7 24.344 cv
278.7 24 li
278.702 22.4768 279.077 21.4294 279.754 20.7536 cv
280.429 20.0773 281.477 19.7018 283 19.7 cv
479.8 19.7 li
481.323 19.7018 482.371 20.0773 483.046 20.7536 cv
483.723 21.4294 484.098 22.4768 484.1 24 cv
484.1 123.881 li
484.098 125.404 483.723 126.452 483.046 127.128 cv
482.371 127.804 481.323 128.179 479.8 128.181 cv
298.497 124.671 mo
298.497 124.671 li
299.425 124.671 300.315 124.302 300.971 123.645 cv
301.628 122.989 301.997 122.099 301.997 121.171 cv
301.997 120.242 301.628 119.352 300.971 118.696 cv
300.315 118.039 299.425 117.671 298.497 117.671 cv
297.568 117.671 296.678 118.039 296.022 118.696 cv
295.365 119.352 294.997 120.242 294.997 121.171 cv
294.997 122.099 295.365 122.989 296.022 123.645 cv
296.678 124.302 297.568 124.671 298.497 124.671 cv
383.466 107.685 mo
383.466 107.685 li
384.394 107.685 385.284 107.316 385.94 106.66 cv
386.597 106.004 386.966 105.113 386.966 104.185 cv
386.966 103.257 386.597 102.367 385.94 101.71 cv
385.284 101.054 384.394 100.685 383.466 100.685 cv
382.537 100.685 381.647 101.054 380.991 101.71 cv
380.334 102.367 379.965 103.257 379.965 104.185 cv
379.965 105.113 380.334 106.004 380.991 106.66 cv
381.647 107.316 382.537 107.685 383.466 107.685 cv
326.296 104.237 mo
326.296 104.237 li
327.224 104.237 328.114 103.868 328.771 103.212 cv
329.427 102.556 329.796 101.665 329.796 100.737 cv
329.796 99.8089 329.427 98.9186 328.771 98.2623 cv
328.114 97.606 327.224 97.2372 326.296 97.2372 cv
325.367 97.2372 324.477 97.606 323.821 98.2623 cv
323.164 98.9186 322.796 99.8089 322.796 100.737 cv
322.796 101.665 323.164 102.556 323.821 103.212 cv
324.477 103.868 325.367 104.237 326.296 104.237 cv
380.138 96.9394 mo
380.138 96.9394 li
381.066 96.9394 381.956 96.5707 382.612 95.9143 cv
383.269 95.258 383.638 94.3677 383.638 93.4394 cv
383.638 92.5112 383.269 91.6209 382.612 90.9646 cv
381.956 90.3082 381.066 89.9395 380.138 89.9395 cv
379.209 89.9395 378.319 90.3082 377.663 90.9646 cv
377.006 91.6209 376.638 92.5112 376.638 93.4394 cv
376.638 94.3677 377.006 95.258 377.663 95.9143 cv
378.319 96.5707 379.209 96.9394 380.138 96.9394 cv
444.15 93.2921 mo
444.15 93.2921 li
445.078 93.2921 445.969 92.9234 446.625 92.267 cv
447.281 91.6106 447.65 90.7203 447.65 89.792 cv
447.65 88.8639 447.281 87.9736 446.625 87.3173 cv
445.969 86.6608 445.078 86.292 444.15 86.292 cv
443.222 86.292 442.332 86.6608 441.675 87.3171 cv
441.019 87.9736 440.65 88.8639 440.65 89.792 cv
440.65 90.7203 441.019 91.6106 441.675 92.2669 cv
442.332 92.9234 443.222 93.2921 444.15 93.2921 cv
283.89 78.48 mo
283.89 78.48 li
284.818 78.48 285.709 78.1112 286.365 77.4549 cv
287.022 76.7984 287.39 75.9082 287.39 74.98 cv
287.39 74.0517 287.022 73.1614 286.365 72.5051 cv
285.709 71.8488 284.818 71.48 283.89 71.48 cv
282.962 71.48 282.072 71.8488 281.415 72.5051 cv
280.759 73.1614 280.39 74.0517 280.39 74.98 cv
280.39 75.9082 280.759 76.7984 281.415 77.4549 cv
282.072 78.1112 282.962 78.48 283.89 78.48 cv
446.603 72.1068 mo
446.603 72.1068 li
447.531 72.1068 448.422 71.738 449.078 71.0817 cv
449.734 70.4254 450.103 69.5351 450.103 68.6068 cv
450.103 67.6786 449.734 66.7883 449.078 66.132 cv
448.422 65.4756 447.531 65.1068 446.603 65.1068 cv
445.675 65.1068 444.785 65.4756 444.128 66.132 cv
443.472 66.7883 443.103 67.6786 443.103 68.6068 cv
443.103 69.5351 443.472 70.4254 444.128 71.0817 cv
444.785 71.738 445.675 72.1068 446.603 72.1068 cv
312.208 65.1625 mo
312.208 65.1625 li
313.136 65.1625 314.026 64.7937 314.682 64.1374 cv
315.339 63.4809 315.708 62.5907 315.708 61.6625 cv
315.708 60.7342 315.339 59.8439 314.682 59.1876 cv
314.026 58.5312 313.136 58.1625 312.208 58.1625 cv
311.279 58.1625 310.389 58.5312 309.733 59.1876 cv
309.076 59.8439 308.708 60.7342 308.708 61.6625 cv
308.708 62.5907 309.076 63.4809 309.733 64.1374 cv
310.389 64.7937 311.279 65.1625 312.208 65.1625 cv
354.585 58.5657 mo
354.585 58.5657 li
355.513 58.5657 356.404 58.1971 357.06 57.5406 cv
357.716 56.8843 358.085 55.994 358.085 55.0657 cv
358.085 54.1375 357.716 53.2473 357.06 52.5908 cv
356.404 51.9345 355.513 51.5657 354.585 51.5657 cv
353.657 51.5657 352.767 51.9345 352.11 52.5908 cv
351.454 53.2473 351.085 54.1375 351.085 55.0657 cv
351.085 55.994 351.454 56.8843 352.11 57.5406 cv
352.767 58.1971 353.657 58.5657 354.585 58.5657 cv
310.304 40.8258 mo
310.304 40.8258 li
311.233 40.8258 312.123 40.457 312.779 39.8007 cv
313.436 39.1443 313.804 38.254 313.804 37.3258 cv
313.804 36.3975 313.436 35.5072 312.779 34.8509 cv
312.123 34.1946 311.233 33.8258 310.304 33.8258 cv
309.376 33.8258 308.486 34.1946 307.829 34.8509 cv
307.173 35.5072 306.804 36.3975 306.804 37.3258 cv
306.804 38.254 307.173 39.1443 307.829 39.8007 cv
308.486 40.457 309.376 40.8258 310.304 40.8258 cv
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
298.497 123.671 mo
297.834 123.671 297.198 123.407 296.729 122.938 cv
296.26 122.469 295.997 121.833 295.997 121.171 cv
295.997 120.508 296.26 119.872 296.729 119.403 cv
297.198 118.934 297.834 118.67 298.497 118.67 cv
299.16 118.67 299.795 118.934 300.264 119.403 cv
300.733 119.872 300.997 120.508 300.997 121.171 cv
300.997 121.833 300.733 122.469 300.264 122.938 cv
299.795 123.407 299.16 123.671 298.497 123.671 cv
298.497 123.671 li
.164706 .0901961 .0156863 0 cmyk
f
298.497 124.671 mo
298.497 124.671 li
297.568 124.671 296.678 124.302 296.022 123.645 cv
295.365 122.989 294.997 122.099 294.997 121.171 cv
294.997 120.242 295.365 119.352 296.022 118.696 cv
296.678 118.039 297.568 117.671 298.497 117.671 cv
299.425 117.671 300.315 118.039 300.971 118.696 cv
301.628 119.352 301.997 120.242 301.997 121.171 cv
301.997 122.099 301.628 122.989 300.971 123.645 cv
300.315 124.302 299.425 124.671 298.497 124.671 cv
298.497 118.67 mo
297.834 118.67 297.198 118.934 296.729 119.403 cv
296.26 119.872 295.997 120.508 295.997 121.171 cv
295.997 121.833 296.26 122.469 296.729 122.938 cv
297.198 123.407 297.834 123.671 298.497 123.671 cv
298.497 123.671 li
299.16 123.671 299.795 123.407 300.264 122.938 cv
300.733 122.469 300.997 121.833 300.997 121.171 cv
300.997 120.508 300.733 119.872 300.264 119.403 cv
299.795 118.934 299.16 118.67 298.497 118.67 cv
f
380.138 95.9394 mo
379.475 95.9394 378.839 95.6759 378.37 95.2072 cv
377.901 94.7384 377.638 94.1025 377.638 93.4394 cv
377.638 92.7764 377.901 92.1404 378.37 91.6716 cv
378.839 91.2028 379.475 90.9395 380.138 90.9395 cv
380.801 90.9395 381.437 91.2028 381.905 91.6716 cv
382.374 92.1404 382.638 92.7764 382.638 93.4394 cv
382.638 94.1025 382.374 94.7384 381.905 95.2072 cv
381.437 95.6759 380.801 95.9394 380.138 95.9394 cv
380.138 95.9394 li
f
380.138 96.9394 mo
380.138 96.9394 li
379.209 96.9394 378.319 96.5707 377.663 95.9143 cv
377.006 95.258 376.638 94.3677 376.638 93.4394 cv
376.638 92.5112 377.006 91.6209 377.663 90.9646 cv
378.319 90.3082 379.209 89.9395 380.138 89.9395 cv
381.066 89.9395 381.956 90.3082 382.612 90.9646 cv
383.269 91.6209 383.638 92.5112 383.638 93.4394 cv
383.638 94.3677 383.269 95.258 382.612 95.9143 cv
381.956 96.5707 381.066 96.9394 380.138 96.9394 cv
380.138 90.9395 mo
379.475 90.9395 378.839 91.2028 378.37 91.6716 cv
377.901 92.1404 377.638 92.7764 377.638 93.4394 cv
377.638 94.1025 377.901 94.7384 378.37 95.2072 cv
378.839 95.6759 379.475 95.9394 380.138 95.9394 cv
380.138 95.9394 li
380.801 95.9394 381.437 95.6759 381.905 95.2072 cv
382.374 94.7384 382.638 94.1025 382.638 93.4394 cv
382.638 92.7764 382.374 92.1404 381.905 91.6716 cv
381.437 91.2028 380.801 90.9395 380.138 90.9395 cv
f
446.603 71.1068 mo
445.94 71.1068 445.304 70.8435 444.835 70.3747 cv
444.835 70.3745 li
444.367 69.9058 444.103 69.2699 444.103 68.6068 cv
444.103 67.9438 444.367 67.3079 444.835 66.8391 cv
445.304 66.3703 445.94 66.1069 446.603 66.1069 cv
447.266 66.1069 447.902 66.3703 448.371 66.8391 cv
448.84 67.3079 449.103 67.9438 449.103 68.6068 cv
449.103 69.2699 448.84 69.9058 448.371 70.3745 cv
448.371 70.3747 li
447.902 70.8435 447.266 71.1068 446.603 71.1068 cv
446.603 71.1068 li
f
446.603 72.1068 mo
446.603 72.1068 li
445.675 72.1068 444.785 71.738 444.128 71.0817 cv
443.472 70.4254 443.103 69.5351 443.103 68.6068 cv
443.103 67.6786 443.472 66.7883 444.128 66.132 cv
444.785 65.4756 445.675 65.1068 446.603 65.1068 cv
447.531 65.1068 448.422 65.4756 449.078 66.132 cv
449.734 66.7883 450.103 67.6786 450.103 68.6068 cv
450.103 69.5351 449.734 70.4254 449.078 71.0817 cv
448.422 71.738 447.531 72.1068 446.603 72.1068 cv
446.603 66.1069 mo
445.94 66.1069 445.304 66.3703 444.835 66.8391 cv
444.367 67.3079 444.103 67.9438 444.103 68.6068 cv
444.103 69.2699 444.367 69.9058 444.835 70.3745 cv
444.835 70.3747 li
445.304 70.8435 445.94 71.1068 446.603 71.1068 cv
446.603 71.1068 li
447.266 71.1068 447.902 70.8435 448.371 70.3747 cv
448.371 70.3745 li
448.84 69.9058 449.103 69.2699 449.103 68.6068 cv
449.103 67.9438 448.84 67.3079 448.371 66.8391 cv
447.902 66.3703 447.266 66.1069 446.603 66.1069 cv
f
280.476 29.86 mo
279.813 29.86 279.177 29.5966 278.708 29.1278 cv
278.706 29.125 278.703 29.1223 278.7 29.1195 cv
278.7 25.6005 li
278.703 25.5977 278.706 25.595 278.708 25.5922 cv
279.177 25.1234 279.813 24.86 280.476 24.86 cv
281.139 24.86 281.775 25.1234 282.244 25.5922 cv
282.713 26.061 282.976 26.6971 282.976 27.3599 cv
282.976 28.023 282.713 28.659 282.244 29.1278 cv
281.775 29.5966 281.139 29.86 280.476 29.86 cv
280.476 29.86 li
f
280.476 30.8599 mo
280.476 30.8599 li
279.846 30.8599 279.234 30.6901 278.7 30.3759 cv
278.7 29.1195 li
278.703 29.1223 278.706 29.125 278.708 29.1278 cv
279.177 29.5966 279.813 29.86 280.476 29.86 cv
280.476 29.86 li
281.139 29.86 281.775 29.5966 282.244 29.1278 cv
282.713 28.659 282.976 28.023 282.976 27.3599 cv
282.976 26.6971 282.713 26.061 282.244 25.5922 cv
281.775 25.1234 281.139 24.86 280.476 24.86 cv
279.813 24.86 279.177 25.1234 278.708 25.5922 cv
278.706 25.595 278.703 25.5977 278.7 25.6005 cv
278.7 24.344 li
279.234 24.0298 279.846 23.86 280.476 23.86 cv
281.404 23.86 282.295 24.2287 282.951 24.8851 cv
283.607 25.5415 283.976 26.4317 283.976 27.3599 cv
283.976 28.2882 283.607 29.1785 282.951 29.8348 cv
282.295 30.4912 281.404 30.8599 280.476 30.8599 cv
f
444.15 92.2921 mo
443.487 92.2921 442.851 92.0287 442.382 91.5599 cv
441.914 91.0911 441.65 90.455 441.65 89.792 cv
441.65 89.1291 441.914 88.4931 442.382 88.0243 cv
442.851 87.5555 443.487 87.2921 444.15 87.2921 cv
444.813 87.2921 445.449 87.5555 445.918 88.0243 cv
446.387 88.4931 446.65 89.1291 446.65 89.792 cv
446.65 90.455 446.387 91.0911 445.918 91.5599 cv
445.449 92.0287 444.813 92.2921 444.15 92.2921 cv
444.15 92.2921 li
f
444.15 93.2921 mo
444.15 93.2921 li
443.222 93.2921 442.332 92.9234 441.675 92.2669 cv
441.019 91.6106 440.65 90.7203 440.65 89.792 cv
440.65 88.8639 441.019 87.9736 441.675 87.3171 cv
442.332 86.6608 443.222 86.292 444.15 86.292 cv
445.078 86.292 445.969 86.6608 446.625 87.3173 cv
447.281 87.9736 447.65 88.8639 447.65 89.792 cv
447.65 90.7203 447.281 91.6106 446.625 92.267 cv
445.969 92.9234 445.078 93.2921 444.15 93.2921 cv
444.15 87.2921 mo
443.487 87.2921 442.851 87.5555 442.382 88.0243 cv
441.914 88.4931 441.65 89.1291 441.65 89.792 cv
441.65 90.455 441.914 91.0911 442.382 91.5599 cv
442.851 92.0287 443.487 92.2921 444.15 92.2921 cv
444.15 92.2921 li
444.813 92.2921 445.449 92.0287 445.918 91.5599 cv
446.387 91.0911 446.65 90.455 446.65 89.792 cv
446.65 89.1291 446.387 88.4931 445.918 88.0243 cv
445.449 87.5555 444.813 87.2921 444.15 87.2921 cv
f
310.304 39.8258 mo
309.641 39.8258 309.005 39.5623 308.537 39.0935 cv
308.068 38.6247 307.804 37.9888 307.804 37.3258 cv
307.804 36.6628 308.068 36.0269 308.537 35.5581 cv
308.537 35.5579 li
309.005 35.0892 309.641 34.8258 310.304 34.8258 cv
310.967 34.8258 311.603 35.0892 312.072 35.5579 cv
312.072 35.5581 li
312.541 36.0269 312.804 36.6628 312.804 37.3258 cv
312.804 37.9888 312.541 38.6247 312.072 39.0935 cv
311.603 39.5623 310.967 39.8258 310.304 39.8258 cv
310.304 39.8258 li
f
310.304 40.8258 mo
310.304 40.8258 li
309.376 40.8258 308.486 40.457 307.829 39.8007 cv
307.173 39.1443 306.804 38.254 306.804 37.3258 cv
306.804 36.3975 307.173 35.5072 307.829 34.8509 cv
308.486 34.1946 309.376 33.8258 310.304 33.8258 cv
311.233 33.8258 312.123 34.1946 312.779 34.8509 cv
313.436 35.5072 313.804 36.3975 313.804 37.3258 cv
313.804 38.254 313.436 39.1443 312.779 39.8007 cv
312.123 40.457 311.233 40.8258 310.304 40.8258 cv
310.304 34.8258 mo
309.641 34.8258 309.005 35.0892 308.537 35.5579 cv
308.537 35.5581 li
308.068 36.0269 307.804 36.6628 307.804 37.3258 cv
307.804 37.9888 308.068 38.6247 308.537 39.0935 cv
309.005 39.5623 309.641 39.8258 310.304 39.8258 cv
310.304 39.8258 li
310.967 39.8258 311.603 39.5623 312.072 39.0935 cv
312.541 38.6247 312.804 37.9888 312.804 37.3258 cv
312.804 36.6628 312.541 36.0269 312.072 35.5581 cv
312.072 35.5579 li
311.603 35.0892 310.967 34.8258 310.304 34.8258 cv
f
326.296 103.237 mo
325.633 103.237 324.997 102.974 324.528 102.505 cv
324.059 102.036 323.796 101.4 323.796 100.737 cv
323.796 100.074 324.059 99.4381 324.528 98.9694 cv
324.997 98.5006 325.633 98.2371 326.296 98.2371 cv
326.959 98.2371 327.595 98.5006 328.063 98.9694 cv
328.532 99.4381 328.796 100.074 328.796 100.737 cv
328.796 101.4 328.532 102.036 328.063 102.505 cv
327.595 102.974 326.959 103.237 326.296 103.237 cv
326.296 103.237 li
f
326.296 104.237 mo
326.296 104.237 li
325.367 104.237 324.477 103.868 323.821 103.212 cv
323.164 102.556 322.796 101.665 322.796 100.737 cv
322.796 99.8089 323.164 98.9186 323.821 98.2623 cv
324.477 97.606 325.367 97.2372 326.296 97.2372 cv
327.224 97.2372 328.114 97.606 328.771 98.2623 cv
329.427 98.9186 329.796 99.8089 329.796 100.737 cv
329.796 101.665 329.427 102.556 328.771 103.212 cv
328.114 103.868 327.224 104.237 326.296 104.237 cv
326.296 98.2371 mo
325.633 98.2371 324.997 98.5006 324.528 98.9694 cv
324.059 99.4381 323.796 100.074 323.796 100.737 cv
323.796 101.4 324.059 102.036 324.528 102.505 cv
324.997 102.974 325.633 103.237 326.296 103.237 cv
326.296 103.237 li
326.959 103.237 327.595 102.974 328.063 102.505 cv
328.532 102.036 328.796 101.4 328.796 100.737 cv
328.796 100.074 328.532 99.4381 328.063 98.9694 cv
327.595 98.5006 326.959 98.2371 326.296 98.2371 cv
f
312.208 64.1625 mo
311.545 64.1625 310.909 63.899 310.44 63.4302 cv
309.971 62.9614 309.708 62.3254 309.708 61.6625 cv
309.708 60.9995 309.971 60.3634 310.44 59.8946 cv
310.909 59.4259 311.545 59.1624 312.208 59.1624 cv
312.871 59.1624 313.507 59.4259 313.975 59.8946 cv
314.444 60.3634 314.708 60.9995 314.708 61.6625 cv
314.708 62.3254 314.444 62.9614 313.975 63.4302 cv
313.507 63.899 312.871 64.1625 312.208 64.1625 cv
312.208 64.1625 li
f
312.208 65.1625 mo
312.208 65.1625 li
311.279 65.1625 310.389 64.7937 309.733 64.1374 cv
309.076 63.4809 308.708 62.5907 308.708 61.6625 cv
308.708 60.7342 309.076 59.8439 309.733 59.1876 cv
310.389 58.5312 311.279 58.1625 312.208 58.1625 cv
313.136 58.1625 314.026 58.5312 314.682 59.1876 cv
315.339 59.8439 315.708 60.7342 315.708 61.6625 cv
315.708 62.5907 315.339 63.4809 314.682 64.1374 cv
314.026 64.7937 313.136 65.1625 312.208 65.1625 cv
312.208 59.1624 mo
311.545 59.1624 310.909 59.4259 310.44 59.8946 cv
309.971 60.3634 309.708 60.9995 309.708 61.6625 cv
309.708 62.3254 309.971 62.9614 310.44 63.4302 cv
310.909 63.899 311.545 64.1625 312.208 64.1625 cv
312.208 64.1625 li
312.871 64.1625 313.507 63.899 313.975 63.4302 cv
314.444 62.9614 314.708 62.3254 314.708 61.6625 cv
314.708 60.9995 314.444 60.3634 313.975 59.8946 cv
313.507 59.4259 312.871 59.1624 312.208 59.1624 cv
f
291.475 128.038 mo
290.812 128.038 290.176 127.775 289.707 127.306 cv
289.238 126.837 288.975 126.201 288.975 125.538 cv
288.975 124.875 289.238 124.239 289.707 123.77 cv
290.176 123.302 290.812 123.038 291.474 123.038 cv
291.475 123.038 291.475 123.038 291.475 123.038 cv
292.138 123.038 292.774 123.302 293.243 123.77 cv
293.711 124.239 293.975 124.875 293.975 125.538 cv
293.975 126.201 293.711 126.837 293.243 127.306 cv
292.774 127.775 292.138 128.038 291.475 128.038 cv
291.475 128.038 li
f
293.769 128.181 mo
289.18 128.181 li
289.119 128.128 289.058 128.071 289 128.013 cv
288.344 127.357 287.975 126.467 287.975 125.538 cv
287.975 124.61 288.344 123.72 289 123.063 cv
289.656 122.407 290.547 122.038 291.475 122.038 cv
292.403 122.038 293.293 122.407 293.95 123.063 cv
294.606 123.72 294.975 124.61 294.975 125.538 cv
294.975 126.467 294.606 127.357 293.95 128.013 cv
293.891 128.071 293.831 128.128 293.769 128.181 cv
291.474 123.038 mo
290.812 123.038 290.176 123.302 289.707 123.77 cv
289.238 124.239 288.975 124.875 288.975 125.538 cv
288.975 126.201 289.238 126.837 289.707 127.306 cv
290.176 127.775 290.812 128.038 291.475 128.038 cv
291.475 128.038 li
292.138 128.038 292.774 127.775 293.243 127.306 cv
293.711 126.837 293.975 126.201 293.975 125.538 cv
293.975 124.875 293.711 124.239 293.243 123.77 cv
292.774 123.302 292.138 123.038 291.475 123.038 cv
291.475 123.038 291.475 123.038 291.474 123.038 cv
f
383.466 106.685 mo
382.803 106.685 382.167 106.422 381.698 105.953 cv
381.229 105.484 380.965 104.848 380.965 104.185 cv
380.965 103.522 381.229 102.886 381.698 102.417 cv
381.698 102.417 li
382.167 101.949 382.803 101.685 383.466 101.685 cv
384.128 101.685 384.764 101.949 385.233 102.417 cv
385.233 102.417 li
385.702 102.886 385.966 103.522 385.966 104.185 cv
385.966 104.848 385.702 105.484 385.233 105.953 cv
384.764 106.422 384.128 106.685 383.466 106.685 cv
383.466 106.685 li
f
383.466 107.685 mo
383.466 107.685 li
382.537 107.685 381.647 107.316 380.991 106.66 cv
380.334 106.004 379.965 105.113 379.965 104.185 cv
379.965 103.257 380.334 102.367 380.991 101.71 cv
381.647 101.054 382.537 100.685 383.466 100.685 cv
384.394 100.685 385.284 101.054 385.94 101.71 cv
386.597 102.367 386.966 103.257 386.966 104.185 cv
386.966 105.113 386.597 106.004 385.94 106.66 cv
385.284 107.316 384.394 107.685 383.466 107.685 cv
383.466 101.685 mo
382.803 101.685 382.167 101.949 381.698 102.417 cv
381.698 102.417 li
381.229 102.886 380.965 103.522 380.965 104.185 cv
380.965 104.848 381.229 105.484 381.698 105.953 cv
382.167 106.422 382.803 106.685 383.466 106.685 cv
383.466 106.685 li
384.128 106.685 384.764 106.422 385.233 105.953 cv
385.702 105.484 385.966 104.848 385.966 104.185 cv
385.966 103.522 385.702 102.886 385.233 102.417 cv
385.233 102.417 li
384.764 101.949 384.128 101.685 383.466 101.685 cv
f
354.585 57.5658 mo
353.922 57.5658 353.286 57.3024 352.818 56.8336 cv
352.349 56.3648 352.085 55.7287 352.085 55.0657 cv
352.085 54.4028 352.349 53.7668 352.818 53.298 cv
353.286 52.8292 353.922 52.5658 354.585 52.5658 cv
355.248 52.5658 355.884 52.8292 356.353 53.298 cv
356.822 53.7668 357.085 54.4028 357.085 55.0657 cv
357.085 55.7287 356.822 56.3648 356.353 56.8336 cv
355.884 57.3024 355.248 57.5658 354.585 57.5658 cv
354.585 57.5658 li
f
354.585 58.5657 mo
354.585 58.5657 li
353.657 58.5657 352.767 58.1971 352.11 57.5406 cv
351.454 56.8843 351.085 55.994 351.085 55.0657 cv
351.085 54.1375 351.454 53.2473 352.11 52.5908 cv
352.767 51.9345 353.657 51.5657 354.585 51.5657 cv
355.513 51.5657 356.404 51.9345 357.06 52.5908 cv
357.716 53.2473 358.085 54.1375 358.085 55.0657 cv
358.085 55.994 357.716 56.8843 357.06 57.5406 cv
356.404 58.1971 355.513 58.5657 354.585 58.5657 cv
354.585 52.5658 mo
353.922 52.5658 353.286 52.8292 352.818 53.298 cv
352.349 53.7668 352.085 54.4028 352.085 55.0657 cv
352.085 55.7287 352.349 56.3648 352.818 56.8336 cv
353.286 57.3024 353.922 57.5658 354.585 57.5658 cv
354.585 57.5658 li
355.248 57.5658 355.884 57.3024 356.353 56.8336 cv
356.822 56.3648 357.085 55.7287 357.085 55.0657 cv
357.085 54.4028 356.822 53.7668 356.353 53.298 cv
355.884 52.8292 355.248 52.5658 354.585 52.5658 cv
f
283.89 77.48 mo
283.227 77.48 282.591 77.2165 282.122 76.7477 cv
281.654 76.2789 281.39 75.6429 281.39 74.98 cv
281.39 74.317 281.654 73.6809 282.122 73.2122 cv
282.591 72.7434 283.227 72.4799 283.89 72.4799 cv
284.553 72.4799 285.189 72.7434 285.658 73.2122 cv
286.127 73.6809 286.39 74.317 286.39 74.98 cv
286.39 75.6429 286.127 76.2789 285.658 76.7477 cv
285.189 77.2165 284.553 77.48 283.89 77.48 cv
283.89 77.48 li
f
283.89 78.48 mo
283.89 78.48 li
282.962 78.48 282.072 78.1112 281.415 77.4549 cv
280.759 76.7984 280.39 75.9082 280.39 74.98 cv
280.39 74.0517 280.759 73.1614 281.415 72.5051 cv
282.072 71.8488 282.962 71.48 283.89 71.48 cv
284.818 71.48 285.709 71.8488 286.365 72.5051 cv
287.022 73.1614 287.39 74.0517 287.39 74.98 cv
287.39 75.9082 287.022 76.7984 286.365 77.4549 cv
285.709 78.1112 284.818 78.48 283.89 78.48 cv
283.89 72.4799 mo
283.227 72.4799 282.591 72.7434 282.122 73.2122 cv
281.654 73.6809 281.39 74.317 281.39 74.98 cv
281.39 75.6429 281.654 76.2789 282.122 76.7477 cv
282.591 77.2165 283.227 77.48 283.89 77.48 cv
283.89 77.48 li
284.553 77.48 285.189 77.2165 285.658 76.7477 cv
286.127 76.2789 286.39 75.6429 286.39 74.98 cv
286.39 74.317 286.127 73.6809 285.658 73.2122 cv
285.189 72.7434 284.553 72.4799 283.89 72.4799 cv
f
479.81 129.181 mo
479.807 129.181 479.803 129.181 479.8 129.181 cv
283 129.181 li
282.997 129.181 282.993 129.181 282.99 129.181 cv
281.317 129.181 279.969 128.757 279.046 127.835 cv
278.123 126.911 277.698 125.558 277.7 123.881 cv
277.7 29.4917 li
277.792 29.6119 277.893 29.7265 278.001 29.8348 cv
278.212 30.0458 278.447 30.2271 278.7 30.3759 cv
278.7 123.881 li
278.702 125.404 279.077 126.452 279.754 127.128 cv
280.429 127.804 281.477 128.179 283 128.181 cv
283 128.181 li
289.18 128.181 li
289.815 128.732 290.629 129.038 291.475 129.038 cv
291.475 129.038 li
292.321 129.038 293.135 128.732 293.769 128.181 cv
479.8 128.181 li
481.323 128.179 482.371 127.804 483.046 127.128 cv
483.723 126.452 484.098 125.404 484.1 123.881 cv
484.1 24 li
484.098 22.4768 483.723 21.4294 483.046 20.7536 cv
482.371 20.0773 481.323 19.7018 479.8 19.7 cv
283 19.7 li
281.477 19.7018 280.429 20.0773 279.754 20.7536 cv
279.077 21.4294 278.702 22.4768 278.7 24 cv
278.7 24.344 li
278.447 24.4928 278.212 24.6741 278.001 24.8851 cv
277.893 24.9934 277.792 25.1081 277.7 25.2283 cv
277.7 24 li
277.698 22.3232 278.123 20.9707 279.046 20.0464 cv
279.969 19.1245 281.318 18.7 282.99 18.7 cv
282.993 18.7 282.997 18.7 283 18.7 cv
479.8 18.7 li
479.803 18.7 479.807 18.7 479.81 18.7 cv
481.483 18.7 482.831 19.1245 483.754 20.0464 cv
484.677 20.9707 485.102 22.3232 485.1 24 cv
485.1 123.881 li
485.102 125.558 484.677 126.911 483.754 127.835 cv
482.831 128.757 481.482 129.181 479.81 129.181 cv
1 /1 /CSD get_res sepcs
.160784 sep
f
278.7 29.1195 mo
278.236 28.6516 277.976 28.0191 277.976 27.3599 cv
277.976 26.7009 278.236 26.0685 278.7 25.6005 cv
278.7 29.1195 li
.164706 .0901961 .0156863 .160784 cmyk
f
278.7 30.3759 mo
278.447 30.2271 278.212 30.0458 278.001 29.8348 cv
277.893 29.7265 277.792 29.6119 277.7 29.4917 cv
277.7 25.2283 li
277.792 25.1081 277.893 24.9934 278.001 24.8851 cv
278.212 24.6741 278.447 24.4928 278.7 24.344 cv
278.7 25.6005 li
278.236 26.0685 277.976 26.7009 277.976 27.3599 cv
277.976 28.0191 278.236 28.6516 278.7 29.1195 cv
278.7 30.3759 li
f
291.475 129.038 mo
291.475 129.038 li
290.629 129.038 289.815 128.732 289.18 128.181 cv
293.769 128.181 li
293.135 128.732 292.321 129.038 291.475 129.038 cv
f
1.5 lw
1 lj
287.8 39.4313 mo
311.8 39.4313 li
335.8 39.4313 li
.112612 .952178 .88159 0 cmyk
@
363.808 28.8953 mo
365.68 30.3113 li
364.84 30.7673 li
363.784 32.7833 362.608 34.5593 361.336 36.1193 cv
360.04 37.6793 358.408 39.0473 356.416 40.2473 cv
356.224 39.9593 li
357.832 38.6633 359.272 37.1033 360.52 35.3273 cv
361.768 33.5513 362.872 31.3913 363.808 28.8953 cv
cp
370.384 29.1833 mo
369.616 29.6393 li
370.288 32.1353 371.416 34.0793 373 35.4473 cv
374.56 36.8393 376.216 37.6793 377.968 37.9913 cv
377.968 38.2793 li
377.008 38.3993 376.36 38.8073 376 39.4793 cv
373.936 38.3753 372.28 36.8633 371.08 34.9913 cv
369.856 33.1193 369.016 30.9353 368.584 28.4153 cv
370.384 29.1833 li
cp
360.16 37.9913 mo
370.84 37.9913 li
371.776 37.0553 li
373.096 38.3513 li
372.352 38.9273 li
372.208 43.8713 371.896 46.8473 371.392 47.8553 cv
370.888 48.8633 370.024 49.6073 368.776 50.0633 cv
368.584 49.0553 367.72 48.3353 366.16 47.9033 cv
366.16 47.5433 li
367.72 47.7833 368.728 47.8793 369.208 47.8553 cv
369.664 47.8313 370.024 47.4953 370.264 46.7993 cv
370.504 46.1273 370.768 43.3673 371.032 38.5433 cv
366.16 38.5433 li
365.776 41.2313 365.008 43.5113 363.904 45.3353 cv
362.776 47.1833 360.616 48.7673 357.448 50.1593 cv
357.256 49.7753 li
360.064 48.3353 361.96 46.6553 362.92 44.6873 cv
363.88 42.7193 364.456 40.6793 364.648 38.5433 cv
361.744 38.5433 li
360.904 38.7353 li
360.16 37.9913 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
388.84 28.3193 mo
388.936 28.0553 li
390.376 28.3673 391.264 28.7033 391.648 29.0393 cv
392.032 29.3753 392.224 29.6873 392.224 29.9273 cv
392.224 30.2393 392.032 30.6233 391.648 31.0553 cv
398.512 31.0553 li
399.808 29.8313 li
401.584 31.6073 li
383.416 31.6073 li
382.6 31.6073 381.832 31.7033 381.16 31.8953 cv
380.32 31.0553 li
391 31.0553 li
390.808 30.5033 390.544 30.0233 390.232 29.6153 cv
389.92 29.2073 389.464 28.7753 388.84 28.3193 cv
cp
387.256 45.1193 mo
394.096 45.0233 li
393.472 44.2073 392.776 43.5353 392.032 42.9593 cv
392.224 42.6713 li
394.096 43.4873 395.2 44.1353 395.584 44.5673 cv
395.968 44.9993 396.16 45.4073 396.16 45.7673 cv
396.16 46.0313 396.088 46.3193 395.968 46.6313 cv
395.824 46.9433 395.704 47.0873 395.584 47.0873 cv
395.464 47.0873 395.368 46.9913 395.32 46.7993 cv
395.056 46.4393 394.768 46.0073 394.48 45.4793 cv
391.648 45.6713 389.752 45.8633 388.744 46.0073 cv
387.736 46.1753 386.992 46.4393 386.512 46.7993 cv
385.552 44.9273 li
386.056 44.9273 386.608 44.6633 387.208 44.1353 cv
387.784 43.6073 388.456 42.7433 389.224 41.5433 cv
383.584 41.5433 li
383.584 46.2233 383.608 48.8873 383.68 49.5833 cv
382.288 50.1593 li
382.336 48.0953 382.384 46.4153 382.384 45.0713 cv
382.384 43.7273 382.336 42.0953 382.288 40.1513 cv
383.584 40.9913 li
389.512 40.9913 li
389.992 40.1753 390.376 39.4553 390.616 38.8313 cv
385.648 38.8313 li
385.096 39.5753 li
383.776 38.5433 li
384.352 37.9913 li
384.352 36.4313 384.304 34.5593 384.256 32.3513 cv
386.32 33.2153 li
385.552 33.9593 li
385.552 38.2793 li
396.256 38.2793 li
396.256 36.9113 396.208 34.9673 396.16 32.4473 cv
398.32 33.3833 li
397.48 34.0553 li
397.528 36.9833 397.552 38.7353 397.552 39.3113 cv
396.256 39.8633 li
396.256 38.8313 li
390.904 38.8313 li
392.416 39.6713 li
391.648 40.1033 391.12 40.5593 390.808 40.9913 cv
398.224 40.9913 li
398.872 40.0553 li
400.384 41.2793 li
399.616 41.8313 li
399.616 47.3513 li
399.736 48.6953 399.04 49.6073 397.552 50.0633 cv
397.552 49.2473 396.568 48.6233 394.648 48.1913 cv
394.648 47.8313 li
396.472 47.9273 397.552 47.9993 397.888 47.9993 cv
398.224 47.9993 398.416 47.8313 398.416 47.5433 cv
398.416 41.5433 li
390.52 41.5433 li
389.392 42.9833 388.312 44.1833 387.256 45.1193 cv
cp
391.288 34.1513 mo
392.152 33.4793 392.824 32.7833 393.352 32.0873 cv
394.552 33.3833 li
393.976 33.5273 393.184 33.9353 392.128 34.6073 cv
393.424 35.1833 394.216 35.6153 394.456 35.9273 cv
394.696 36.2393 394.84 36.5753 394.84 36.9593 cv
394.84 37.1513 394.792 37.3913 394.696 37.6313 cv
394.6 37.8713 394.528 37.9913 394.48 37.9913 cv
394.288 37.9913 394.048 37.7753 393.808 37.3193 cv
393.304 36.6953 392.488 36.0473 391.384 35.3513 cv
389.8 36.3113 388.144 37.0793 386.416 37.7033 cv
386.32 37.4153 li
387.928 36.6233 389.368 35.7593 390.616 34.7993 cv
389.68 34.2473 388.504 33.6233 387.064 32.9273 cv
387.16 32.6393 li
388.6 33.0953 389.968 33.5993 391.288 34.1513 cv
cp
f
407.416 40.7993 mo
407.224 42.3113 407.056 43.4393 406.936 44.1833 cv
407.608 44.8793 408.4 45.5753 409.288 46.2473 cv
409.288 37.6073 li
407.224 37.6073 li
406.408 37.6073 405.64 37.7033 404.968 37.8953 cv
404.128 37.0553 li
409.096 37.0553 li
409.096 33.1193 li
407.968 33.1193 li
407.152 33.1193 406.384 33.2153 405.712 33.3833 cv
404.872 32.5433 li
409.096 32.5433 li
409.096 30.6713 409.048 29.2553 409 28.2473 cv
411.256 29.2793 li
410.32 30.0233 li
410.32 32.5433 li
412 32.5433 li
413.032 31.5113 li
414.52 33.1193 li
410.32 33.1193 li
410.32 37.0553 li
412.096 37.0553 li
413.224 35.9273 li
414.808 37.6073 li
410.512 37.6073 li
410.512 41.6393 li
412.48 41.6393 li
413.584 40.6073 li
415.096 42.2153 li
410.512 42.2153 li
410.512 46.8953 li
412.24 47.7113 414.16 48.1193 416.272 48.1913 cv
418.36 48.2393 420.16 48.2873 421.648 48.2873 cv
423.4 48.2873 424.84 48.2393 425.968 48.1913 cv
425.968 48.5513 li
425.008 48.7433 424.456 49.1753 424.288 49.8713 cv
421.336 49.7993 418.696 49.6553 416.392 49.4393 cv
414.088 49.2233 412.192 48.7673 410.728 48.0473 cv
409.24 47.3513 407.944 46.2233 406.84 44.6393 cv
406.408 46.5833 405.496 48.3833 404.128 50.0633 cv
403.84 49.8713 li
404.776 48.1433 405.376 46.3913 405.664 44.6153 cv
405.952 42.8393 406.096 41.0633 406.096 39.3113 cv
408.16 40.2473 li
407.416 40.7993 li
cp
417.256 40.2473 mo
417.256 44.8313 li
422.68 44.8313 li
422.68 40.2473 li
417.256 40.2473 li
cp
420.064 36.0233 mo
420.88 36.1673 421.456 36.2153 421.84 36.2153 cv
422.032 36.2153 422.224 36.1913 422.44 36.1193 cv
422.656 36.0713 422.824 35.6633 422.92 34.8953 cv
423.016 34.1513 423.112 32.8793 423.256 31.0553 cv
419.32 31.0553 li
419.176 34.7993 417.376 37.5593 413.872 39.3113 cv
413.68 38.9273 li
416.368 37.0553 417.736 34.4393 417.808 31.0553 cv
416.992 31.0553 416.224 31.1513 415.552 31.3193 cv
414.712 30.4793 li
423.16 30.4793 li
424 29.5433 li
425.224 30.7673 li
424.552 31.3193 li
424.432 33.2873 424.312 34.6313 424.192 35.3753 cv
424.048 36.1193 423.856 36.6713 423.616 37.0553 cv
423.376 37.4393 422.896 37.7753 422.224 38.0873 cv
421.888 37.3433 421.168 36.7673 420.064 36.3833 cv
420.064 36.0233 li
cp
415.84 38.7353 mo
417.352 39.6713 li
422.512 39.6713 li
423.448 38.6393 li
424.84 40.0553 li
423.904 40.6073 li
423.904 43.2953 423.928 45.1913 424 46.2473 cv
422.68 46.7993 li
422.68 45.3833 li
417.256 45.3833 li
417.256 46.7033 li
415.84 47.4473 li
415.888 45.5753 415.936 43.9673 415.936 42.6233 cv
415.936 41.2793 415.888 39.9833 415.84 38.7353 cv
cp
f
439.648 45.0233 mo
439.648 46.4153 439.672 47.7833 439.744 49.1273 cv
438.16 49.7753 li
438.208 47.8553 438.256 46.1273 438.256 44.5433 cv
438.256 39.1193 li
430.936 39.1193 li
430.12 39.1193 429.352 39.2153 428.68 39.3833 cv
427.84 38.5433 li
438.256 38.5433 li
438.256 30.6713 li
433 30.6713 li
432.184 30.6713 431.416 30.7673 430.744 30.9593 cv
429.904 30.1193 li
445.192 30.1193 li
446.512 28.7993 li
448.384 30.6713 li
439.648 30.6713 li
439.648 38.5433 li
446.512 38.5433 li
447.904 37.1513 li
449.872 39.1193 li
439.648 39.1193 li
439.648 45.0233 li
cp
444.808 31.6073 mo
446.776 33.1193 li
446.272 33.1193 445.576 33.6953 444.712 34.7993 cv
443.776 35.9273 442.768 36.9833 441.712 37.9913 cv
441.448 37.7993 li
443.056 35.6153 444.184 33.5513 444.808 31.6073 cv
cp
431.872 32.0873 mo
433.672 33.4073 434.728 34.2953 435.04 34.7513 cv
435.352 35.2313 435.52 35.6393 435.52 36.0233 cv
435.52 36.2153 435.472 36.4553 435.376 36.7433 cv
435.28 37.0313 435.064 37.2953 434.728 37.5353 cv
434.392 37.7753 434.056 37.3433 433.744 36.2153 cv
433.432 35.1593 432.712 33.8393 431.584 32.2793 cv
431.872 32.0873 li
cp
f
460.936 43.4153 mo
460.936 47.5433 li
464.872 47.5433 li
464.872 43.4153 li
460.936 43.4153 li
cp
460.288 34.4153 mo
460.768 32.9993 461.128 31.6553 461.32 30.3833 cv
455.32 30.3833 li
454.36 30.3833 453.544 30.4793 452.872 30.6713 cv
452.032 29.8313 li
470.776 29.8313 li
472.288 28.4153 li
473.968 30.3833 li
462.256 30.3833 li
463.648 31.1513 li
462.712 31.4153 li
461.944 32.4953 461.32 33.5033 460.84 34.4153 cv
470.032 34.4153 li
470.68 33.4793 li
472.192 34.6073 li
471.52 35.2793 li
471.52 40.8953 471.544 45.5753 471.616 49.3193 cv
470.224 49.9673 li
470.224 48.0953 li
455.68 48.0953 li
455.68 49.3913 li
454.288 50.0633 li
454.336 47.8793 454.384 45.0953 454.384 41.6873 cv
454.384 38.2793 454.336 35.6153 454.288 33.6713 cv
455.68 34.4153 li
460.288 34.4153 li
cp
455.68 34.9913 mo
455.68 47.5433 li
459.712 47.5433 li
459.712 34.9913 li
455.68 34.9913 li
cp
466.096 34.9913 mo
466.096 47.5433 li
470.224 47.5433 li
470.224 34.9913 li
466.096 34.9913 li
cp
460.936 34.9913 mo
460.936 38.5433 li
464.872 38.5433 li
464.872 34.9913 li
460.936 34.9913 li
cp
460.936 39.1193 mo
460.936 42.8633 li
464.872 42.8633 li
464.872 39.1193 li
460.936 39.1193 li
cp
f
311.8 76.4625 mo
312.596 76.4625 313.359 76.1464 313.921 75.5838 cv
314.484 75.0212 314.8 74.2581 314.8 73.4625 cv
314.8 72.6669 314.484 71.9038 313.921 71.3412 cv
313.359 70.7786 312.596 70.4625 311.8 70.4625 cv
311.004 70.4625 310.241 70.7786 309.679 71.3412 cv
309.116 71.9038 308.8 72.6669 308.8 73.4625 cv
308.8 74.2581 309.116 75.0212 309.679 75.5838 cv
310.241 76.1464 311.004 76.4625 311.8 76.4625 cv
cp
.817868 .452186 .0811475 0 cmyk
f
1 lw
0 lc
311.8 76.4625 mo
312.596 76.4625 313.359 76.1464 313.921 75.5838 cv
314.484 75.0212 314.8 74.2581 314.8 73.4625 cv
314.8 72.6669 314.484 71.9038 313.921 71.3412 cv
313.359 70.7786 312.596 70.4625 311.8 70.4625 cv
311.004 70.4625 310.241 70.7786 309.679 71.3412 cv
309.116 71.9038 308.8 72.6669 308.8 73.4625 cv
308.8 74.2581 309.116 75.0212 309.679 75.5838 cv
310.241 76.1464 311.004 76.4625 311.8 76.4625 cv
cp
@
361 71.6385 mo
361 71.2065 360.952 70.4625 360.904 69.3825 cv
363.256 70.5105 li
362.32 71.1825 li
362.32 81.7665 li
367 81.7665 li
367 64.9905 li
361.288 64.9905 li
360.472 64.9905 359.704 65.0865 359.032 65.2785 cv
358.192 64.4145 li
374.032 64.4145 li
375.448 63.0225 li
377.416 64.9905 li
368.32 64.9905 li
368.32 72.3825 li
372.904 72.3825 li
374.224 71.0865 li
376.096 72.9585 li
368.32 72.9585 li
368.32 81.7665 li
374.032 81.7665 li
375.52 80.2785 li
377.584 82.3185 li
359.512 82.3185 li
358.696 82.3185 357.928 82.3905 357.256 82.5825 cv
356.416 81.7665 li
361 81.7665 li
361 71.6385 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
384.16 63.3825 mo
384.352 63.1185 li
385.72 63.6945 386.68 64.1745 387.256 64.5825 cv
387.808 64.9905 388.072 65.3985 388.048 65.7825 cv
388 66.1905 387.904 66.5265 387.712 66.8145 cv
387.52 67.1025 387.376 67.2465 387.256 67.2465 cv
387.064 67.2465 386.824 66.9345 386.584 66.3105 cv
386.152 65.4465 385.336 64.4625 384.16 63.3825 cv
cp
390.52 67.7985 mo
390.52 63.7665 li
390.52 63.3345 390.496 62.8545 390.448 62.2785 cv
392.872 63.2145 li
391.84 63.9585 li
391.84 67.7985 li
393.616 67.7985 li
395.056 65.8785 396.112 64.2225 396.808 62.8305 cv
398.68 64.4145 li
397.648 64.7025 li
396.952 65.2065 395.8 66.2385 394.192 67.7985 cv
398.776 67.7985 li
400.096 66.5745 li
401.776 68.3505 li
391.84 68.3505 li
391.84 68.9265 li
395.776 69.9825 398.104 70.7505 398.872 71.1825 cv
399.616 71.6145 400.024 71.9985 400.096 72.3105 cv
400.144 72.6225 400.192 72.8385 400.192 72.9585 cv
400.192 73.2705 400.144 73.5105 400.048 73.7025 cv
399.952 73.8945 399.856 73.9905 399.808 73.9905 cv
399.496 73.9905 398.992 73.6305 398.32 72.8625 cv
397.36 71.9265 395.2 70.7505 391.84 69.3105 cv
391.84 71.2545 391.864 72.4305 391.936 72.8625 cv
390.448 73.4145 li
390.496 72.6225 390.52 70.9665 390.52 68.4465 cv
389.392 69.8865 388.096 71.1585 386.632 72.2145 cv
385.168 73.2705 383.128 74.1825 380.512 74.9265 cv
380.416 74.6385 li
382.72 73.6545 384.496 72.6705 385.792 71.6625 cv
387.064 70.6545 388.144 69.5505 389.032 68.3505 cv
383.68 68.3505 li
382.864 68.3505 382.12 68.4465 381.448 68.6385 cv
380.584 67.7985 li
390.52 67.7985 li
cp
391.192 75.2145 mo
391.048 75.5985 390.928 75.9345 390.808 76.2465 cv
398.872 76.2465 li
400.192 74.9265 li
401.872 76.7985 li
392.128 76.7985 li
393.184 78.3105 394.48 79.5345 396.064 80.4705 cv
397.624 81.4065 399.592 81.9825 401.968 82.2225 cv
401.968 82.5825 li
400.768 82.6305 400.024 83.0865 399.712 83.9025 cv
397.648 83.0865 395.896 81.9825 394.504 80.6385 cv
393.112 79.2705 392.152 77.9985 391.648 76.7985 cv
390.712 76.7985 li
389.944 79.2465 388.768 80.9745 387.136 81.9825 cv
385.504 82.9905 383.176 83.7585 380.128 84.2865 cv
380.032 83.9985 li
382.288 83.4225 384.208 82.6305 385.84 81.6225 cv
387.472 80.6145 388.624 79.0065 389.32 76.7985 cv
383.032 76.7985 li
382.216 76.7985 381.448 76.8945 380.776 77.0865 cv
379.936 76.2465 li
389.416 76.2465 li
389.512 75.3825 389.608 74.4705 389.68 73.5105 cv
392.032 74.6385 li
391.192 75.2145 li
cp
f
311.8 110.588 mo
312.596 110.588 313.359 110.271 313.921 109.709 cv
314.484 109.146 314.8 108.383 314.8 107.588 cv
314.8 106.792 314.484 106.029 313.921 105.466 cv
313.359 104.904 312.596 104.588 311.8 104.588 cv
311.004 104.588 310.241 104.904 309.679 105.466 cv
309.116 106.029 308.8 106.792 308.8 107.588 cv
308.8 108.383 309.116 109.146 309.679 109.709 cv
310.241 110.271 311.004 110.588 311.8 110.588 cv
cp
.760891 .105776 1 0 cmyk
f
311.8 110.588 mo
312.596 110.588 313.359 110.271 313.921 109.709 cv
314.484 109.146 314.8 108.383 314.8 107.588 cv
314.8 106.792 314.484 106.029 313.921 105.466 cv
313.359 104.904 312.596 104.588 311.8 104.588 cv
311.004 104.588 310.241 104.904 309.679 105.466 cv
309.116 106.029 308.8 106.792 308.8 107.588 cv
308.8 108.383 309.116 109.146 309.679 109.709 cv
310.241 110.271 311.004 110.588 311.8 110.588 cv
cp
@
361.48 113.468 mo
361.528 111.716 361.552 109.916 361.552 108.068 cv
361.552 106.244 361.528 104.492 361.48 102.86 cv
360.328 103.988 358.864 105.116 357.064 106.244 cv
356.872 105.956 li
358.864 104.396 360.496 102.668 361.792 100.796 cv
363.064 98.9235 363.928 97.4355 364.384 96.3075 cv
366.256 97.6035 li
365.32 97.9875 li
364.48 99.1155 li
369.904 99.1155 li
370.84 98.0835 li
372.448 99.6675 li
371.872 99.8115 371.32 100.124 370.84 100.628 cv
370.336 101.132 369.4 102.116 368.032 103.604 cv
372.616 103.604 li
373.552 102.668 li
374.872 103.988 li
374.032 104.54 li
374.032 108.38 374.056 110.852 374.128 111.956 cv
372.712 112.604 li
372.712 104.18 li
362.872 104.18 li
362.872 112.796 li
361.48 113.468 li
cp
367.48 103.604 mo
370 99.6675 li
364.288 99.6675 li
363.28 100.868 362.296 101.972 361.384 102.956 cv
362.776 103.604 li
367.48 103.604 li
cp
368.416 107.636 mo
368.272 111.476 367.264 114.044 365.368 115.34 cv
363.448 116.636 360.664 117.644 356.968 118.412 cv
356.968 118.028 li
360.952 116.828 363.544 115.628 364.744 114.38 cv
365.92 113.132 366.592 111.668 366.76 109.988 cv
366.904 108.308 367 106.916 367 105.764 cv
369.16 106.892 li
368.416 107.636 li
cp
368.776 113.468 mo
368.872 113.084 li
370.744 113.516 372.28 113.948 373.504 114.356 cv
374.728 114.764 375.544 115.196 375.952 115.652 cv
376.336 116.108 376.552 116.492 376.552 116.804 cv
376.552 116.924 376.504 117.116 376.408 117.356 cv
376.312 117.596 376.216 117.74 376.096 117.74 cv
375.832 117.74 375.304 117.356 374.512 116.612 cv
373.432 115.58 371.512 114.524 368.776 113.468 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
384.16 97.5075 mo
384.352 97.2435 li
385.72 97.8195 386.68 98.2995 387.256 98.7075 cv
387.808 99.1155 388.072 99.5235 388.048 99.9075 cv
388 100.316 387.904 100.652 387.712 100.94 cv
387.52 101.228 387.376 101.372 387.256 101.372 cv
387.064 101.372 386.824 101.06 386.584 100.436 cv
386.152 99.5715 385.336 98.5875 384.16 97.5075 cv
cp
390.52 101.924 mo
390.52 97.8915 li
390.52 97.4595 390.496 96.9795 390.448 96.4035 cv
392.872 97.3395 li
391.84 98.0835 li
391.84 101.924 li
393.616 101.924 li
395.056 100.004 396.112 98.3475 396.808 96.9555 cv
398.68 98.5395 li
397.648 98.8275 li
396.952 99.3315 395.8 100.364 394.192 101.924 cv
398.776 101.924 li
400.096 100.7 li
401.776 102.476 li
391.84 102.476 li
391.84 103.052 li
395.776 104.108 398.104 104.876 398.872 105.308 cv
399.616 105.74 400.024 106.124 400.096 106.436 cv
400.144 106.748 400.192 106.964 400.192 107.084 cv
400.192 107.396 400.144 107.636 400.048 107.828 cv
399.952 108.02 399.856 108.116 399.808 108.116 cv
399.496 108.116 398.992 107.756 398.32 106.988 cv
397.36 106.052 395.2 104.876 391.84 103.436 cv
391.84 105.38 391.864 106.556 391.936 106.988 cv
390.448 107.54 li
390.496 106.748 390.52 105.092 390.52 102.572 cv
389.392 104.012 388.096 105.284 386.632 106.34 cv
385.168 107.396 383.128 108.308 380.512 109.052 cv
380.416 108.764 li
382.72 107.78 384.496 106.796 385.792 105.788 cv
387.064 104.78 388.144 103.676 389.032 102.476 cv
383.68 102.476 li
382.864 102.476 382.12 102.572 381.448 102.764 cv
380.584 101.924 li
390.52 101.924 li
cp
391.192 109.34 mo
391.048 109.724 390.928 110.06 390.808 110.372 cv
398.872 110.372 li
400.192 109.052 li
401.872 110.924 li
392.128 110.924 li
393.184 112.436 394.48 113.66 396.064 114.596 cv
397.624 115.532 399.592 116.108 401.968 116.348 cv
401.968 116.708 li
400.768 116.756 400.024 117.212 399.712 118.028 cv
397.648 117.212 395.896 116.108 394.504 114.764 cv
393.112 113.396 392.152 112.124 391.648 110.924 cv
390.712 110.924 li
389.944 113.372 388.768 115.1 387.136 116.108 cv
385.504 117.116 383.176 117.884 380.128 118.412 cv
380.032 118.124 li
382.288 117.548 384.208 116.756 385.84 115.748 cv
387.472 114.74 388.624 113.132 389.32 110.924 cv
383.032 110.924 li
382.216 110.924 381.448 111.02 380.776 111.212 cv
379.936 110.372 li
389.416 110.372 li
389.512 109.508 389.608 108.596 389.68 107.636 cv
392.032 108.764 li
391.192 109.34 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

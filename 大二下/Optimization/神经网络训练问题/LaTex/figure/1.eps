%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <8FED><4EE3>1.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yy
%%CreationDate: 2022/4/22, 9:35:50
%%BoundingBox: 0 0 516 486
%%HiResBoundingBox: 0 0 515.8000 485.1701
%%CropBox: 0 0 515.8000 485.1701
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2022-04-22T09:33:37+08:00"
   xmp:CreatorTool="Matplotlib v3.5.1, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.1"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -485.17 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 485.17 li
515.8 485.17 li
515.8 0 li
cp
clp
0 485.17 mo
515.8 485.17 li
515.8 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
62.2 450.72 mo
508.6 450.72 li
508.6 7.20001 li
62.2 7.20001 li
cp
f
82.4909 450.72 mo
82.4909 454.22 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
82.4909 450.72 mo
82.4909 454.22 li
@
70.4909 459.036 mo
69.6029 459.036 68.8589 459.708 68.2829 461.052 cv
67.6829 462.396 67.3949 464.196 67.3949 466.428 cv
67.3949 468.828 67.6829 470.676 68.2829 471.972 cv
68.8589 473.292 69.6269 473.94 70.5389 473.94 cv
71.4509 473.94 72.1709 473.292 72.6989 471.972 cv
73.2269 470.676 73.4909 468.828 73.4909 466.428 cv
73.4909 464.196 73.2269 462.396 72.7469 461.052 cv
72.2429 459.708 71.4989 459.036 70.4909 459.036 cv
cp
70.4909 474.684 mo
69.0989 474.684 67.9469 473.964 67.0109 472.524 cv
66.0749 471.084 65.6189 469.068 65.6189 466.428 cv
65.6189 464.004 66.0509 462.036 66.9629 460.548 cv
67.8749 459.06 69.0509 458.292 70.4909 458.292 cv
71.8589 458.292 72.9869 459.012 73.8989 460.452 cv
74.8109 461.892 75.2669 463.884 75.2669 466.452 cv
75.2669 469.02 74.8109 471.036 73.8989 472.5 cv
72.9869 473.964 71.8589 474.684 70.4909 474.684 cv
cp
f
79.4909 474.78 mo
79.1069 474.78 78.7949 474.66 78.5069 474.42 cv
78.2189 474.18 78.0749 473.82 78.0749 473.388 cv
78.0749 472.956 78.2189 472.596 78.5069 472.356 cv
78.7949 472.116 79.1069 471.972 79.4909 471.972 cv
79.8509 471.972 80.1869 472.116 80.4749 472.404 cv
80.7629 472.692 80.9069 473.004 80.9069 473.364 cv
80.9069 473.82 80.7629 474.18 80.4749 474.42 cv
80.1869 474.66 79.8509 474.78 79.4909 474.78 cv
cp
f
94.4909 459.036 mo
93.6029 459.036 92.8589 459.708 92.2829 461.052 cv
91.6829 462.396 91.3949 464.196 91.3949 466.428 cv
91.3949 468.828 91.6829 470.676 92.2829 471.972 cv
92.8589 473.292 93.6269 473.94 94.5389 473.94 cv
95.4509 473.94 96.1709 473.292 96.6989 471.972 cv
97.2269 470.676 97.4909 468.828 97.4909 466.428 cv
97.4909 464.196 97.2269 462.396 96.7469 461.052 cv
96.2429 459.708 95.4989 459.036 94.4909 459.036 cv
cp
94.4909 474.684 mo
93.0989 474.684 91.9469 473.964 91.0109 472.524 cv
90.0749 471.084 89.6189 469.068 89.6189 466.428 cv
89.6189 464.004 90.0509 462.036 90.9629 460.548 cv
91.8749 459.06 93.0509 458.292 94.4909 458.292 cv
95.8589 458.292 96.9869 459.012 97.8989 460.452 cv
98.8109 461.892 99.2669 463.884 99.2669 466.452 cv
99.2669 469.02 98.8109 471.036 97.8989 472.5 cv
96.9869 473.964 95.8589 474.684 94.4909 474.684 cv
cp
f
163.655 450.72 mo
163.655 454.22 li
f
163.655 450.72 mo
163.655 454.22 li
@
151.655 459.036 mo
150.767 459.036 150.023 459.708 149.447 461.052 cv
148.847 462.396 148.559 464.196 148.559 466.428 cv
148.559 468.828 148.847 470.676 149.447 471.972 cv
150.023 473.292 150.791 473.94 151.703 473.94 cv
152.615 473.94 153.335 473.292 153.863 471.972 cv
154.391 470.676 154.655 468.828 154.655 466.428 cv
154.655 464.196 154.391 462.396 153.911 461.052 cv
153.407 459.708 152.663 459.036 151.655 459.036 cv
cp
151.655 474.684 mo
150.263 474.684 149.111 473.964 148.175 472.524 cv
147.239 471.084 146.783 469.068 146.783 466.428 cv
146.783 464.004 147.215 462.036 148.127 460.548 cv
149.039 459.06 150.215 458.292 151.655 458.292 cv
153.023 458.292 154.151 459.012 155.063 460.452 cv
155.975 461.892 156.431 463.884 156.431 466.452 cv
156.431 469.02 155.975 471.036 155.063 472.5 cv
154.151 473.964 153.023 474.684 151.655 474.684 cv
cp
f
160.655 474.78 mo
160.271 474.78 159.959 474.66 159.671 474.42 cv
159.383 474.18 159.239 473.82 159.239 473.388 cv
159.239 472.956 159.383 472.596 159.671 472.356 cv
159.959 472.116 160.271 471.972 160.655 471.972 cv
161.015 471.972 161.351 472.116 161.639 472.404 cv
161.927 472.692 162.071 473.004 162.071 473.364 cv
162.071 473.82 161.927 474.18 161.639 474.42 cv
161.351 474.66 161.015 474.78 160.655 474.78 cv
cp
f
178.367 462.396 mo
178.367 461.292 178.103 460.428 177.623 459.828 cv
177.119 459.252 176.375 458.94 175.367 458.94 cv
174.599 458.94 173.975 459.156 173.447 459.564 cv
172.919 459.972 172.655 460.476 172.655 461.1 cv
172.655 461.484 172.775 461.796 173.039 462.036 cv
173.207 462.276 173.303 462.54 173.303 462.78 cv
173.303 463.116 173.207 463.356 173.063 463.5 cv
172.919 463.644 172.679 463.716 172.367 463.716 cv
171.983 463.716 171.695 463.62 171.479 463.404 cv
171.263 463.188 171.167 462.828 171.167 462.324 cv
171.167 461.028 171.623 460.02 172.559 459.324 cv
173.495 458.652 174.503 458.292 175.559 458.292 cv
177.047 458.292 178.175 458.676 178.895 459.42 cv
179.615 460.164 179.975 461.1 179.975 462.228 cv
179.975 462.996 179.783 463.74 179.447 464.484 cv
179.111 465.228 178.559 465.948 177.815 466.62 cv
175.991 468.396 174.599 469.812 173.639 470.892 cv
172.655 471.996 172.079 472.716 171.911 473.1 cv
177.431 473.1 li
177.983 473.1 178.439 472.884 178.823 472.452 cv
179.207 472.02 179.447 471.348 179.591 470.46 cv
180.167 470.46 li
179.591 474.492 li
170.879 474.492 li
170.879 473.292 li
171.167 472.716 171.695 471.996 172.415 471.132 cv
173.135 470.268 174.071 469.236 175.271 468.036 cv
176.327 466.98 177.119 465.972 177.623 465.036 cv
178.103 464.1 178.367 463.212 178.367 462.396 cv
cp
f
244.818 450.72 mo
244.818 454.22 li
f
244.818 450.72 mo
244.818 454.22 li
@
232.818 459.036 mo
231.93 459.036 231.186 459.708 230.61 461.052 cv
230.01 462.396 229.722 464.196 229.722 466.428 cv
229.722 468.828 230.01 470.676 230.61 471.972 cv
231.186 473.292 231.954 473.94 232.866 473.94 cv
233.778 473.94 234.498 473.292 235.026 471.972 cv
235.554 470.676 235.818 468.828 235.818 466.428 cv
235.818 464.196 235.554 462.396 235.074 461.052 cv
234.57 459.708 233.826 459.036 232.818 459.036 cv
cp
232.818 474.684 mo
231.426 474.684 230.274 473.964 229.338 472.524 cv
228.402 471.084 227.946 469.068 227.946 466.428 cv
227.946 464.004 228.378 462.036 229.29 460.548 cv
230.202 459.06 231.378 458.292 232.818 458.292 cv
234.186 458.292 235.314 459.012 236.226 460.452 cv
237.138 461.892 237.594 463.884 237.594 466.452 cv
237.594 469.02 237.138 471.036 236.226 472.5 cv
235.314 473.964 234.186 474.684 232.818 474.684 cv
cp
f
241.818 474.78 mo
241.434 474.78 241.122 474.66 240.834 474.42 cv
240.546 474.18 240.402 473.82 240.402 473.388 cv
240.402 472.956 240.546 472.596 240.834 472.356 cv
241.122 472.116 241.434 471.972 241.818 471.972 cv
242.178 471.972 242.514 472.116 242.802 472.404 cv
243.09 472.692 243.234 473.004 243.234 473.364 cv
243.234 473.82 243.09 474.18 242.802 474.42 cv
242.514 474.66 242.178 474.78 241.818 474.78 cv
cp
f
259.434 472.716 mo
259.434 473.148 259.554 473.46 259.818 473.652 cv
260.058 473.844 260.418 473.94 260.85 473.94 cv
261.69 473.94 li
261.69 474.492 li
255.498 474.492 li
255.498 473.94 li
256.53 473.94 li
257.034 473.94 257.394 473.844 257.61 473.652 cv
257.826 473.46 257.946 473.148 257.946 472.716 cv
257.946 469.62 li
251.658 469.62 li
251.658 469.164 li
258.498 458.292 li
259.434 458.292 li
259.434 469.068 li
261.978 469.068 li
261.978 469.62 li
259.434 469.62 li
259.434 472.716 li
cp
257.85 460.62 mo
252.498 469.068 li
257.946 469.068 li
257.946 460.62 li
257.85 460.62 li
cp
f
325.982 450.72 mo
325.982 454.22 li
f
325.982 450.72 mo
325.982 454.22 li
@
313.982 459.036 mo
313.094 459.036 312.35 459.708 311.774 461.052 cv
311.174 462.396 310.886 464.196 310.886 466.428 cv
310.886 468.828 311.174 470.676 311.774 471.972 cv
312.35 473.292 313.118 473.94 314.03 473.94 cv
314.942 473.94 315.662 473.292 316.19 471.972 cv
316.718 470.676 316.982 468.828 316.982 466.428 cv
316.982 464.196 316.718 462.396 316.238 461.052 cv
315.734 459.708 314.99 459.036 313.982 459.036 cv
cp
313.982 474.684 mo
312.59 474.684 311.438 473.964 310.502 472.524 cv
309.566 471.084 309.11 469.068 309.11 466.428 cv
309.11 464.004 309.542 462.036 310.454 460.548 cv
311.366 459.06 312.542 458.292 313.982 458.292 cv
315.35 458.292 316.478 459.012 317.39 460.452 cv
318.302 461.892 318.758 463.884 318.758 466.452 cv
318.758 469.02 318.302 471.036 317.39 472.5 cv
316.478 473.964 315.35 474.684 313.982 474.684 cv
cp
f
322.982 474.78 mo
322.598 474.78 322.286 474.66 321.998 474.42 cv
321.71 474.18 321.566 473.82 321.566 473.388 cv
321.566 472.956 321.71 472.596 321.998 472.356 cv
322.286 472.116 322.598 471.972 322.982 471.972 cv
323.342 471.972 323.678 472.116 323.966 472.404 cv
324.254 472.692 324.398 473.004 324.398 473.364 cv
324.398 473.82 324.254 474.18 323.966 474.42 cv
323.678 474.66 323.342 474.78 322.982 474.78 cv
cp
f
334.886 468.132 mo
334.886 470.004 335.198 471.468 335.87 472.5 cv
336.518 473.532 337.31 474.036 338.246 474.036 cv
339.182 474.036 339.902 473.7 340.406 473.004 cv
340.91 472.332 341.174 471.036 341.174 469.164 cv
341.174 467.916 340.886 466.956 340.358 466.26 cv
339.83 465.588 339.206 465.228 338.486 465.228 cv
337.766 465.228 337.118 465.444 336.518 465.828 cv
335.918 466.236 335.366 467.004 334.886 468.132 cv
cp
338.534 464.292 mo
340.022 464.292 341.102 464.796 341.774 465.804 cv
342.422 466.812 342.758 467.916 342.758 469.164 cv
342.758 471.036 342.302 472.428 341.39 473.34 cv
340.478 474.252 339.446 474.684 338.27 474.684 cv
336.566 474.684 335.27 474.06 334.406 472.764 cv
333.542 471.492 333.11 469.644 333.11 467.196 cv
333.11 464.316 333.638 462.132 334.694 460.596 cv
335.75 459.06 337.19 458.292 339.014 458.292 cv
339.878 458.292 340.598 458.556 341.126 459.036 cv
341.654 459.54 341.918 459.972 341.918 460.356 cv
341.918 460.74 341.822 461.004 341.678 461.196 cv
341.534 461.388 341.27 461.46 340.934 461.46 cv
340.598 461.46 340.334 461.388 340.19 461.244 cv
340.022 461.1 339.95 460.86 339.95 460.524 cv
339.95 460.428 339.974 460.308 340.046 460.164 cv
340.046 460.044 340.046 459.924 340.046 459.78 cv
340.046 459.54 339.95 459.324 339.758 459.18 cv
339.566 459.036 339.23 458.94 338.726 458.94 cv
337.67 458.94 336.758 459.444 336.014 460.404 cv
335.246 461.364 334.886 463.476 334.886 466.716 cv
335.27 465.9 335.774 465.3 336.446 464.892 cv
337.094 464.508 337.79 464.292 338.534 464.292 cv
cp
f
407.145 450.72 mo
407.145 454.22 li
f
407.145 450.72 mo
407.145 454.22 li
@
395.145 459.036 mo
394.257 459.036 393.513 459.708 392.937 461.052 cv
392.337 462.396 392.049 464.196 392.049 466.428 cv
392.049 468.828 392.337 470.676 392.937 471.972 cv
393.513 473.292 394.281 473.94 395.193 473.94 cv
396.105 473.94 396.825 473.292 397.353 471.972 cv
397.881 470.676 398.145 468.828 398.145 466.428 cv
398.145 464.196 397.881 462.396 397.401 461.052 cv
396.897 459.708 396.153 459.036 395.145 459.036 cv
cp
395.145 474.684 mo
393.753 474.684 392.601 473.964 391.665 472.524 cv
390.729 471.084 390.273 469.068 390.273 466.428 cv
390.273 464.004 390.705 462.036 391.617 460.548 cv
392.529 459.06 393.705 458.292 395.145 458.292 cv
396.513 458.292 397.641 459.012 398.553 460.452 cv
399.465 461.892 399.921 463.884 399.921 466.452 cv
399.921 469.02 399.465 471.036 398.553 472.5 cv
397.641 473.964 396.513 474.684 395.145 474.684 cv
cp
f
404.145 474.78 mo
403.761 474.78 403.449 474.66 403.161 474.42 cv
402.873 474.18 402.729 473.82 402.729 473.388 cv
402.729 472.956 402.873 472.596 403.161 472.356 cv
403.449 472.116 403.761 471.972 404.145 471.972 cv
404.505 471.972 404.841 472.116 405.129 472.404 cv
405.417 472.692 405.561 473.004 405.561 473.364 cv
405.561 473.82 405.417 474.18 405.129 474.42 cv
404.841 474.66 404.505 474.78 404.145 474.78 cv
cp
f
415.497 470.652 mo
415.497 471.66 415.809 472.476 416.481 473.1 cv
417.129 473.724 417.945 474.036 418.953 474.036 cv
420.129 474.036 420.993 473.724 421.521 473.1 cv
422.049 472.476 422.337 471.708 422.337 470.748 cv
422.337 469.932 421.953 469.164 421.209 468.42 cv
420.441 467.676 419.313 466.98 417.825 466.356 cv
417.057 466.86 416.481 467.484 416.097 468.228 cv
415.689 468.996 415.497 469.788 415.497 470.652 cv
cp
423.729 470.46 mo
423.729 471.66 423.273 472.668 422.409 473.484 cv
421.545 474.3 420.393 474.684 418.953 474.684 cv
417.633 474.684 416.505 474.3 415.569 473.484 cv
414.633 472.668 414.177 471.732 414.177 470.676 cv
414.177 469.62 414.441 468.708 414.969 467.94 cv
415.497 467.196 416.265 466.548 417.273 465.972 cv
416.385 465.54 415.713 465.012 415.257 464.34 cv
414.777 463.692 414.561 462.948 414.561 462.132 cv
414.561 461.076 414.945 460.164 415.761 459.42 cv
416.577 458.676 417.705 458.292 419.145 458.292 cv
420.441 458.292 421.521 458.676 422.337 459.42 cv
423.153 460.164 423.561 461.076 423.561 462.132 cv
423.561 462.9 423.321 463.596 422.841 464.244 cv
422.361 464.916 421.641 465.492 420.657 465.972 cv
421.713 466.596 422.481 467.292 422.985 468.036 cv
423.465 468.804 423.729 469.596 423.729 470.46 cv
cp
422.241 462.228 mo
422.241 461.364 421.977 460.596 421.473 459.924 cv
420.969 459.276 420.201 458.94 419.145 458.94 cv
417.945 458.94 417.105 459.252 416.601 459.876 cv
416.097 460.5 415.857 461.172 415.857 461.844 cv
415.857 462.54 416.217 463.212 416.937 463.86 cv
417.657 464.532 418.665 465.108 419.985 465.588 cv
420.729 465.228 421.281 464.772 421.665 464.196 cv
422.049 463.644 422.241 462.996 422.241 462.228 cv
cp
f
488.309 450.72 mo
488.309 454.22 li
f
488.309 450.72 mo
488.309 454.22 li
@
477.149 458.196 mo
477.149 472.428 li
477.149 472.956 477.293 473.34 477.605 473.58 cv
477.917 473.82 478.349 473.94 478.925 473.94 cv
479.861 473.94 li
479.861 474.492 li
473.021 474.492 li
473.021 473.94 li
473.861 473.94 li
474.485 473.94 474.941 473.82 475.229 473.58 cv
475.517 473.34 475.661 472.956 475.661 472.428 cv
475.661 461.1 li
475.661 460.86 475.565 460.644 475.421 460.5 cv
475.253 460.356 475.013 460.26 474.725 460.26 cv
473.021 460.26 li
473.021 459.684 li
473.861 459.684 li
474.605 459.684 475.205 459.564 475.685 459.324 cv
476.165 459.084 476.525 458.7 476.789 458.196 cv
477.149 458.196 li
cp
f
485.309 474.78 mo
484.925 474.78 484.613 474.66 484.325 474.42 cv
484.037 474.18 483.893 473.82 483.893 473.388 cv
483.893 472.956 484.037 472.596 484.325 472.356 cv
484.613 472.116 484.925 471.972 485.309 471.972 cv
485.669 471.972 486.005 472.116 486.293 472.404 cv
486.581 472.692 486.725 473.004 486.725 473.364 cv
486.725 473.82 486.581 474.18 486.293 474.42 cv
486.005 474.66 485.669 474.78 485.309 474.78 cv
cp
f
500.309 459.036 mo
499.421 459.036 498.677 459.708 498.101 461.052 cv
497.501 462.396 497.213 464.196 497.213 466.428 cv
497.213 468.828 497.501 470.676 498.101 471.972 cv
498.677 473.292 499.445 473.94 500.357 473.94 cv
501.269 473.94 501.989 473.292 502.517 471.972 cv
503.045 470.676 503.309 468.828 503.309 466.428 cv
503.309 464.196 503.045 462.396 502.565 461.052 cv
502.061 459.708 501.317 459.036 500.309 459.036 cv
cp
500.309 474.684 mo
498.917 474.684 497.765 473.964 496.829 472.524 cv
495.893 471.084 495.437 469.068 495.437 466.428 cv
495.437 464.004 495.869 462.036 496.781 460.548 cv
497.693 459.06 498.869 458.292 500.309 458.292 cv
501.677 458.292 502.805 459.012 503.717 460.452 cv
504.629 461.892 505.085 463.884 505.085 466.452 cv
505.085 469.02 504.629 471.036 503.717 472.5 cv
502.805 473.964 501.677 474.684 500.309 474.684 cv
cp
f
62.2 419.884 mo
58.7 419.884 li
f
62.2 419.884 mo
58.7 419.884 li
@
7.944 420.11 mo
7.944 419.27 li
18.36 419.27 li
18.36 420.11 li
7.944 420.11 li
cp
f
27.912 415.982 mo
27.912 414.878 27.648 414.014 27.168 413.414 cv
26.664 412.838 25.92 412.526 24.912 412.526 cv
24.144 412.526 23.52 412.742 22.992 413.15 cv
22.464 413.558 22.2 414.062 22.2 414.686 cv
22.2 415.07 22.32 415.382 22.584 415.622 cv
22.752 415.862 22.848 416.126 22.848 416.366 cv
22.848 416.702 22.752 416.942 22.608 417.086 cv
22.464 417.23 22.224 417.302 21.912 417.302 cv
21.528 417.302 21.24 417.206 21.024 416.99 cv
20.808 416.774 20.712 416.414 20.712 415.91 cv
20.712 414.614 21.168 413.606 22.104 412.91 cv
23.04 412.238 24.048 411.878 25.104 411.878 cv
26.592 411.878 27.72 412.262 28.44 413.006 cv
29.16 413.75 29.52 414.686 29.52 415.814 cv
29.52 416.582 29.328 417.326 28.992 418.07 cv
28.656 418.814 28.104 419.534 27.36 420.206 cv
25.536 421.982 24.144 423.398 23.184 424.478 cv
22.2 425.582 21.624 426.302 21.456 426.686 cv
26.976 426.686 li
27.528 426.686 27.984 426.47 28.368 426.038 cv
28.752 425.606 28.992 424.934 29.136 424.046 cv
29.712 424.046 li
29.136 428.078 li
20.424 428.078 li
20.424 426.878 li
20.712 426.302 21.24 425.582 21.96 424.718 cv
22.68 423.854 23.616 422.822 24.816 421.622 cv
25.872 420.566 26.664 419.558 27.168 418.622 cv
27.648 417.686 27.912 416.798 27.912 415.982 cv
cp
f
34.2 428.366 mo
33.816 428.366 33.504 428.246 33.216 428.006 cv
32.928 427.766 32.784 427.406 32.784 426.974 cv
32.784 426.542 32.928 426.182 33.216 425.942 cv
33.504 425.702 33.816 425.558 34.2 425.558 cv
34.56 425.558 34.896 425.702 35.184 425.99 cv
35.472 426.278 35.616 426.59 35.616 426.95 cv
35.616 427.406 35.472 427.766 35.184 428.006 cv
34.896 428.246 34.56 428.366 34.2 428.366 cv
cp
f
49.2 412.622 mo
48.312 412.622 47.568 413.294 46.992 414.638 cv
46.392 415.982 46.104 417.782 46.104 420.014 cv
46.104 422.414 46.392 424.262 46.992 425.558 cv
47.568 426.878 48.336 427.526 49.248 427.526 cv
50.16 427.526 50.88 426.878 51.408 425.558 cv
51.936 424.262 52.2 422.414 52.2 420.014 cv
52.2 417.782 51.936 415.982 51.456 414.638 cv
50.952 413.294 50.208 412.622 49.2 412.622 cv
cp
49.2 428.27 mo
47.808 428.27 46.656 427.55 45.72 426.11 cv
44.784 424.67 44.328 422.654 44.328 420.014 cv
44.328 417.59 44.76 415.622 45.672 414.134 cv
46.584 412.646 47.76 411.878 49.2 411.878 cv
50.568 411.878 51.696 412.598 52.608 414.038 cv
53.52 415.478 53.976 417.47 53.976 420.038 cv
53.976 422.606 53.52 424.622 52.608 426.086 cv
51.696 427.55 50.568 428.27 49.2 428.27 cv
cp
f
62.2 354.216 mo
58.7 354.216 li
f
62.2 354.216 mo
58.7 354.216 li
@
7.944 354.442 mo
7.944 353.602 li
18.36 353.602 li
18.36 354.442 li
7.944 354.442 li
cp
f
26.04 346.114 mo
26.04 360.346 li
26.04 360.874 26.184 361.258 26.496 361.498 cv
26.808 361.738 27.24 361.858 27.816 361.858 cv
28.752 361.858 li
28.752 362.41 li
21.912 362.41 li
21.912 361.858 li
22.752 361.858 li
23.376 361.858 23.832 361.738 24.12 361.498 cv
24.408 361.258 24.552 360.874 24.552 360.346 cv
24.552 349.018 li
24.552 348.778 24.456 348.562 24.312 348.418 cv
24.144 348.274 23.904 348.178 23.616 348.178 cv
21.912 348.178 li
21.912 347.602 li
22.752 347.602 li
23.496 347.602 24.096 347.482 24.576 347.242 cv
25.056 347.002 25.416 346.618 25.68 346.114 cv
26.04 346.114 li
cp
f
34.2 362.698 mo
33.816 362.698 33.504 362.578 33.216 362.338 cv
32.928 362.098 32.784 361.738 32.784 361.306 cv
32.784 360.874 32.928 360.514 33.216 360.274 cv
33.504 360.034 33.816 359.89 34.2 359.89 cv
34.56 359.89 34.896 360.034 35.184 360.322 cv
35.472 360.61 35.616 360.922 35.616 361.282 cv
35.616 361.738 35.472 362.098 35.184 362.338 cv
34.896 362.578 34.56 362.698 34.2 362.698 cv
cp
f
49.68 352.114 mo
50.856 352.114 51.816 352.57 52.584 353.482 cv
53.328 354.394 53.712 355.594 53.712 357.082 cv
53.712 358.762 53.304 360.106 52.536 361.114 cv
51.744 362.122 50.544 362.602 48.912 362.602 cv
47.784 362.602 46.776 362.29 45.912 361.618 cv
45.048 360.97 44.616 360.178 44.616 359.242 cv
44.616 358.858 44.712 358.546 44.928 358.258 cv
45.144 357.97 45.432 357.826 45.816 357.826 cv
46.2 357.826 46.44 357.97 46.56 358.21 cv
46.68 358.45 46.752 358.666 46.752 358.858 cv
46.752 359.242 46.656 359.506 46.488 359.698 cv
46.296 359.962 46.2 360.202 46.2 360.442 cv
46.2 360.97 46.488 361.354 47.088 361.594 cv
47.664 361.834 48.312 361.954 49.008 361.954 cv
50.016 361.954 50.784 361.546 51.312 360.73 cv
51.84 359.914 52.104 358.762 52.104 357.274 cv
52.104 356.026 51.864 354.994 51.408 354.226 cv
50.928 353.458 50.232 353.05 49.296 353.05 cv
48.6 353.05 48 353.194 47.496 353.434 cv
46.992 353.674 46.536 354.202 46.104 355.018 cv
45.264 354.922 li
45.72 346.378 li
53.424 346.378 li
53.136 347.794 li
46.392 347.794 li
46.008 353.986 li
46.632 353.122 47.232 352.594 47.832 352.402 cv
48.408 352.21 49.032 352.114 49.68 352.114 cv
cp
f
62.2 288.548 mo
58.7 288.548 li
f
62.2 288.548 mo
58.7 288.548 li
@
7.944 288.774 mo
7.944 287.934 li
18.36 287.934 li
18.36 288.774 li
7.944 288.774 li
cp
f
26.04 280.446 mo
26.04 294.678 li
26.04 295.206 26.184 295.59 26.496 295.83 cv
26.808 296.07 27.24 296.19 27.816 296.19 cv
28.752 296.19 li
28.752 296.742 li
21.912 296.742 li
21.912 296.19 li
22.752 296.19 li
23.376 296.19 23.832 296.07 24.12 295.83 cv
24.408 295.59 24.552 295.206 24.552 294.678 cv
24.552 283.35 li
24.552 283.11 24.456 282.894 24.312 282.75 cv
24.144 282.606 23.904 282.51 23.616 282.51 cv
21.912 282.51 li
21.912 281.934 li
22.752 281.934 li
23.496 281.934 24.096 281.814 24.576 281.574 cv
25.056 281.334 25.416 280.95 25.68 280.446 cv
26.04 280.446 li
cp
f
34.2 297.03 mo
33.816 297.03 33.504 296.91 33.216 296.67 cv
32.928 296.43 32.784 296.07 32.784 295.638 cv
32.784 295.206 32.928 294.846 33.216 294.606 cv
33.504 294.366 33.816 294.222 34.2 294.222 cv
34.56 294.222 34.896 294.366 35.184 294.654 cv
35.472 294.942 35.616 295.254 35.616 295.614 cv
35.616 296.07 35.472 296.43 35.184 296.67 cv
34.896 296.91 34.56 297.03 34.2 297.03 cv
cp
f
49.2 281.286 mo
48.312 281.286 47.568 281.958 46.992 283.302 cv
46.392 284.646 46.104 286.446 46.104 288.678 cv
46.104 291.078 46.392 292.926 46.992 294.222 cv
47.568 295.542 48.336 296.19 49.248 296.19 cv
50.16 296.19 50.88 295.542 51.408 294.222 cv
51.936 292.926 52.2 291.078 52.2 288.678 cv
52.2 286.446 51.936 284.646 51.456 283.302 cv
50.952 281.958 50.208 281.286 49.2 281.286 cv
cp
49.2 296.934 mo
47.808 296.934 46.656 296.214 45.72 294.774 cv
44.784 293.334 44.328 291.318 44.328 288.678 cv
44.328 286.254 44.76 284.286 45.672 282.798 cv
46.584 281.31 47.76 280.542 49.2 280.542 cv
50.568 280.542 51.696 281.262 52.608 282.702 cv
53.52 284.142 53.976 286.134 53.976 288.702 cv
53.976 291.27 53.52 293.286 52.608 294.75 cv
51.696 296.214 50.568 296.934 49.2 296.934 cv
cp
f
62.2 222.88 mo
58.7 222.88 li
f
62.2 222.88 mo
58.7 222.88 li
@
7.944 223.106 mo
7.944 222.266 li
18.36 222.266 li
18.36 223.106 li
7.944 223.106 li
cp
f
25.2 215.618 mo
24.312 215.618 23.568 216.29 22.992 217.634 cv
22.392 218.978 22.104 220.778 22.104 223.01 cv
22.104 225.41 22.392 227.258 22.992 228.554 cv
23.568 229.874 24.336 230.522 25.248 230.522 cv
26.16 230.522 26.88 229.874 27.408 228.554 cv
27.936 227.258 28.2 225.41 28.2 223.01 cv
28.2 220.778 27.936 218.978 27.456 217.634 cv
26.952 216.29 26.208 215.618 25.2 215.618 cv
cp
25.2 231.266 mo
23.808 231.266 22.656 230.546 21.72 229.106 cv
20.784 227.666 20.328 225.65 20.328 223.01 cv
20.328 220.586 20.76 218.618 21.672 217.13 cv
22.584 215.642 23.76 214.874 25.2 214.874 cv
26.568 214.874 27.696 215.594 28.608 217.034 cv
29.52 218.474 29.976 220.466 29.976 223.034 cv
29.976 225.602 29.52 227.618 28.608 229.082 cv
27.696 230.546 26.568 231.266 25.2 231.266 cv
cp
f
34.2 231.362 mo
33.816 231.362 33.504 231.242 33.216 231.002 cv
32.928 230.762 32.784 230.402 32.784 229.97 cv
32.784 229.538 32.928 229.178 33.216 228.938 cv
33.504 228.698 33.816 228.554 34.2 228.554 cv
34.56 228.554 34.896 228.698 35.184 228.986 cv
35.472 229.274 35.616 229.586 35.616 229.946 cv
35.616 230.402 35.472 230.762 35.184 231.002 cv
34.896 231.242 34.56 231.362 34.2 231.362 cv
cp
f
49.68 220.778 mo
50.856 220.778 51.816 221.234 52.584 222.146 cv
53.328 223.058 53.712 224.258 53.712 225.746 cv
53.712 227.426 53.304 228.77 52.536 229.778 cv
51.744 230.786 50.544 231.266 48.912 231.266 cv
47.784 231.266 46.776 230.954 45.912 230.282 cv
45.048 229.634 44.616 228.842 44.616 227.906 cv
44.616 227.522 44.712 227.21 44.928 226.922 cv
45.144 226.634 45.432 226.49 45.816 226.49 cv
46.2 226.49 46.44 226.634 46.56 226.874 cv
46.68 227.114 46.752 227.33 46.752 227.522 cv
46.752 227.906 46.656 228.17 46.488 228.362 cv
46.296 228.626 46.2 228.866 46.2 229.106 cv
46.2 229.634 46.488 230.018 47.088 230.258 cv
47.664 230.498 48.312 230.618 49.008 230.618 cv
50.016 230.618 50.784 230.21 51.312 229.394 cv
51.84 228.578 52.104 227.426 52.104 225.938 cv
52.104 224.69 51.864 223.658 51.408 222.89 cv
50.928 222.122 50.232 221.714 49.296 221.714 cv
48.6 221.714 48 221.858 47.496 222.098 cv
46.992 222.338 46.536 222.866 46.104 223.682 cv
45.264 223.586 li
45.72 215.042 li
53.424 215.042 li
53.136 216.458 li
46.392 216.458 li
46.008 222.65 li
46.632 221.786 47.232 221.258 47.832 221.066 cv
48.408 220.874 49.032 220.778 49.68 220.778 cv
cp
f
62.2 157.212 mo
58.7 157.212 li
f
62.2 157.212 mo
58.7 157.212 li
@
25.2 149.951 mo
24.312 149.951 23.568 150.623 22.992 151.967 cv
22.392 153.311 22.104 155.111 22.104 157.343 cv
22.104 159.743 22.392 161.591 22.992 162.887 cv
23.568 164.207 24.336 164.855 25.248 164.855 cv
26.16 164.855 26.88 164.207 27.408 162.887 cv
27.936 161.591 28.2 159.743 28.2 157.343 cv
28.2 155.111 27.936 153.311 27.456 151.967 cv
26.952 150.623 26.208 149.951 25.2 149.951 cv
cp
25.2 165.599 mo
23.808 165.599 22.656 164.879 21.72 163.439 cv
20.784 161.999 20.328 159.983 20.328 157.343 cv
20.328 154.919 20.76 152.951 21.672 151.463 cv
22.584 149.975 23.76 149.207 25.2 149.207 cv
26.568 149.207 27.696 149.927 28.608 151.367 cv
29.52 152.807 29.976 154.799 29.976 157.367 cv
29.976 159.935 29.52 161.951 28.608 163.415 cv
27.696 164.879 26.568 165.599 25.2 165.599 cv
cp
f
34.2 165.695 mo
33.816 165.695 33.504 165.575 33.216 165.335 cv
32.928 165.095 32.784 164.735 32.784 164.303 cv
32.784 163.871 32.928 163.511 33.216 163.271 cv
33.504 163.031 33.816 162.887 34.2 162.887 cv
34.56 162.887 34.896 163.031 35.184 163.319 cv
35.472 163.607 35.616 163.919 35.616 164.279 cv
35.616 164.735 35.472 165.095 35.184 165.335 cv
34.896 165.575 34.56 165.695 34.2 165.695 cv
cp
f
49.2 149.951 mo
48.312 149.951 47.568 150.623 46.992 151.967 cv
46.392 153.311 46.104 155.111 46.104 157.343 cv
46.104 159.743 46.392 161.591 46.992 162.887 cv
47.568 164.207 48.336 164.855 49.248 164.855 cv
50.16 164.855 50.88 164.207 51.408 162.887 cv
51.936 161.591 52.2 159.743 52.2 157.343 cv
52.2 155.111 51.936 153.311 51.456 151.967 cv
50.952 150.623 50.208 149.951 49.2 149.951 cv
cp
49.2 165.599 mo
47.808 165.599 46.656 164.879 45.72 163.439 cv
44.784 161.999 44.328 159.983 44.328 157.343 cv
44.328 154.919 44.76 152.951 45.672 151.463 cv
46.584 149.975 47.76 149.207 49.2 149.207 cv
50.568 149.207 51.696 149.927 52.608 151.367 cv
53.52 152.807 53.976 154.799 53.976 157.367 cv
53.976 159.935 53.52 161.951 52.608 163.415 cv
51.696 164.879 50.568 165.599 49.2 165.599 cv
cp
f
62.2 91.5446 mo
58.7 91.5446 li
f
62.2 91.5446 mo
58.7 91.5446 li
@
25.2 84.2827 mo
24.312 84.2827 23.568 84.9547 22.992 86.2987 cv
22.392 87.6427 22.104 89.4427 22.104 91.6747 cv
22.104 94.0747 22.392 95.9227 22.992 97.2187 cv
23.568 98.5387 24.336 99.1867 25.248 99.1867 cv
26.16 99.1867 26.88 98.5387 27.408 97.2187 cv
27.936 95.9227 28.2 94.0747 28.2 91.6747 cv
28.2 89.4427 27.936 87.6427 27.456 86.2987 cv
26.952 84.9547 26.208 84.2827 25.2 84.2827 cv
cp
25.2 99.9307 mo
23.808 99.9307 22.656 99.2107 21.72 97.7707 cv
20.784 96.3307 20.328 94.3147 20.328 91.6747 cv
20.328 89.2507 20.76 87.2827 21.672 85.7947 cv
22.584 84.3067 23.76 83.5387 25.2 83.5387 cv
26.568 83.5387 27.696 84.2587 28.608 85.6987 cv
29.52 87.1387 29.976 89.1307 29.976 91.6987 cv
29.976 94.2667 29.52 96.2827 28.608 97.7467 cv
27.696 99.2107 26.568 99.9307 25.2 99.9307 cv
cp
f
34.2 100.027 mo
33.816 100.027 33.504 99.9067 33.216 99.6667 cv
32.928 99.4267 32.784 99.0667 32.784 98.6347 cv
32.784 98.2027 32.928 97.8427 33.216 97.6027 cv
33.504 97.3627 33.816 97.2187 34.2 97.2187 cv
34.56 97.2187 34.896 97.3627 35.184 97.6507 cv
35.472 97.9387 35.616 98.2507 35.616 98.6107 cv
35.616 99.0667 35.472 99.4267 35.184 99.6667 cv
34.896 99.9067 34.56 100.027 34.2 100.027 cv
cp
f
49.68 89.4427 mo
50.856 89.4427 51.816 89.8987 52.584 90.8107 cv
53.328 91.7227 53.712 92.9227 53.712 94.4107 cv
53.712 96.0907 53.304 97.4347 52.536 98.4427 cv
51.744 99.4507 50.544 99.9307 48.912 99.9307 cv
47.784 99.9307 46.776 99.6187 45.912 98.9467 cv
45.048 98.2987 44.616 97.5067 44.616 96.5707 cv
44.616 96.1867 44.712 95.8747 44.928 95.5867 cv
45.144 95.2987 45.432 95.1547 45.816 95.1547 cv
46.2 95.1547 46.44 95.2987 46.56 95.5387 cv
46.68 95.7787 46.752 95.9947 46.752 96.1867 cv
46.752 96.5707 46.656 96.8347 46.488 97.0267 cv
46.296 97.2907 46.2 97.5307 46.2 97.7707 cv
46.2 98.2987 46.488 98.6827 47.088 98.9227 cv
47.664 99.1627 48.312 99.2827 49.008 99.2827 cv
50.016 99.2827 50.784 98.8747 51.312 98.0587 cv
51.84 97.2427 52.104 96.0907 52.104 94.6027 cv
52.104 93.3547 51.864 92.3227 51.408 91.5547 cv
50.928 90.7867 50.232 90.3787 49.296 90.3787 cv
48.6 90.3787 48 90.5227 47.496 90.7627 cv
46.992 91.0027 46.536 91.5307 46.104 92.3467 cv
45.264 92.2507 li
45.72 83.7067 li
53.424 83.7067 li
53.136 85.1227 li
46.392 85.1227 li
46.008 91.3147 li
46.632 90.4507 47.232 89.9227 47.832 89.7307 cv
48.408 89.5387 49.032 89.4427 49.68 89.4427 cv
cp
f
62.2 25.8768 mo
58.7 25.8768 li
f
62.2 25.8768 mo
58.7 25.8768 li
@
26.04 17.7749 mo
26.04 32.0069 li
26.04 32.5349 26.184 32.9189 26.496 33.1589 cv
26.808 33.3989 27.24 33.5189 27.816 33.5189 cv
28.752 33.5189 li
28.752 34.0709 li
21.912 34.0709 li
21.912 33.5189 li
22.752 33.5189 li
23.376 33.5189 23.832 33.3989 24.12 33.1589 cv
24.408 32.9189 24.552 32.5349 24.552 32.0069 cv
24.552 20.6789 li
24.552 20.4389 24.456 20.2229 24.312 20.0789 cv
24.144 19.9349 23.904 19.8389 23.616 19.8389 cv
21.912 19.8389 li
21.912 19.2629 li
22.752 19.2629 li
23.496 19.2629 24.096 19.1429 24.576 18.9029 cv
25.056 18.6629 25.416 18.2789 25.68 17.7749 cv
26.04 17.7749 li
cp
f
34.2 34.3589 mo
33.816 34.3589 33.504 34.2389 33.216 33.9989 cv
32.928 33.7589 32.784 33.3989 32.784 32.9669 cv
32.784 32.5349 32.928 32.1749 33.216 31.9349 cv
33.504 31.6949 33.816 31.5509 34.2 31.5509 cv
34.56 31.5509 34.896 31.6949 35.184 31.9829 cv
35.472 32.2709 35.616 32.5829 35.616 32.9429 cv
35.616 33.3989 35.472 33.7589 35.184 33.9989 cv
34.896 34.2389 34.56 34.3589 34.2 34.3589 cv
cp
f
49.2 18.6149 mo
48.312 18.6149 47.568 19.2869 46.992 20.6309 cv
46.392 21.9749 46.104 23.7749 46.104 26.0069 cv
46.104 28.4069 46.392 30.2549 46.992 31.5509 cv
47.568 32.8709 48.336 33.5189 49.248 33.5189 cv
50.16 33.5189 50.88 32.8709 51.408 31.5509 cv
51.936 30.2549 52.2 28.4069 52.2 26.0069 cv
52.2 23.7749 51.936 21.9749 51.456 20.6309 cv
50.952 19.2869 50.208 18.6149 49.2 18.6149 cv
cp
49.2 34.2629 mo
47.808 34.2629 46.656 33.5429 45.72 32.1029 cv
44.784 30.6629 44.328 28.6469 44.328 26.0069 cv
44.328 23.5829 44.76 21.6149 45.672 20.1269 cv
46.584 18.6389 47.76 17.8709 49.2 17.8709 cv
50.568 17.8709 51.696 18.5909 52.608 20.0309 cv
53.52 21.4709 53.976 23.4629 53.976 26.0309 cv
53.976 28.5989 53.52 30.6149 52.608 32.0789 cv
51.696 33.5429 50.568 34.2629 49.2 34.2629 cv
cp
f
1.5 lw
2 lc
82.4909 255.152 mo
90.7729 258.732 li
99.0549 262.311 li
107.337 265.891 li
115.619 269.471 li
123.901 273.051 li
132.183 276.63 li
140.465 280.21 li
148.747 283.79 li
157.029 287.37 li
165.311 290.95 li
173.593 294.529 li
181.875 298.109 li
190.157 301.689 li
198.439 305.269 li
206.721 308.848 li
215.003 312.428 li
223.285 316.008 li
231.567 319.588 li
239.849 323.167 li
248.131 326.747 li
256.413 330.327 li
264.695 333.907 li
272.977 337.486 li
281.259 341.066 li
289.541 344.646 li
297.823 348.226 li
306.105 351.805 li
314.387 355.385 li
322.669 358.965 li
330.951 362.545 li
339.233 366.124 li
347.515 369.704 li
355.797 373.284 li
364.079 376.864 li
372.361 380.443 li
380.643 384.023 li
388.925 387.603 li
397.207 391.183 li
405.489 394.762 li
413.771 398.342 li
422.053 401.922 li
430.335 405.502 li
438.617 409.081 li
446.899 412.661 li
455.181 416.241 li
463.463 419.821 li
471.745 423.401 li
480.027 426.98 li
488.309 430.56 li
/1 
[/DeviceCMYK] /CSA add_res
.817868 .452186 .0811475 0 cmyk
@
92.985 155.342 mo
93.7806 155.342 94.5437 155.026 95.1063 154.463 cv
95.6689 153.901 95.985 153.138 95.985 152.342 cv
95.985 151.546 95.6689 150.783 95.1063 150.221 cv
94.5437 149.658 93.7806 149.342 92.985 149.342 cv
92.1894 149.342 91.4263 149.658 90.8637 150.221 cv
90.3011 150.783 89.985 151.546 89.985 152.342 cv
89.985 153.138 90.3011 153.901 90.8637 154.463 cv
91.4263 155.026 92.1894 155.342 92.985 155.342 cv
cp
f
1 lw
0 lc
92.985 155.342 mo
93.7806 155.342 94.5437 155.026 95.1063 154.463 cv
95.6689 153.901 95.985 153.138 95.985 152.342 cv
95.985 151.546 95.6689 150.783 95.1063 150.221 cv
94.5437 149.658 93.7806 149.342 92.985 149.342 cv
92.1894 149.342 91.4263 149.658 90.8637 150.221 cv
90.3011 150.783 89.985 151.546 89.985 152.342 cv
89.985 153.138 90.3011 153.901 90.8637 154.463 cv
91.4263 155.026 92.1894 155.342 92.985 155.342 cv
cp
@
245.399 134.089 mo
246.195 134.089 246.958 133.773 247.52 133.21 cv
248.083 132.648 248.399 131.885 248.399 131.089 cv
248.399 130.293 248.083 129.53 247.52 128.968 cv
246.958 128.405 246.195 128.089 245.399 128.089 cv
244.603 128.089 243.84 128.405 243.278 128.968 cv
242.715 129.53 242.399 130.293 242.399 131.089 cv
242.399 131.885 242.715 132.648 243.278 133.21 cv
243.84 133.773 244.603 134.089 245.399 134.089 cv
cp
f
245.399 134.089 mo
246.195 134.089 246.958 133.773 247.52 133.21 cv
248.083 132.648 248.399 131.885 248.399 131.089 cv
248.399 130.293 248.083 129.53 247.52 128.968 cv
246.958 128.405 246.195 128.089 245.399 128.089 cv
244.603 128.089 243.84 128.405 243.278 128.968 cv
242.715 129.53 242.399 130.293 242.399 131.089 cv
242.399 131.885 242.715 132.648 243.278 133.21 cv
243.84 133.773 244.603 134.089 245.399 134.089 cv
cp
@
432.513 90.0661 mo
433.308 90.0661 434.071 89.75 434.634 89.1875 cv
435.197 88.6249 435.513 87.8617 435.513 87.0661 cv
435.513 86.2705 435.197 85.5074 434.634 84.9448 cv
434.071 84.3822 433.308 84.0661 432.513 84.0661 cv
431.717 84.0661 430.954 84.3822 430.391 84.9448 cv
429.829 85.5074 429.513 86.2705 429.513 87.0661 cv
429.513 87.8617 429.829 88.6249 430.391 89.1875 cv
430.954 89.75 431.717 90.0661 432.513 90.0661 cv
cp
f
432.513 90.0661 mo
433.308 90.0661 434.071 89.75 434.634 89.1875 cv
435.197 88.6249 435.513 87.8617 435.513 87.0661 cv
435.513 86.2705 435.197 85.5074 434.634 84.9448 cv
434.071 84.3822 433.308 84.0661 432.513 84.0661 cv
431.717 84.0661 430.954 84.3822 430.391 84.9448 cv
429.829 85.5074 429.513 86.2705 429.513 87.0661 cv
429.513 87.8617 429.829 88.6249 430.391 89.1875 cv
430.954 89.75 431.717 90.0661 432.513 90.0661 cv
cp
@
449.159 105.122 mo
449.955 105.122 450.718 104.806 451.281 104.243 cv
451.843 103.681 452.159 102.918 452.159 102.122 cv
452.159 101.326 451.843 100.563 451.281 100.001 cv
450.718 99.4382 449.955 99.1221 449.159 99.1221 cv
448.364 99.1221 447.601 99.4382 447.038 100.001 cv
446.475 100.563 446.159 101.326 446.159 102.122 cv
446.159 102.918 446.475 103.681 447.038 104.243 cv
447.601 104.806 448.364 105.122 449.159 105.122 cv
cp
f
449.159 105.122 mo
449.955 105.122 450.718 104.806 451.281 104.243 cv
451.843 103.681 452.159 102.918 452.159 102.122 cv
452.159 101.326 451.843 100.563 451.281 100.001 cv
450.718 99.4382 449.955 99.1221 449.159 99.1221 cv
448.364 99.1221 447.601 99.4382 447.038 100.001 cv
446.475 100.563 446.159 101.326 446.159 102.122 cv
446.159 102.918 446.475 103.681 447.038 104.243 cv
447.601 104.806 448.364 105.122 449.159 105.122 cv
cp
@
386.272 114.596 mo
387.067 114.596 387.831 114.28 388.393 113.717 cv
388.956 113.155 389.272 112.392 389.272 111.596 cv
389.272 110.801 388.956 110.037 388.393 109.475 cv
387.831 108.912 387.067 108.596 386.272 108.596 cv
385.476 108.596 384.713 108.912 384.15 109.475 cv
383.588 110.037 383.272 110.801 383.272 111.596 cv
383.272 112.392 383.588 113.155 384.15 113.717 cv
384.713 114.28 385.476 114.596 386.272 114.596 cv
cp
f
386.272 114.596 mo
387.067 114.596 387.831 114.28 388.393 113.717 cv
388.956 113.155 389.272 112.392 389.272 111.596 cv
389.272 110.801 388.956 110.037 388.393 109.475 cv
387.831 108.912 387.067 108.596 386.272 108.596 cv
385.476 108.596 384.713 108.912 384.15 109.475 cv
383.588 110.037 383.272 110.801 383.272 111.596 cv
383.272 112.392 383.588 113.155 384.15 113.717 cv
384.713 114.28 385.476 114.596 386.272 114.596 cv
cp
@
356.583 77.2971 mo
357.379 77.2971 358.142 76.981 358.705 76.4184 cv
359.267 75.8558 359.583 75.0927 359.583 74.2971 cv
359.583 73.5014 359.267 72.7383 358.705 72.1757 cv
358.142 71.6132 357.379 71.2971 356.583 71.2971 cv
355.788 71.2971 355.025 71.6132 354.462 72.1757 cv
353.899 72.7383 353.583 73.5014 353.583 74.2971 cv
353.583 75.0927 353.899 75.8558 354.462 76.4184 cv
355.025 76.981 355.788 77.2971 356.583 77.2971 cv
cp
f
356.583 77.2971 mo
357.379 77.2971 358.142 76.981 358.705 76.4184 cv
359.267 75.8558 359.583 75.0927 359.583 74.2971 cv
359.583 73.5014 359.267 72.7383 358.705 72.1757 cv
358.142 71.6132 357.379 71.2971 356.583 71.2971 cv
355.788 71.2971 355.025 71.6132 354.462 72.1757 cv
353.899 72.7383 353.583 73.5014 353.583 74.2971 cv
353.583 75.0927 353.899 75.8558 354.462 76.4184 cv
355.025 76.981 355.788 77.2971 356.583 77.2971 cv
cp
@
210.075 157.363 mo
210.871 157.363 211.634 157.047 212.196 156.484 cv
212.759 155.921 213.075 155.158 213.075 154.363 cv
213.075 153.567 212.759 152.804 212.196 152.241 cv
211.634 151.679 210.871 151.363 210.075 151.363 cv
209.279 151.363 208.516 151.679 207.954 152.241 cv
207.391 152.804 207.075 153.567 207.075 154.363 cv
207.075 155.158 207.391 155.921 207.954 156.484 cv
208.516 157.047 209.279 157.363 210.075 157.363 cv
cp
f
210.075 157.363 mo
210.871 157.363 211.634 157.047 212.196 156.484 cv
212.759 155.921 213.075 155.158 213.075 154.363 cv
213.075 153.567 212.759 152.804 212.196 152.241 cv
211.634 151.679 210.871 151.363 210.075 151.363 cv
209.279 151.363 208.516 151.679 207.954 152.241 cv
207.391 152.804 207.075 153.567 207.075 154.363 cv
207.075 155.158 207.391 155.921 207.954 156.484 cv
208.516 157.047 209.279 157.363 210.075 157.363 cv
cp
@
348.29 139.892 mo
349.085 139.892 349.849 139.576 350.411 139.013 cv
350.974 138.451 351.29 137.688 351.29 136.892 cv
351.29 136.096 350.974 135.333 350.411 134.771 cv
349.849 134.208 349.085 133.892 348.29 133.892 cv
347.494 133.892 346.731 134.208 346.168 134.771 cv
345.606 135.333 345.29 136.096 345.29 136.892 cv
345.29 137.688 345.606 138.451 346.168 139.013 cv
346.731 139.576 347.494 139.892 348.29 139.892 cv
cp
f
348.29 139.892 mo
349.085 139.892 349.849 139.576 350.411 139.013 cv
350.974 138.451 351.29 137.688 351.29 136.892 cv
351.29 136.096 350.974 135.333 350.411 134.771 cv
349.849 134.208 349.085 133.892 348.29 133.892 cv
347.494 133.892 346.731 134.208 346.168 134.771 cv
345.606 135.333 345.29 136.096 345.29 136.892 cv
345.29 137.688 345.606 138.451 346.168 139.013 cv
346.731 139.576 347.494 139.892 348.29 139.892 cv
cp
@
86.7831 108.547 mo
87.5788 108.547 88.3419 108.231 88.9045 107.669 cv
89.467 107.106 89.7831 106.343 89.7831 105.547 cv
89.7831 104.752 89.467 103.988 88.9045 103.426 cv
88.3419 102.863 87.5788 102.547 86.7831 102.547 cv
85.9875 102.547 85.2244 102.863 84.6618 103.426 cv
84.0992 103.988 83.7831 104.752 83.7831 105.547 cv
83.7831 106.343 84.0992 107.106 84.6618 107.669 cv
85.2244 108.231 85.9875 108.547 86.7831 108.547 cv
cp
f
86.7831 108.547 mo
87.5788 108.547 88.3419 108.231 88.9045 107.669 cv
89.467 107.106 89.7831 106.343 89.7831 105.547 cv
89.7831 104.752 89.467 103.988 88.9045 103.426 cv
88.3419 102.863 87.5788 102.547 86.7831 102.547 cv
85.9875 102.547 85.2244 102.863 84.6618 103.426 cv
84.0992 103.988 83.7831 104.752 83.7831 105.547 cv
83.7831 106.343 84.0992 107.106 84.6618 107.669 cv
85.2244 108.231 85.9875 108.547 86.7831 108.547 cv
cp
@
310.497 60.3408 mo
311.292 60.3408 312.055 60.0247 312.618 59.4621 cv
313.18 58.8996 313.497 58.1364 313.497 57.3408 cv
313.497 56.5452 313.18 55.7821 312.618 55.2195 cv
312.055 54.6569 311.292 54.3408 310.497 54.3408 cv
309.701 54.3408 308.938 54.6569 308.375 55.2195 cv
307.813 55.7821 307.497 56.5452 307.497 57.3408 cv
307.497 58.1364 307.813 58.8996 308.375 59.4621 cv
308.938 60.0247 309.701 60.3408 310.497 60.3408 cv
cp
f
310.497 60.3408 mo
311.292 60.3408 312.055 60.0247 312.618 59.4621 cv
313.18 58.8996 313.497 58.1364 313.497 57.3408 cv
313.497 56.5452 313.18 55.7821 312.618 55.2195 cv
312.055 54.6569 311.292 54.3408 310.497 54.3408 cv
309.701 54.3408 308.938 54.6569 308.375 55.2195 cv
307.813 55.7821 307.497 56.5452 307.497 57.3408 cv
307.497 58.1364 307.813 58.8996 308.375 59.4621 cv
308.938 60.0247 309.701 60.3408 310.497 60.3408 cv
cp
@
409.629 146.971 mo
410.425 146.971 411.188 146.655 411.75 146.092 cv
412.313 145.53 412.629 144.767 412.629 143.971 cv
412.629 143.176 412.313 142.412 411.75 141.85 cv
411.188 141.287 410.425 140.971 409.629 140.971 cv
408.833 140.971 408.07 141.287 407.508 141.85 cv
406.945 142.412 406.629 143.176 406.629 143.971 cv
406.629 144.767 406.945 145.53 407.508 146.092 cv
408.07 146.655 408.833 146.971 409.629 146.971 cv
cp
f
409.629 146.971 mo
410.425 146.971 411.188 146.655 411.75 146.092 cv
412.313 145.53 412.629 144.767 412.629 143.971 cv
412.629 143.176 412.313 142.412 411.75 141.85 cv
411.188 141.287 410.425 140.971 409.629 140.971 cv
408.833 140.971 408.07 141.287 407.508 141.85 cv
406.945 142.412 406.629 143.176 406.629 143.971 cv
406.629 144.767 406.945 145.53 407.508 146.092 cv
408.07 146.655 408.833 146.971 409.629 146.971 cv
cp
@
323.588 149.128 mo
324.383 149.128 325.147 148.812 325.709 148.25 cv
326.272 147.687 326.588 146.924 326.588 146.128 cv
326.588 145.333 326.272 144.57 325.709 144.007 cv
325.147 143.444 324.383 143.128 323.588 143.128 cv
322.792 143.128 322.029 143.444 321.466 144.007 cv
320.904 144.57 320.588 145.333 320.588 146.128 cv
320.588 146.924 320.904 147.687 321.466 148.25 cv
322.029 148.812 322.792 149.128 323.588 149.128 cv
cp
f
323.588 149.128 mo
324.383 149.128 325.147 148.812 325.709 148.25 cv
326.272 147.687 326.588 146.924 326.588 146.128 cv
326.588 145.333 326.272 144.57 325.709 144.007 cv
325.147 143.444 324.383 143.128 323.588 143.128 cv
322.792 143.128 322.029 143.444 321.466 144.007 cv
320.904 144.57 320.588 145.333 320.588 146.128 cv
320.588 146.924 320.904 147.687 321.466 148.25 cv
322.029 148.812 322.792 149.128 323.588 149.128 cv
cp
@
240.937 91.5822 mo
241.732 91.5822 242.495 91.2661 243.058 90.7035 cv
243.621 90.1409 243.937 89.3778 243.937 88.5822 cv
243.937 87.7866 243.621 87.0234 243.058 86.4609 cv
242.495 85.8983 241.732 85.5822 240.937 85.5822 cv
240.141 85.5822 239.378 85.8983 238.815 86.4609 cv
238.253 87.0234 237.937 87.7866 237.937 88.5822 cv
237.937 89.3778 238.253 90.1409 238.815 90.7035 cv
239.378 91.2661 240.141 91.5822 240.937 91.5822 cv
cp
f
240.937 91.5822 mo
241.732 91.5822 242.495 91.2661 243.058 90.7035 cv
243.621 90.1409 243.937 89.3778 243.937 88.5822 cv
243.937 87.7866 243.621 87.0234 243.058 86.4609 cv
242.495 85.8983 241.732 85.5822 240.937 85.5822 cv
240.141 85.5822 239.378 85.8983 238.815 86.4609 cv
238.253 87.0234 237.937 87.7866 237.937 88.5822 cv
237.937 89.3778 238.253 90.1409 238.815 90.7035 cv
239.378 91.2661 240.141 91.5822 240.937 91.5822 cv
cp
@
104.823 126.278 mo
105.619 126.278 106.382 125.962 106.944 125.4 cv
107.507 124.837 107.823 124.074 107.823 123.278 cv
107.823 122.483 107.507 121.72 106.944 121.157 cv
106.382 120.594 105.619 120.278 104.823 120.278 cv
104.028 120.278 103.264 120.594 102.702 121.157 cv
102.139 121.72 101.823 122.483 101.823 123.278 cv
101.823 124.074 102.139 124.837 102.702 125.4 cv
103.264 125.962 104.028 126.278 104.823 126.278 cv
cp
f
104.823 126.278 mo
105.619 126.278 106.382 125.962 106.944 125.4 cv
107.507 124.837 107.823 124.074 107.823 123.278 cv
107.823 122.483 107.507 121.72 106.944 121.157 cv
106.382 120.594 105.619 120.278 104.823 120.278 cv
104.028 120.278 103.264 120.594 102.702 121.157 cv
102.139 121.72 101.823 122.483 101.823 123.278 cv
101.823 124.074 102.139 124.837 102.702 125.4 cv
103.264 125.962 104.028 126.278 104.823 126.278 cv
cp
@
221.653 60.3225 mo
222.448 60.3225 223.211 60.0064 223.774 59.4439 cv
224.337 58.8813 224.653 58.1181 224.653 57.3225 cv
224.653 56.5269 224.337 55.7638 223.774 55.2012 cv
223.211 54.6386 222.448 54.3225 221.653 54.3225 cv
220.857 54.3225 220.094 54.6386 219.531 55.2012 cv
218.969 55.7638 218.653 56.5269 218.653 57.3225 cv
218.653 58.1181 218.969 58.8813 219.531 59.4439 cv
220.094 60.0064 220.857 60.3225 221.653 60.3225 cv
cp
f
221.653 60.3225 mo
222.448 60.3225 223.211 60.0064 223.774 59.4439 cv
224.337 58.8813 224.653 58.1181 224.653 57.3225 cv
224.653 56.5269 224.337 55.7638 223.774 55.2012 cv
223.211 54.6386 222.448 54.3225 221.653 54.3225 cv
220.857 54.3225 220.094 54.6386 219.531 55.2012 cv
218.969 55.7638 218.653 56.5269 218.653 57.3225 cv
218.653 58.1181 218.969 58.8813 219.531 59.4439 cv
220.094 60.0064 220.857 60.3225 221.653 60.3225 cv
cp
@
261.677 72.0424 mo
262.472 72.0424 263.236 71.7263 263.798 71.1637 cv
264.361 70.6011 264.677 69.838 264.677 69.0424 cv
264.677 68.2467 264.361 67.4836 263.798 66.921 cv
263.236 66.3585 262.472 66.0424 261.677 66.0424 cv
260.881 66.0424 260.118 66.3585 259.556 66.921 cv
258.993 67.4836 258.677 68.2467 258.677 69.0424 cv
258.677 69.838 258.993 70.6011 259.556 71.1637 cv
260.118 71.7263 260.881 72.0424 261.677 72.0424 cv
cp
f
261.677 72.0424 mo
262.472 72.0424 263.236 71.7263 263.798 71.1637 cv
264.361 70.6011 264.677 69.838 264.677 69.0424 cv
264.677 68.2467 264.361 67.4836 263.798 66.921 cv
263.236 66.3585 262.472 66.0424 261.677 66.0424 cv
260.881 66.0424 260.118 66.3585 259.556 66.921 cv
258.993 67.4836 258.677 68.2467 258.677 69.0424 cv
258.677 69.838 258.993 70.6011 259.556 71.1637 cv
260.118 71.7263 260.881 72.0424 261.677 72.0424 cv
cp
@
439.893 97.1058 mo
440.689 97.1058 441.452 96.7897 442.014 96.2271 cv
442.577 95.6645 442.893 94.9014 442.893 94.1058 cv
442.893 93.3102 442.577 92.5471 442.014 91.9845 cv
441.452 91.4219 440.689 91.1058 439.893 91.1058 cv
439.097 91.1058 438.334 91.4219 437.772 91.9845 cv
437.209 92.5471 436.893 93.3102 436.893 94.1058 cv
436.893 94.9014 437.209 95.6645 437.772 96.2271 cv
438.334 96.7897 439.097 97.1058 439.893 97.1058 cv
cp
f
439.893 97.1058 mo
440.689 97.1058 441.452 96.7897 442.014 96.2271 cv
442.577 95.6645 442.893 94.9014 442.893 94.1058 cv
442.893 93.3102 442.577 92.5471 442.014 91.9845 cv
441.452 91.4219 440.689 91.1058 439.893 91.1058 cv
439.097 91.1058 438.334 91.4219 437.772 91.9845 cv
437.209 92.5471 436.893 93.3102 436.893 94.1058 cv
436.893 94.9014 437.209 95.6645 437.772 96.2271 cv
438.334 96.7897 439.097 97.1058 439.893 97.1058 cv
cp
@
227.065 135.944 mo
227.861 135.944 228.624 135.628 229.187 135.065 cv
229.749 134.503 230.065 133.74 230.065 132.944 cv
230.065 132.148 229.749 131.385 229.187 130.823 cv
228.624 130.26 227.861 129.944 227.065 129.944 cv
226.27 129.944 225.507 130.26 224.944 130.823 cv
224.382 131.385 224.065 132.148 224.065 132.944 cv
224.065 133.74 224.382 134.503 224.944 135.065 cv
225.507 135.628 226.27 135.944 227.065 135.944 cv
cp
f
227.065 135.944 mo
227.861 135.944 228.624 135.628 229.187 135.065 cv
229.749 134.503 230.065 133.74 230.065 132.944 cv
230.065 132.148 229.749 131.385 229.187 130.823 cv
228.624 130.26 227.861 129.944 227.065 129.944 cv
226.27 129.944 225.507 130.26 224.944 130.823 cv
224.382 131.385 224.065 132.148 224.065 132.944 cv
224.065 133.74 224.382 134.503 224.944 135.065 cv
225.507 135.628 226.27 135.944 227.065 135.944 cv
cp
@
484.628 136.098 mo
485.424 136.098 486.187 135.781 486.749 135.219 cv
487.312 134.656 487.628 133.893 487.628 133.098 cv
487.628 132.302 487.312 131.539 486.749 130.976 cv
486.187 130.414 485.424 130.098 484.628 130.098 cv
483.833 130.098 483.069 130.414 482.507 130.976 cv
481.944 131.539 481.628 132.302 481.628 133.098 cv
481.628 133.893 481.944 134.656 482.507 135.219 cv
483.069 135.781 483.833 136.098 484.628 136.098 cv
cp
f
484.628 136.098 mo
485.424 136.098 486.187 135.781 486.749 135.219 cv
487.312 134.656 487.628 133.893 487.628 133.098 cv
487.628 132.302 487.312 131.539 486.749 130.976 cv
486.187 130.414 485.424 130.098 484.628 130.098 cv
483.833 130.098 483.069 130.414 482.507 130.976 cv
481.944 131.539 481.628 132.302 481.628 133.098 cv
481.628 133.893 481.944 134.656 482.507 135.219 cv
483.069 135.781 483.833 136.098 484.628 136.098 cv
cp
@
195.27 78.406 mo
196.065 78.406 196.829 78.0899 197.391 77.5273 cv
197.954 76.9647 198.27 76.2016 198.27 75.406 cv
198.27 74.6104 197.954 73.8473 197.391 73.2847 cv
196.829 72.7221 196.065 72.406 195.27 72.406 cv
194.474 72.406 193.711 72.7221 193.148 73.2847 cv
192.586 73.8473 192.27 74.6104 192.27 75.406 cv
192.27 76.2016 192.586 76.9647 193.148 77.5273 cv
193.711 78.0899 194.474 78.406 195.27 78.406 cv
cp
f
195.27 78.406 mo
196.065 78.406 196.829 78.0899 197.391 77.5273 cv
197.954 76.9647 198.27 76.2016 198.27 75.406 cv
198.27 74.6104 197.954 73.8473 197.391 73.2847 cv
196.829 72.7221 196.065 72.406 195.27 72.406 cv
194.474 72.406 193.711 72.7221 193.148 73.2847 cv
192.586 73.8473 192.27 74.6104 192.27 75.406 cv
192.27 76.2016 192.586 76.9647 193.148 77.5273 cv
193.711 78.0899 194.474 78.406 195.27 78.406 cv
cp
@
392.138 51.4783 mo
392.933 51.4783 393.696 51.1622 394.259 50.5996 cv
394.821 50.037 395.138 49.2739 395.138 48.4783 cv
395.138 47.6827 394.821 46.9196 394.259 46.357 cv
393.696 45.7944 392.933 45.4783 392.138 45.4783 cv
391.342 45.4783 390.579 45.7944 390.016 46.357 cv
389.454 46.9196 389.138 47.6827 389.138 48.4783 cv
389.138 49.2739 389.454 50.037 390.016 50.5996 cv
390.579 51.1622 391.342 51.4783 392.138 51.4783 cv
cp
f
392.138 51.4783 mo
392.933 51.4783 393.696 51.1622 394.259 50.5996 cv
394.821 50.037 395.138 49.2739 395.138 48.4783 cv
395.138 47.6827 394.821 46.9196 394.259 46.357 cv
393.696 45.7944 392.933 45.4783 392.138 45.4783 cv
391.342 45.4783 390.579 45.7944 390.016 46.357 cv
389.454 46.9196 389.138 47.6827 389.138 48.4783 cv
389.138 49.2739 389.454 50.037 390.016 50.5996 cv
390.579 51.1622 391.342 51.4783 392.138 51.4783 cv
cp
@
458.603 43.5421 mo
459.399 43.5421 460.162 43.226 460.724 42.6634 cv
461.287 42.1008 461.603 41.3377 461.603 40.5421 cv
461.603 39.7465 461.287 38.9833 460.724 38.4208 cv
460.162 37.8582 459.399 37.5421 458.603 37.5421 cv
457.807 37.5421 457.044 37.8582 456.482 38.4208 cv
455.919 38.9833 455.603 39.7465 455.603 40.5421 cv
455.603 41.3377 455.919 42.1008 456.482 42.6634 cv
457.044 43.226 457.807 43.5421 458.603 43.5421 cv
cp
f
458.603 43.5421 mo
459.399 43.5421 460.162 43.226 460.724 42.6634 cv
461.287 42.1008 461.603 41.3377 461.603 40.5421 cv
461.603 39.7465 461.287 38.9833 460.724 38.4208 cv
460.162 37.8582 459.399 37.5421 458.603 37.5421 cv
457.807 37.5421 457.044 37.8582 456.482 38.4208 cv
455.919 38.9833 455.603 39.7465 455.603 40.5421 cv
455.603 41.3377 455.919 42.1008 456.482 42.6634 cv
457.044 43.226 457.807 43.5421 458.603 43.5421 cv
cp
@
292.476 30.36 mo
293.272 30.36 294.035 30.0439 294.597 29.4814 cv
295.16 28.9188 295.476 28.1557 295.476 27.36 cv
295.476 26.5644 295.16 25.8013 294.597 25.2387 cv
294.035 24.6761 293.272 24.36 292.476 24.36 cv
291.68 24.36 290.917 24.6761 290.355 25.2387 cv
289.792 25.8013 289.476 26.5644 289.476 27.36 cv
289.476 28.1557 289.792 28.9188 290.355 29.4814 cv
290.917 30.0439 291.68 30.36 292.476 30.36 cv
cp
f
292.476 30.36 mo
293.272 30.36 294.035 30.0439 294.597 29.4814 cv
295.16 28.9188 295.476 28.1557 295.476 27.36 cv
295.476 26.5644 295.16 25.8013 294.597 25.2387 cv
294.035 24.6761 293.272 24.36 292.476 24.36 cv
291.68 24.36 290.917 24.6761 290.355 25.2387 cv
289.792 25.8013 289.476 26.5644 289.476 27.36 cv
289.476 28.1557 289.792 28.9188 290.355 29.4814 cv
290.917 30.0439 291.68 30.36 292.476 30.36 cv
cp
@
107.971 77.9129 mo
108.767 77.9129 109.53 77.5968 110.093 77.0342 cv
110.655 76.4716 110.971 75.7085 110.971 74.9129 cv
110.971 74.1173 110.655 73.3542 110.093 72.7916 cv
109.53 72.229 108.767 71.9129 107.971 71.9129 cv
107.176 71.9129 106.413 72.229 105.85 72.7916 cv
105.287 73.3542 104.971 74.1173 104.971 74.9129 cv
104.971 75.7085 105.287 76.4716 105.85 77.0342 cv
106.413 77.5968 107.176 77.9129 107.971 77.9129 cv
cp
f
107.971 77.9129 mo
108.767 77.9129 109.53 77.5968 110.093 77.0342 cv
110.655 76.4716 110.971 75.7085 110.971 74.9129 cv
110.971 74.1173 110.655 73.3542 110.093 72.7916 cv
109.53 72.229 108.767 71.9129 107.971 71.9129 cv
107.176 71.9129 106.413 72.229 105.85 72.7916 cv
105.287 73.3542 104.971 74.1173 104.971 74.9129 cv
104.971 75.7085 105.287 76.4716 105.85 77.0342 cv
106.413 77.5968 107.176 77.9129 107.971 77.9129 cv
cp
@
220.56 60.0922 mo
221.356 60.0922 222.119 59.7761 222.681 59.2135 cv
223.244 58.6509 223.56 57.8878 223.56 57.0922 cv
223.56 56.2966 223.244 55.5334 222.681 54.9708 cv
222.119 54.4083 221.356 54.0922 220.56 54.0922 cv
219.764 54.0922 219.001 54.4083 218.439 54.9708 cv
217.876 55.5334 217.56 56.2966 217.56 57.0922 cv
217.56 57.8878 217.876 58.6509 218.439 59.2135 cv
219.001 59.7761 219.764 60.0922 220.56 60.0922 cv
cp
f
220.56 60.0922 mo
221.356 60.0922 222.119 59.7761 222.681 59.2135 cv
223.244 58.6509 223.56 57.8878 223.56 57.0922 cv
223.56 56.2966 223.244 55.5334 222.681 54.9708 cv
222.119 54.4083 221.356 54.0922 220.56 54.0922 cv
219.764 54.0922 219.001 54.4083 218.439 54.9708 cv
217.876 55.5334 217.56 56.2966 217.56 57.0922 cv
217.56 57.8878 217.876 58.6509 218.439 59.2135 cv
219.001 59.7761 219.764 60.0922 220.56 60.0922 cv
cp
@
199.146 52.4747 mo
199.942 52.4747 200.705 52.1586 201.268 51.5961 cv
201.83 51.0335 202.146 50.2703 202.146 49.4747 cv
202.146 48.6791 201.83 47.916 201.268 47.3534 cv
200.705 46.7908 199.942 46.4747 199.146 46.4747 cv
198.351 46.4747 197.588 46.7908 197.025 47.3534 cv
196.462 47.916 196.146 48.6791 196.146 49.4747 cv
196.146 50.2703 196.462 51.0335 197.025 51.5961 cv
197.588 52.1586 198.351 52.4747 199.146 52.4747 cv
cp
f
199.146 52.4747 mo
199.942 52.4747 200.705 52.1586 201.268 51.5961 cv
201.83 51.0335 202.146 50.2703 202.146 49.4747 cv
202.146 48.6791 201.83 47.916 201.268 47.3534 cv
200.705 46.7908 199.942 46.4747 199.146 46.4747 cv
198.351 46.4747 197.588 46.7908 197.025 47.3534 cv
196.462 47.916 196.146 48.6791 196.146 49.4747 cv
196.146 50.2703 196.462 51.0335 197.025 51.5961 cv
197.588 52.1586 198.351 52.4747 199.146 52.4747 cv
cp
@
125.391 85.479 mo
126.186 85.479 126.949 85.1629 127.512 84.6004 cv
128.075 84.0378 128.391 83.2746 128.391 82.479 cv
128.391 81.6834 128.075 80.9203 127.512 80.3577 cv
126.949 79.7951 126.186 79.479 125.391 79.479 cv
124.595 79.479 123.832 79.7951 123.269 80.3577 cv
122.707 80.9203 122.391 81.6834 122.391 82.479 cv
122.391 83.2746 122.707 84.0378 123.269 84.6004 cv
123.832 85.1629 124.595 85.479 125.391 85.479 cv
cp
f
125.391 85.479 mo
126.186 85.479 126.949 85.1629 127.512 84.6004 cv
128.075 84.0378 128.391 83.2746 128.391 82.479 cv
128.391 81.6834 128.075 80.9203 127.512 80.3577 cv
126.949 79.7951 126.186 79.479 125.391 79.479 cv
124.595 79.479 123.832 79.7951 123.269 80.3577 cv
122.707 80.9203 122.391 81.6834 122.391 82.479 cv
122.391 83.2746 122.707 84.0378 123.269 84.6004 cv
123.832 85.1629 124.595 85.479 125.391 85.479 cv
cp
@
456.15 50.3127 mo
456.946 50.3127 457.709 49.9966 458.271 49.434 cv
458.834 48.8714 459.15 48.1083 459.15 47.3127 cv
459.15 46.517 458.834 45.7539 458.271 45.1913 cv
457.709 44.6287 456.946 44.3127 456.15 44.3127 cv
455.355 44.3127 454.591 44.6287 454.029 45.1913 cv
453.466 45.7539 453.15 46.517 453.15 47.3127 cv
453.15 48.1083 453.466 48.8714 454.029 49.434 cv
454.591 49.9966 455.355 50.3127 456.15 50.3127 cv
cp
f
456.15 50.3127 mo
456.946 50.3127 457.709 49.9966 458.271 49.434 cv
458.834 48.8714 459.15 48.1083 459.15 47.3127 cv
459.15 46.517 458.834 45.7539 458.271 45.1913 cv
457.709 44.6287 456.946 44.3127 456.15 44.3127 cv
455.355 44.3127 454.591 44.6287 454.029 45.1913 cv
453.466 45.7539 453.15 46.517 453.15 47.3127 cv
453.15 48.1083 453.466 48.8714 454.029 49.434 cv
454.591 49.9966 455.355 50.3127 456.15 50.3127 cv
cp
@
298.51 83.455 mo
299.305 83.455 300.069 83.1389 300.631 82.5763 cv
301.194 82.0137 301.51 81.2506 301.51 80.455 cv
301.51 79.6594 301.194 78.8962 300.631 78.3337 cv
300.069 77.7711 299.305 77.455 298.51 77.455 cv
297.714 77.455 296.951 77.7711 296.388 78.3337 cv
295.826 78.8962 295.51 79.6594 295.51 80.455 cv
295.51 81.2506 295.826 82.0137 296.388 82.5763 cv
296.951 83.1389 297.714 83.455 298.51 83.455 cv
cp
f
298.51 83.455 mo
299.305 83.455 300.069 83.1389 300.631 82.5763 cv
301.194 82.0137 301.51 81.2506 301.51 80.455 cv
301.51 79.6594 301.194 78.8962 300.631 78.3337 cv
300.069 77.7711 299.305 77.455 298.51 77.455 cv
297.714 77.455 296.951 77.7711 296.388 78.3337 cv
295.826 78.8962 295.51 79.6594 295.51 80.455 cv
295.51 81.2506 295.826 82.0137 296.388 82.5763 cv
296.951 83.1389 297.714 83.455 298.51 83.455 cv
cp
@
470.152 113.797 mo
470.948 113.797 471.711 113.481 472.274 112.918 cv
472.836 112.356 473.152 111.593 473.152 110.797 cv
473.152 110.001 472.836 109.238 472.274 108.676 cv
471.711 108.113 470.948 107.797 470.152 107.797 cv
469.357 107.797 468.593 108.113 468.031 108.676 cv
467.468 109.238 467.152 110.001 467.152 110.797 cv
467.152 111.593 467.468 112.356 468.031 112.918 cv
468.593 113.481 469.357 113.797 470.152 113.797 cv
cp
f
470.152 113.797 mo
470.948 113.797 471.711 113.481 472.274 112.918 cv
472.836 112.356 473.152 111.593 473.152 110.797 cv
473.152 110.001 472.836 109.238 472.274 108.676 cv
471.711 108.113 470.948 107.797 470.152 107.797 cv
469.357 107.797 468.593 108.113 468.031 108.676 cv
467.468 109.238 467.152 110.001 467.152 110.797 cv
467.152 111.593 467.468 112.356 468.031 112.918 cv
468.593 113.481 469.357 113.797 470.152 113.797 cv
cp
@
256.361 107.225 mo
257.157 107.225 257.92 106.909 258.482 106.346 cv
259.045 105.784 259.361 105.021 259.361 104.225 cv
259.361 103.43 259.045 102.666 258.482 102.104 cv
257.92 101.541 257.157 101.225 256.361 101.225 cv
255.565 101.225 254.802 101.541 254.24 102.104 cv
253.677 102.666 253.361 103.43 253.361 104.225 cv
253.361 105.021 253.677 105.784 254.24 106.346 cv
254.802 106.909 255.565 107.225 256.361 107.225 cv
cp
f
256.361 107.225 mo
257.157 107.225 257.92 106.909 258.482 106.346 cv
259.045 105.784 259.361 105.021 259.361 104.225 cv
259.361 103.43 259.045 102.666 258.482 102.104 cv
257.92 101.541 257.157 101.225 256.361 101.225 cv
255.565 101.225 254.802 101.541 254.24 102.104 cv
253.677 102.666 253.361 103.43 253.361 104.225 cv
253.361 105.021 253.677 105.784 254.24 106.346 cv
254.802 106.909 255.565 107.225 256.361 107.225 cv
cp
@
322.304 33.545 mo
323.1 33.545 323.863 33.2289 324.426 32.6663 cv
324.988 32.1038 325.304 31.3406 325.304 30.545 cv
325.304 29.7494 324.988 28.9863 324.426 28.4237 cv
323.863 27.8611 323.1 27.545 322.304 27.545 cv
321.509 27.545 320.746 27.8611 320.183 28.4237 cv
319.621 28.9863 319.304 29.7494 319.304 30.545 cv
319.304 31.3406 319.621 32.1038 320.183 32.6663 cv
320.746 33.2289 321.509 33.545 322.304 33.545 cv
cp
f
322.304 33.545 mo
323.1 33.545 323.863 33.2289 324.426 32.6663 cv
324.988 32.1038 325.304 31.3406 325.304 30.545 cv
325.304 29.7494 324.988 28.9863 324.426 28.4237 cv
323.863 27.8611 323.1 27.545 322.304 27.545 cv
321.509 27.545 320.746 27.8611 320.183 28.4237 cv
319.621 28.9863 319.304 29.7494 319.304 30.545 cv
319.304 31.3406 319.621 32.1038 320.183 32.6663 cv
320.746 33.2289 321.509 33.545 322.304 33.545 cv
cp
@
389.049 110.702 mo
389.845 110.702 390.608 110.386 391.17 109.823 cv
391.733 109.261 392.049 108.497 392.049 107.702 cv
392.049 106.906 391.733 106.143 391.17 105.581 cv
390.608 105.018 389.845 104.702 389.049 104.702 cv
388.254 104.702 387.49 105.018 386.928 105.581 cv
386.365 106.143 386.049 106.906 386.049 107.702 cv
386.049 108.497 386.365 109.261 386.928 109.823 cv
387.49 110.386 388.254 110.702 389.049 110.702 cv
cp
f
389.049 110.702 mo
389.845 110.702 390.608 110.386 391.17 109.823 cv
391.733 109.261 392.049 108.497 392.049 107.702 cv
392.049 106.906 391.733 106.143 391.17 105.581 cv
390.608 105.018 389.845 104.702 389.049 104.702 cv
388.254 104.702 387.49 105.018 386.928 105.581 cv
386.365 106.143 386.049 106.906 386.049 107.702 cv
386.049 108.497 386.365 109.261 386.928 109.823 cv
387.49 110.386 388.254 110.702 389.049 110.702 cv
cp
@
338.296 53.8106 mo
339.091 53.8106 339.854 53.4945 340.417 52.9319 cv
340.98 52.3693 341.296 51.6062 341.296 50.8106 cv
341.296 50.015 340.98 49.2518 340.417 48.6893 cv
339.854 48.1267 339.091 47.8106 338.296 47.8106 cv
337.5 47.8106 336.737 48.1267 336.174 48.6893 cv
335.612 49.2518 335.296 50.015 335.296 50.8106 cv
335.296 51.6062 335.612 52.3693 336.174 52.9319 cv
336.737 53.4945 337.5 53.8106 338.296 53.8106 cv
cp
f
338.296 53.8106 mo
339.091 53.8106 339.854 53.4945 340.417 52.9319 cv
340.98 52.3693 341.296 51.6062 341.296 50.8106 cv
341.296 50.015 340.98 49.2518 340.417 48.6893 cv
339.854 48.1267 339.091 47.8106 338.296 47.8106 cv
337.5 47.8106 336.737 48.1267 336.174 48.6893 cv
335.612 49.2518 335.296 50.015 335.296 50.8106 cv
335.296 51.6062 335.612 52.3693 336.174 52.9319 cv
336.737 53.4945 337.5 53.8106 338.296 53.8106 cv
cp
@
324.208 41.3228 mo
325.003 41.3228 325.766 41.0067 326.329 40.4441 cv
326.892 39.8815 327.208 39.1184 327.208 38.3228 cv
327.208 37.5271 326.892 36.764 326.329 36.2014 cv
325.766 35.6389 325.003 35.3228 324.208 35.3228 cv
323.412 35.3228 322.649 35.6389 322.086 36.2014 cv
321.524 36.764 321.208 37.5271 321.208 38.3228 cv
321.208 39.1184 321.524 39.8815 322.086 40.4441 cv
322.649 41.0067 323.412 41.3228 324.208 41.3228 cv
cp
f
324.208 41.3228 mo
325.003 41.3228 325.766 41.0067 326.329 40.4441 cv
326.892 39.8815 327.208 39.1184 327.208 38.3228 cv
327.208 37.5271 326.892 36.764 326.329 36.2014 cv
325.766 35.6389 325.003 35.3228 324.208 35.3228 cv
323.412 35.3228 322.649 35.6389 322.086 36.2014 cv
321.524 36.764 321.208 37.5271 321.208 38.3228 cv
321.208 39.1184 321.524 39.8815 322.086 40.4441 cv
322.649 41.0067 323.412 41.3228 324.208 41.3228 cv
cp
@
156.986 50.8943 mo
157.781 50.8943 158.545 50.5782 159.107 50.0156 cv
159.67 49.4531 159.986 48.6899 159.986 47.8943 cv
159.986 47.0987 159.67 46.3356 159.107 45.773 cv
158.545 45.2104 157.781 44.8943 156.986 44.8943 cv
156.19 44.8943 155.427 45.2104 154.865 45.773 cv
154.302 46.3356 153.986 47.0987 153.986 47.8943 cv
153.986 48.6899 154.302 49.4531 154.865 50.0156 cv
155.427 50.5782 156.19 50.8943 156.986 50.8943 cv
cp
f
156.986 50.8943 mo
157.781 50.8943 158.545 50.5782 159.107 50.0156 cv
159.67 49.4531 159.986 48.6899 159.986 47.8943 cv
159.986 47.0987 159.67 46.3356 159.107 45.773 cv
158.545 45.2104 157.781 44.8943 156.986 44.8943 cv
156.19 44.8943 155.427 45.2104 154.865 45.773 cv
154.302 46.3356 153.986 47.0987 153.986 47.8943 cv
153.986 48.6899 154.302 49.4531 154.865 50.0156 cv
155.427 50.5782 156.19 50.8943 156.986 50.8943 cv
cp
@
126.903 107.399 mo
127.699 107.399 128.462 107.083 129.025 106.521 cv
129.587 105.958 129.903 105.195 129.903 104.399 cv
129.903 103.604 129.587 102.841 129.025 102.278 cv
128.462 101.716 127.699 101.399 126.903 101.399 cv
126.108 101.399 125.345 101.716 124.782 102.278 cv
124.219 102.841 123.903 103.604 123.903 104.399 cv
123.903 105.195 124.219 105.958 124.782 106.521 cv
125.345 107.083 126.108 107.399 126.903 107.399 cv
cp
f
126.903 107.399 mo
127.699 107.399 128.462 107.083 129.025 106.521 cv
129.587 105.958 129.903 105.195 129.903 104.399 cv
129.903 103.604 129.587 102.841 129.025 102.278 cv
128.462 101.716 127.699 101.399 126.903 101.399 cv
126.108 101.399 125.345 101.716 124.782 102.278 cv
124.219 102.841 123.903 103.604 123.903 104.399 cv
123.903 105.195 124.219 105.958 124.782 106.521 cv
125.345 107.083 126.108 107.399 126.903 107.399 cv
cp
@
262.908 125.324 mo
263.704 125.324 264.467 125.008 265.03 124.445 cv
265.592 123.882 265.908 123.119 265.908 122.324 cv
265.908 121.528 265.592 120.765 265.03 120.202 cv
264.467 119.64 263.704 119.324 262.908 119.324 cv
262.113 119.324 261.35 119.64 260.787 120.202 cv
260.224 120.765 259.908 121.528 259.908 122.324 cv
259.908 123.119 260.224 123.882 260.787 124.445 cv
261.35 125.008 262.113 125.324 262.908 125.324 cv
cp
f
262.908 125.324 mo
263.704 125.324 264.467 125.008 265.03 124.445 cv
265.592 123.882 265.908 123.119 265.908 122.324 cv
265.908 121.528 265.592 120.765 265.03 120.202 cv
264.467 119.64 263.704 119.324 262.908 119.324 cv
262.113 119.324 261.35 119.64 260.787 120.202 cv
260.224 120.765 259.908 121.528 259.908 122.324 cv
259.908 123.119 260.224 123.882 260.787 124.445 cv
261.35 125.008 262.113 125.324 262.908 125.324 cv
cp
@
311.09 153.394 mo
311.885 153.394 312.649 153.078 313.211 152.515 cv
313.774 151.953 314.09 151.19 314.09 150.394 cv
314.09 149.598 313.774 148.835 313.211 148.273 cv
312.649 147.71 311.885 147.394 311.09 147.394 cv
310.294 147.394 309.531 147.71 308.968 148.273 cv
308.406 148.835 308.09 149.598 308.09 150.394 cv
308.09 151.19 308.406 151.953 308.968 152.515 cv
309.531 153.078 310.294 153.394 311.09 153.394 cv
cp
f
311.09 153.394 mo
311.885 153.394 312.649 153.078 313.211 152.515 cv
313.774 151.953 314.09 151.19 314.09 150.394 cv
314.09 149.598 313.774 148.835 313.211 148.273 cv
312.649 147.71 311.885 147.394 311.09 147.394 cv
310.294 147.394 309.531 147.71 308.968 148.273 cv
308.406 148.835 308.09 149.598 308.09 150.394 cv
308.09 151.19 308.406 151.953 308.968 152.515 cv
309.531 153.078 310.294 153.394 311.09 153.394 cv
cp
@
344.117 83.9766 mo
344.912 83.9766 345.675 83.6605 346.238 83.0979 cv
346.801 82.5353 347.117 81.7722 347.117 80.9766 cv
347.117 80.181 346.801 79.4179 346.238 78.8553 cv
345.675 78.2927 344.912 77.9766 344.117 77.9766 cv
343.321 77.9766 342.558 78.2927 341.995 78.8553 cv
341.433 79.4179 341.117 80.181 341.117 80.9766 cv
341.117 81.7722 341.433 82.5353 341.995 83.0979 cv
342.558 83.6605 343.321 83.9766 344.117 83.9766 cv
cp
f
344.117 83.9766 mo
344.912 83.9766 345.675 83.6605 346.238 83.0979 cv
346.801 82.5353 347.117 81.7722 347.117 80.9766 cv
347.117 80.181 346.801 79.4179 346.238 78.8553 cv
345.675 78.2927 344.912 77.9766 344.117 77.9766 cv
343.321 77.9766 342.558 78.2927 341.995 78.8553 cv
341.433 79.4179 341.117 80.181 341.117 80.9766 cv
341.117 81.7722 341.433 82.5353 341.995 83.0979 cv
342.558 83.6605 343.321 83.9766 344.117 83.9766 cv
cp
@
311.306 72.3188 mo
312.101 72.3188 312.865 72.0027 313.427 71.4401 cv
313.99 70.8776 314.306 70.1144 314.306 69.3188 cv
314.306 68.5232 313.99 67.7601 313.427 67.1975 cv
312.865 66.6349 312.101 66.3188 311.306 66.3188 cv
310.51 66.3188 309.747 66.6349 309.185 67.1975 cv
308.622 67.7601 308.306 68.5232 308.306 69.3188 cv
308.306 70.1144 308.622 70.8776 309.185 71.4401 cv
309.747 72.0027 310.51 72.3188 311.306 72.3188 cv
cp
f
311.306 72.3188 mo
312.101 72.3188 312.865 72.0027 313.427 71.4401 cv
313.99 70.8776 314.306 70.1144 314.306 69.3188 cv
314.306 68.5232 313.99 67.7601 313.427 67.1975 cv
312.865 66.6349 312.101 66.3188 311.306 66.3188 cv
310.51 66.3188 309.747 66.6349 309.185 67.1975 cv
308.622 67.7601 308.306 68.5232 308.306 69.3188 cv
308.306 70.1144 308.622 70.8776 309.185 71.4401 cv
309.747 72.0027 310.51 72.3188 311.306 72.3188 cv
cp
@
367.123 155.395 mo
367.919 155.395 368.682 155.079 369.245 154.516 cv
369.807 153.954 370.123 153.19 370.123 152.395 cv
370.123 151.599 369.807 150.836 369.245 150.274 cv
368.682 149.711 367.919 149.395 367.123 149.395 cv
366.328 149.395 365.565 149.711 365.002 150.274 cv
364.439 150.836 364.123 151.599 364.123 152.395 cv
364.123 153.19 364.439 153.954 365.002 154.516 cv
365.565 155.079 366.328 155.395 367.123 155.395 cv
cp
f
367.123 155.395 mo
367.919 155.395 368.682 155.079 369.245 154.516 cv
369.807 153.954 370.123 153.19 370.123 152.395 cv
370.123 151.599 369.807 150.836 369.245 150.274 cv
368.682 149.711 367.919 149.395 367.123 149.395 cv
366.328 149.395 365.565 149.711 365.002 150.274 cv
364.439 150.836 364.123 151.599 364.123 152.395 cv
364.123 153.19 364.439 153.954 365.002 154.516 cv
365.565 155.079 366.328 155.395 367.123 155.395 cv
cp
@
187.42 87.4635 mo
188.216 87.4635 188.979 87.1474 189.542 86.5848 cv
190.104 86.0222 190.42 85.2591 190.42 84.4635 cv
190.42 83.6679 190.104 82.9047 189.542 82.3421 cv
188.979 81.7796 188.216 81.4635 187.42 81.4635 cv
186.625 81.4635 185.861 81.7796 185.299 82.3421 cv
184.736 82.9047 184.42 83.6679 184.42 84.4635 cv
184.42 85.2591 184.736 86.0222 185.299 86.5848 cv
185.861 87.1474 186.625 87.4635 187.42 87.4635 cv
cp
f
187.42 87.4635 mo
188.216 87.4635 188.979 87.1474 189.542 86.5848 cv
190.104 86.0222 190.42 85.2591 190.42 84.4635 cv
190.42 83.6679 190.104 82.9047 189.542 82.3421 cv
188.979 81.7796 188.216 81.4635 187.42 81.4635 cv
186.625 81.4635 185.861 81.7796 185.299 82.3421 cv
184.736 82.9047 184.42 83.6679 184.42 84.4635 cv
184.42 85.2591 184.736 86.0222 185.299 86.5848 cv
185.861 87.1474 186.625 87.4635 187.42 87.4635 cv
cp
@
456.756 106.098 mo
457.552 106.098 458.315 105.781 458.878 105.219 cv
459.44 104.656 459.756 103.893 459.756 103.098 cv
459.756 102.302 459.44 101.539 458.878 100.976 cv
458.315 100.414 457.552 100.098 456.756 100.098 cv
455.961 100.098 455.197 100.414 454.635 100.976 cv
454.072 101.539 453.756 102.302 453.756 103.098 cv
453.756 103.893 454.072 104.656 454.635 105.219 cv
455.197 105.781 455.961 106.098 456.756 106.098 cv
cp
f
456.756 106.098 mo
457.552 106.098 458.315 105.781 458.878 105.219 cv
459.44 104.656 459.756 103.893 459.756 103.098 cv
459.756 102.302 459.44 101.539 458.878 100.976 cv
458.315 100.414 457.552 100.098 456.756 100.098 cv
455.961 100.098 455.197 100.414 454.635 100.976 cv
454.072 101.539 453.756 102.302 453.756 103.098 cv
453.756 103.893 454.072 104.656 454.635 105.219 cv
455.197 105.781 455.961 106.098 456.756 106.098 cv
cp
@
227.257 150.683 mo
228.052 150.683 228.815 150.367 229.378 149.805 cv
229.94 149.242 230.257 148.479 230.257 147.683 cv
230.257 146.888 229.94 146.125 229.378 145.562 cv
228.815 144.999 228.052 144.683 227.257 144.683 cv
226.461 144.683 225.698 144.999 225.135 145.562 cv
224.573 146.125 224.257 146.888 224.257 147.683 cv
224.257 148.479 224.573 149.242 225.135 149.805 cv
225.698 150.367 226.461 150.683 227.257 150.683 cv
cp
f
227.257 150.683 mo
228.052 150.683 228.815 150.367 229.378 149.805 cv
229.94 149.242 230.257 148.479 230.257 147.683 cv
230.257 146.888 229.94 146.125 229.378 145.562 cv
228.815 144.999 228.052 144.683 227.257 144.683 cv
226.461 144.683 225.698 144.999 225.135 145.562 cv
224.573 146.125 224.257 146.888 224.257 147.683 cv
224.257 148.479 224.573 149.242 225.135 149.805 cv
225.698 150.367 226.461 150.683 227.257 150.683 cv
cp
@
303.475 61.7368 mo
304.27 61.7368 305.034 61.4207 305.596 60.8581 cv
306.159 60.2955 306.475 59.5324 306.475 58.7368 cv
306.475 57.9411 306.159 57.178 305.596 56.6154 cv
305.034 56.0529 304.27 55.7368 303.475 55.7368 cv
302.679 55.7368 301.916 56.0529 301.354 56.6154 cv
300.791 57.178 300.475 57.9411 300.475 58.7368 cv
300.475 59.5324 300.791 60.2955 301.354 60.8581 cv
301.916 61.4207 302.679 61.7368 303.475 61.7368 cv
cp
f
303.475 61.7368 mo
304.27 61.7368 305.034 61.4207 305.596 60.8581 cv
306.159 60.2955 306.475 59.5324 306.475 58.7368 cv
306.475 57.9411 306.159 57.178 305.596 56.6154 cv
305.034 56.0529 304.27 55.7368 303.475 55.7368 cv
302.679 55.7368 301.916 56.0529 301.354 56.6154 cv
300.791 57.178 300.475 57.9411 300.475 58.7368 cv
300.475 59.5324 300.791 60.2955 301.354 60.8581 cv
301.916 61.4207 302.679 61.7368 303.475 61.7368 cv
cp
@
137.752 68.0067 mo
138.548 68.0067 139.311 67.6906 139.873 67.1281 cv
140.436 66.5655 140.752 65.8024 140.752 65.0067 cv
140.752 64.2111 140.436 63.448 139.873 62.8854 cv
139.311 62.3228 138.548 62.0067 137.752 62.0067 cv
136.956 62.0067 136.193 62.3228 135.631 62.8854 cv
135.068 63.448 134.752 64.2111 134.752 65.0067 cv
134.752 65.8024 135.068 66.5655 135.631 67.1281 cv
136.193 67.6906 136.956 68.0067 137.752 68.0067 cv
cp
f
137.752 68.0067 mo
138.548 68.0067 139.311 67.6906 139.873 67.1281 cv
140.436 66.5655 140.752 65.8024 140.752 65.0067 cv
140.752 64.2111 140.436 63.448 139.873 62.8854 cv
139.311 62.3228 138.548 62.0067 137.752 62.0067 cv
136.956 62.0067 136.193 62.3228 135.631 62.8854 cv
135.068 63.448 134.752 64.2111 134.752 65.0067 cv
134.752 65.8024 135.068 66.5655 135.631 67.1281 cv
136.193 67.6906 136.956 68.0067 137.752 68.0067 cv
cp
@
114.73 41.0063 mo
115.525 41.0063 116.289 40.6902 116.851 40.1276 cv
117.414 39.5651 117.73 38.8019 117.73 38.0063 cv
117.73 37.2107 117.414 36.4476 116.851 35.885 cv
116.289 35.3224 115.525 35.0063 114.73 35.0063 cv
113.934 35.0063 113.171 35.3224 112.609 35.885 cv
112.046 36.4476 111.73 37.2107 111.73 38.0063 cv
111.73 38.8019 112.046 39.5651 112.609 40.1276 cv
113.171 40.6902 113.934 41.0063 114.73 41.0063 cv
cp
f
114.73 41.0063 mo
115.525 41.0063 116.289 40.6902 116.851 40.1276 cv
117.414 39.5651 117.73 38.8019 117.73 38.0063 cv
117.73 37.2107 117.414 36.4476 116.851 35.885 cv
116.289 35.3224 115.525 35.0063 114.73 35.0063 cv
113.934 35.0063 113.171 35.3224 112.609 35.885 cv
112.046 36.4476 111.73 37.2107 111.73 38.0063 cv
111.73 38.8019 112.046 39.5651 112.609 40.1276 cv
113.171 40.6902 113.934 41.0063 114.73 41.0063 cv
cp
@
93.19 66.5506 mo
93.9856 66.5506 94.7487 66.2345 95.3113 65.6719 cv
95.8739 65.1093 96.19 64.3462 96.19 63.5506 cv
96.19 62.755 95.8739 61.9919 95.3113 61.4293 cv
94.7487 60.8667 93.9856 60.5506 93.19 60.5506 cv
92.3944 60.5506 91.6312 60.8667 91.0686 61.4293 cv
90.5061 61.9919 90.19 62.755 90.19 63.5506 cv
90.19 64.3462 90.5061 65.1093 91.0686 65.6719 cv
91.6312 66.2345 92.3944 66.5506 93.19 66.5506 cv
cp
f
93.19 66.5506 mo
93.9856 66.5506 94.7487 66.2345 95.3113 65.6719 cv
95.8739 65.1093 96.19 64.3462 96.19 63.5506 cv
96.19 62.755 95.8739 61.9919 95.3113 61.4293 cv
94.7487 60.8667 93.9856 60.5506 93.19 60.5506 cv
92.3944 60.5506 91.6312 60.8667 91.0686 61.4293 cv
90.5061 61.9919 90.19 62.755 90.19 63.5506 cv
90.19 64.3462 90.5061 65.1093 91.0686 65.6719 cv
91.6312 66.2345 92.3944 66.5506 93.19 66.5506 cv
cp
@
136.605 70.9762 mo
137.401 70.9762 138.164 70.6601 138.726 70.0975 cv
139.289 69.5349 139.605 68.7718 139.605 67.9762 cv
139.605 67.1806 139.289 66.4175 138.726 65.8549 cv
138.164 65.2923 137.401 64.9762 136.605 64.9762 cv
135.81 64.9762 135.046 65.2923 134.484 65.8549 cv
133.921 66.4175 133.605 67.1806 133.605 67.9762 cv
133.605 68.7718 133.921 69.5349 134.484 70.0975 cv
135.046 70.6601 135.81 70.9762 136.605 70.9762 cv
cp
f
136.605 70.9762 mo
137.401 70.9762 138.164 70.6601 138.726 70.0975 cv
139.289 69.5349 139.605 68.7718 139.605 67.9762 cv
139.605 67.1806 139.289 66.4175 138.726 65.8549 cv
138.164 65.2923 137.401 64.9762 136.605 64.9762 cv
135.81 64.9762 135.046 65.2923 134.484 65.8549 cv
133.921 66.4175 133.605 67.1806 133.605 67.9762 cv
133.605 68.7718 133.921 69.5349 134.484 70.0975 cv
135.046 70.6601 135.81 70.9762 136.605 70.9762 cv
cp
@
459.262 140.142 mo
460.058 140.142 460.821 139.826 461.383 139.263 cv
461.946 138.701 462.262 137.938 462.262 137.142 cv
462.262 136.346 461.946 135.583 461.383 135.021 cv
460.821 134.458 460.058 134.142 459.262 134.142 cv
458.466 134.142 457.703 134.458 457.141 135.021 cv
456.578 135.583 456.262 136.346 456.262 137.142 cv
456.262 137.938 456.578 138.701 457.141 139.263 cv
457.703 139.826 458.466 140.142 459.262 140.142 cv
cp
f
459.262 140.142 mo
460.058 140.142 460.821 139.826 461.383 139.263 cv
461.946 138.701 462.262 137.938 462.262 137.142 cv
462.262 136.346 461.946 135.583 461.383 135.021 cv
460.821 134.458 460.058 134.142 459.262 134.142 cv
458.466 134.142 457.703 134.458 457.141 135.021 cv
456.578 135.583 456.262 136.346 456.262 137.142 cv
456.262 137.938 456.578 138.701 457.141 139.263 cv
457.703 139.826 458.466 140.142 459.262 140.142 cv
cp
@
230.663 94.0648 mo
231.458 94.0648 232.221 93.7487 232.784 93.1861 cv
233.347 92.6235 233.663 91.8604 233.663 91.0648 cv
233.663 90.2692 233.347 89.5061 232.784 88.9435 cv
232.221 88.3809 231.458 88.0648 230.663 88.0648 cv
229.867 88.0648 229.104 88.3809 228.541 88.9435 cv
227.979 89.5061 227.663 90.2692 227.663 91.0648 cv
227.663 91.8604 227.979 92.6235 228.541 93.1861 cv
229.104 93.7487 229.867 94.0648 230.663 94.0648 cv
cp
f
230.663 94.0648 mo
231.458 94.0648 232.221 93.7487 232.784 93.1861 cv
233.347 92.6235 233.663 91.8604 233.663 91.0648 cv
233.663 90.2692 233.347 89.5061 232.784 88.9435 cv
232.221 88.3809 231.458 88.0648 230.663 88.0648 cv
229.867 88.0648 229.104 88.3809 228.541 88.9435 cv
227.979 89.5061 227.663 90.2692 227.663 91.0648 cv
227.663 91.8604 227.979 92.6235 228.541 93.1861 cv
229.104 93.7487 229.867 94.0648 230.663 94.0648 cv
cp
@
395.466 54.9126 mo
396.261 54.9126 397.024 54.5965 397.587 54.0339 cv
398.149 53.4713 398.466 52.7082 398.466 51.9126 cv
398.466 51.117 398.149 50.3538 397.587 49.7912 cv
397.024 49.2287 396.261 48.9126 395.466 48.9126 cv
394.67 48.9126 393.907 49.2287 393.344 49.7912 cv
392.782 50.3538 392.466 51.117 392.466 51.9126 cv
392.466 52.7082 392.782 53.4713 393.344 54.0339 cv
393.907 54.5965 394.67 54.9126 395.466 54.9126 cv
cp
f
395.466 54.9126 mo
396.261 54.9126 397.024 54.5965 397.587 54.0339 cv
398.149 53.4713 398.466 52.7082 398.466 51.9126 cv
398.466 51.117 398.149 50.3538 397.587 49.7912 cv
397.024 49.2287 396.261 48.9126 395.466 48.9126 cv
394.67 48.9126 393.907 49.2287 393.344 49.7912 cv
392.782 50.3538 392.466 51.117 392.466 51.9126 cv
392.466 52.7082 392.782 53.4713 393.344 54.0339 cv
393.907 54.5965 394.67 54.9126 395.466 54.9126 cv
cp
@
377.11 89.8729 mo
377.906 89.8729 378.669 89.5568 379.232 88.9942 cv
379.794 88.4317 380.11 87.6685 380.11 86.8729 cv
380.11 86.0773 379.794 85.3142 379.232 84.7516 cv
378.669 84.189 377.906 83.8729 377.11 83.8729 cv
376.315 83.8729 375.552 84.189 374.989 84.7516 cv
374.427 85.3142 374.11 86.0773 374.11 86.8729 cv
374.11 87.6685 374.427 88.4317 374.989 88.9942 cv
375.552 89.5568 376.315 89.8729 377.11 89.8729 cv
cp
f
377.11 89.8729 mo
377.906 89.8729 378.669 89.5568 379.232 88.9942 cv
379.794 88.4317 380.11 87.6685 380.11 86.8729 cv
380.11 86.0773 379.794 85.3142 379.232 84.7516 cv
378.669 84.189 377.906 83.8729 377.11 83.8729 cv
376.315 83.8729 375.552 84.189 374.989 84.7516 cv
374.427 85.3142 374.11 86.0773 374.11 86.8729 cv
374.11 87.6685 374.427 88.4317 374.989 88.9942 cv
375.552 89.5568 376.315 89.8729 377.11 89.8729 cv
cp
@
376.895 70.022 mo
377.69 70.022 378.453 69.7059 379.016 69.1433 cv
379.579 68.5807 379.895 67.8176 379.895 67.022 cv
379.895 66.2264 379.579 65.4633 379.016 64.9007 cv
378.453 64.3381 377.69 64.022 376.895 64.022 cv
376.099 64.022 375.336 64.3381 374.773 64.9007 cv
374.211 65.4633 373.895 66.2264 373.895 67.022 cv
373.895 67.8176 374.211 68.5807 374.773 69.1433 cv
375.336 69.7059 376.099 70.022 376.895 70.022 cv
cp
f
376.895 70.022 mo
377.69 70.022 378.453 69.7059 379.016 69.1433 cv
379.579 68.5807 379.895 67.8176 379.895 67.022 cv
379.895 66.2264 379.579 65.4633 379.016 64.9007 cv
378.453 64.3381 377.69 64.022 376.895 64.022 cv
376.099 64.022 375.336 64.3381 374.773 64.9007 cv
374.211 65.4633 373.895 66.2264 373.895 67.022 cv
373.895 67.8176 374.211 68.5807 374.773 69.1433 cv
375.336 69.7059 376.099 70.022 376.895 70.022 cv
cp
@
139.348 121.159 mo
140.143 121.159 140.906 120.843 141.469 120.28 cv
142.032 119.717 142.348 118.954 142.348 118.159 cv
142.348 117.363 142.032 116.6 141.469 116.037 cv
140.906 115.475 140.143 115.159 139.348 115.159 cv
138.552 115.159 137.789 115.475 137.226 116.037 cv
136.664 116.6 136.348 117.363 136.348 118.159 cv
136.348 118.954 136.664 119.717 137.226 120.28 cv
137.789 120.843 138.552 121.159 139.348 121.159 cv
cp
f
139.348 121.159 mo
140.143 121.159 140.906 120.843 141.469 120.28 cv
142.032 119.717 142.348 118.954 142.348 118.159 cv
142.348 117.363 142.032 116.6 141.469 116.037 cv
140.906 115.475 140.143 115.159 139.348 115.159 cv
138.552 115.159 137.789 115.475 137.226 116.037 cv
136.664 116.6 136.348 117.363 136.348 118.159 cv
136.348 118.954 136.664 119.717 137.226 120.28 cv
137.789 120.843 138.552 121.159 139.348 121.159 cv
cp
@
93.5808 155.351 mo
94.3764 155.351 95.1395 155.034 95.7021 154.472 cv
96.2647 153.909 96.5808 153.146 96.5808 152.351 cv
96.5808 151.555 96.2647 150.792 95.7021 150.229 cv
95.1395 149.667 94.3764 149.351 93.5808 149.351 cv
92.7852 149.351 92.0221 149.667 91.4595 150.229 cv
90.8969 150.792 90.5808 151.555 90.5808 152.351 cv
90.5808 153.146 90.8969 153.909 91.4595 154.472 cv
92.0221 155.034 92.7852 155.351 93.5808 155.351 cv
cp
f
93.5808 155.351 mo
94.3764 155.351 95.1395 155.034 95.7021 154.472 cv
96.2647 153.909 96.5808 153.146 96.5808 152.351 cv
96.5808 151.555 96.2647 150.792 95.7021 150.229 cv
95.1395 149.667 94.3764 149.351 93.5808 149.351 cv
92.7852 149.351 92.0221 149.667 91.4595 150.229 cv
90.8969 150.792 90.5808 151.555 90.5808 152.351 cv
90.5808 153.146 90.8969 153.909 91.4595 154.472 cv
92.0221 155.034 92.7852 155.351 93.5808 155.351 cv
cp
@
266.021 31.8592 mo
266.817 31.8592 267.58 31.5431 268.142 30.9805 cv
268.705 30.4179 269.021 29.6548 269.021 28.8592 cv
269.021 28.0636 268.705 27.3004 268.142 26.7378 cv
267.58 26.1753 266.817 25.8592 266.021 25.8592 cv
265.226 25.8592 264.462 26.1753 263.9 26.7378 cv
263.337 27.3004 263.021 28.0636 263.021 28.8592 cv
263.021 29.6548 263.337 30.4179 263.9 30.9805 cv
264.462 31.5431 265.226 31.8592 266.021 31.8592 cv
cp
f
266.021 31.8592 mo
266.817 31.8592 267.58 31.5431 268.142 30.9805 cv
268.705 30.4179 269.021 29.6548 269.021 28.8592 cv
269.021 28.0636 268.705 27.3004 268.142 26.7378 cv
267.58 26.1753 266.817 25.8592 266.021 25.8592 cv
265.226 25.8592 264.462 26.1753 263.9 26.7378 cv
263.337 27.3004 263.021 28.0636 263.021 28.8592 cv
263.021 29.6548 263.337 30.4179 263.9 30.9805 cv
264.462 31.5431 265.226 31.8592 266.021 31.8592 cv
cp
@
381.869 93.6733 mo
382.664 93.6733 383.427 93.3572 383.99 92.7947 cv
384.553 92.2321 384.869 91.4689 384.869 90.6733 cv
384.869 89.8777 384.553 89.1146 383.99 88.552 cv
383.427 87.9894 382.664 87.6733 381.869 87.6733 cv
381.073 87.6733 380.31 87.9894 379.747 88.552 cv
379.185 89.1146 378.869 89.8777 378.869 90.6733 cv
378.869 91.4689 379.185 92.2321 379.747 92.7947 cv
380.31 93.3572 381.073 93.6733 381.869 93.6733 cv
cp
f
381.869 93.6733 mo
382.664 93.6733 383.427 93.3572 383.99 92.7947 cv
384.553 92.2321 384.869 91.4689 384.869 90.6733 cv
384.869 89.8777 384.553 89.1146 383.99 88.552 cv
383.427 87.9894 382.664 87.6733 381.869 87.6733 cv
381.073 87.6733 380.31 87.9894 379.747 88.552 cv
379.185 89.1146 378.869 89.8777 378.869 90.6733 cv
378.869 91.4689 379.185 92.2321 379.747 92.7947 cv
380.31 93.3572 381.073 93.6733 381.869 93.6733 cv
cp
@
92.7604 54.996 mo
93.556 54.996 94.3191 54.6799 94.8817 54.1174 cv
95.4443 53.5548 95.7604 52.7916 95.7604 51.996 cv
95.7604 51.2004 95.4443 50.4373 94.8817 49.8747 cv
94.3191 49.3121 93.556 48.996 92.7604 48.996 cv
91.9648 48.996 91.2017 49.3121 90.6391 49.8747 cv
90.0765 50.4373 89.7604 51.2004 89.7604 51.996 cv
89.7604 52.7916 90.0765 53.5548 90.6391 54.1174 cv
91.2017 54.6799 91.9648 54.996 92.7604 54.996 cv
cp
f
92.7604 54.996 mo
93.556 54.996 94.3191 54.6799 94.8817 54.1174 cv
95.4443 53.5548 95.7604 52.7916 95.7604 51.996 cv
95.7604 51.2004 95.4443 50.4373 94.8817 49.8747 cv
94.3191 49.3121 93.556 48.996 92.7604 48.996 cv
91.9648 48.996 91.2017 49.3121 90.6391 49.8747 cv
90.0765 50.4373 89.7604 51.2004 89.7604 51.996 cv
89.7604 52.7916 90.0765 53.5548 90.6391 54.1174 cv
91.2017 54.6799 91.9648 54.996 92.7604 54.996 cv
cp
@
281.049 81.0425 mo
281.845 81.0425 282.608 80.7264 283.17 80.1639 cv
283.733 79.6013 284.049 78.8382 284.049 78.0425 cv
284.049 77.2469 283.733 76.4838 283.17 75.9212 cv
282.608 75.3586 281.845 75.0425 281.049 75.0425 cv
280.254 75.0425 279.49 75.3586 278.928 75.9212 cv
278.365 76.4838 278.049 77.2469 278.049 78.0425 cv
278.049 78.8382 278.365 79.6013 278.928 80.1639 cv
279.49 80.7264 280.254 81.0425 281.049 81.0425 cv
cp
f
281.049 81.0425 mo
281.845 81.0425 282.608 80.7264 283.17 80.1639 cv
283.733 79.6013 284.049 78.8382 284.049 78.0425 cv
284.049 77.2469 283.733 76.4838 283.17 75.9212 cv
282.608 75.3586 281.845 75.0425 281.049 75.0425 cv
280.254 75.0425 279.49 75.3586 278.928 75.9212 cv
278.365 76.4838 278.049 77.2469 278.049 78.0425 cv
278.049 78.8382 278.365 79.6013 278.928 80.1639 cv
279.49 80.7264 280.254 81.0425 281.049 81.0425 cv
cp
@
438.602 82.3956 mo
439.397 82.3956 440.161 82.0795 440.723 81.5169 cv
441.286 80.9543 441.602 80.1912 441.602 79.3956 cv
441.602 78.6 441.286 77.8368 440.723 77.2742 cv
440.161 76.7117 439.397 76.3956 438.602 76.3956 cv
437.806 76.3956 437.043 76.7117 436.481 77.2742 cv
435.918 77.8368 435.602 78.6 435.602 79.3956 cv
435.602 80.1912 435.918 80.9543 436.481 81.5169 cv
437.043 82.0795 437.806 82.3956 438.602 82.3956 cv
cp
f
438.602 82.3956 mo
439.397 82.3956 440.161 82.0795 440.723 81.5169 cv
441.286 80.9543 441.602 80.1912 441.602 79.3956 cv
441.602 78.6 441.286 77.8368 440.723 77.2742 cv
440.161 76.7117 439.397 76.3956 438.602 76.3956 cv
437.806 76.3956 437.043 76.7117 436.481 77.2742 cv
435.918 77.8368 435.602 78.6 435.602 79.3956 cv
435.602 80.1912 435.918 80.9543 436.481 81.5169 cv
437.043 82.0795 437.806 82.3956 438.602 82.3956 cv
cp
@
251.371 40.5896 mo
252.166 40.5896 252.929 40.2735 253.492 39.7109 cv
254.054 39.1483 254.371 38.3852 254.371 37.5896 cv
254.371 36.794 254.054 36.0308 253.492 35.4683 cv
252.929 34.9057 252.166 34.5896 251.371 34.5896 cv
250.575 34.5896 249.812 34.9057 249.249 35.4683 cv
248.687 36.0308 248.371 36.794 248.371 37.5896 cv
248.371 38.3852 248.687 39.1483 249.249 39.7109 cv
249.812 40.2735 250.575 40.5896 251.371 40.5896 cv
cp
f
251.371 40.5896 mo
252.166 40.5896 252.929 40.2735 253.492 39.7109 cv
254.054 39.1483 254.371 38.3852 254.371 37.5896 cv
254.371 36.794 254.054 36.0308 253.492 35.4683 cv
252.929 34.9057 252.166 34.5896 251.371 34.5896 cv
250.575 34.5896 249.812 34.9057 249.249 35.4683 cv
248.687 36.0308 248.371 36.794 248.371 37.5896 cv
248.371 38.3852 248.687 39.1483 249.249 39.7109 cv
249.812 40.2735 250.575 40.5896 251.371 40.5896 cv
cp
@
428.716 134.593 mo
429.512 134.593 430.275 134.277 430.838 133.714 cv
431.4 133.151 431.716 132.388 431.716 131.593 cv
431.716 130.797 431.4 130.034 430.838 129.471 cv
430.275 128.909 429.512 128.593 428.716 128.593 cv
427.921 128.593 427.158 128.909 426.595 129.471 cv
426.032 130.034 425.716 130.797 425.716 131.593 cv
425.716 132.388 426.032 133.151 426.595 133.714 cv
427.158 134.277 427.921 134.593 428.716 134.593 cv
cp
f
428.716 134.593 mo
429.512 134.593 430.275 134.277 430.838 133.714 cv
431.4 133.151 431.716 132.388 431.716 131.593 cv
431.716 130.797 431.4 130.034 430.838 129.471 cv
430.275 128.909 429.512 128.593 428.716 128.593 cv
427.921 128.593 427.158 128.909 426.595 129.471 cv
426.032 130.034 425.716 130.797 425.716 131.593 cv
425.716 132.388 426.032 133.151 426.595 133.714 cv
427.158 134.277 427.921 134.593 428.716 134.593 cv
cp
@
267.011 112.277 mo
267.806 112.277 268.569 111.961 269.132 111.399 cv
269.694 110.836 270.011 110.073 270.011 109.277 cv
270.011 108.482 269.694 107.718 269.132 107.156 cv
268.569 106.593 267.806 106.277 267.011 106.277 cv
266.215 106.277 265.452 106.593 264.889 107.156 cv
264.327 107.718 264.011 108.482 264.011 109.277 cv
264.011 110.073 264.327 110.836 264.889 111.399 cv
265.452 111.961 266.215 112.277 267.011 112.277 cv
cp
f
267.011 112.277 mo
267.806 112.277 268.569 111.961 269.132 111.399 cv
269.694 110.836 270.011 110.073 270.011 109.277 cv
270.011 108.482 269.694 107.718 269.132 107.156 cv
268.569 106.593 267.806 106.277 267.011 106.277 cv
266.215 106.277 265.452 106.593 264.889 107.156 cv
264.327 107.718 264.011 108.482 264.011 109.277 cv
264.011 110.073 264.327 110.836 264.889 111.399 cv
265.452 111.961 266.215 112.277 267.011 112.277 cv
cp
@
84.9232 93.235 mo
85.7188 93.235 86.4819 92.9189 87.0445 92.3564 cv
87.6071 91.7938 87.9232 91.0307 87.9232 90.235 cv
87.9232 89.4394 87.6071 88.6763 87.0445 88.1137 cv
86.4819 87.5511 85.7188 87.235 84.9232 87.235 cv
84.1276 87.235 83.3644 87.5511 82.8019 88.1137 cv
82.2393 88.6763 81.9232 89.4394 81.9232 90.235 cv
81.9232 91.0307 82.2393 91.7938 82.8019 92.3564 cv
83.3644 92.9189 84.1276 93.235 84.9232 93.235 cv
cp
f
84.9232 93.235 mo
85.7188 93.235 86.4819 92.9189 87.0445 92.3564 cv
87.6071 91.7938 87.9232 91.0307 87.9232 90.235 cv
87.9232 89.4394 87.6071 88.6763 87.0445 88.1137 cv
86.4819 87.5511 85.7188 87.235 84.9232 87.235 cv
84.1276 87.235 83.3644 87.5511 82.8019 88.1137 cv
82.2393 88.6763 81.9232 89.4394 81.9232 90.235 cv
81.9232 91.0307 82.2393 91.7938 82.8019 92.3564 cv
83.3644 92.9189 84.1276 93.235 84.9232 93.235 cv
cp
@
178.283 152.123 mo
179.079 152.123 179.842 151.807 180.405 151.244 cv
180.967 150.682 181.283 149.919 181.283 149.123 cv
181.283 148.327 180.967 147.564 180.405 147.002 cv
179.842 146.439 179.079 146.123 178.283 146.123 cv
177.488 146.123 176.725 146.439 176.162 147.002 cv
175.6 147.564 175.283 148.327 175.283 149.123 cv
175.283 149.919 175.6 150.682 176.162 151.244 cv
176.725 151.807 177.488 152.123 178.283 152.123 cv
cp
f
178.283 152.123 mo
179.079 152.123 179.842 151.807 180.405 151.244 cv
180.967 150.682 181.283 149.919 181.283 149.123 cv
181.283 148.327 180.967 147.564 180.405 147.002 cv
179.842 146.439 179.079 146.123 178.283 146.123 cv
177.488 146.123 176.725 146.439 176.162 147.002 cv
175.6 147.564 175.283 148.327 175.283 149.123 cv
175.283 149.919 175.6 150.682 176.162 151.244 cv
176.725 151.807 177.488 152.123 178.283 152.123 cv
cp
@
208.6 81.5911 mo
209.395 81.5911 210.159 81.275 210.721 80.7124 cv
211.284 80.1498 211.6 79.3867 211.6 78.5911 cv
211.6 77.7955 211.284 77.0324 210.721 76.4698 cv
210.159 75.9072 209.395 75.5911 208.6 75.5911 cv
207.804 75.5911 207.041 75.9072 206.479 76.4698 cv
205.916 77.0324 205.6 77.7955 205.6 78.5911 cv
205.6 79.3867 205.916 80.1498 206.479 80.7124 cv
207.041 81.275 207.804 81.5911 208.6 81.5911 cv
cp
f
208.6 81.5911 mo
209.395 81.5911 210.159 81.275 210.721 80.7124 cv
211.284 80.1498 211.6 79.3867 211.6 78.5911 cv
211.6 77.7955 211.284 77.0324 210.721 76.4698 cv
210.159 75.9072 209.395 75.5911 208.6 75.5911 cv
207.804 75.5911 207.041 75.9072 206.479 76.4698 cv
205.916 77.0324 205.6 77.7955 205.6 78.5911 cv
205.6 79.3867 205.916 80.1498 206.479 80.7124 cv
207.041 81.275 207.804 81.5911 208.6 81.5911 cv
cp
@
142.716 49.3289 mo
143.512 49.3289 144.275 49.0129 144.838 48.4503 cv
145.4 47.8877 145.716 47.1246 145.716 46.3289 cv
145.716 45.5333 145.4 44.7702 144.838 44.2076 cv
144.275 43.645 143.512 43.3289 142.716 43.3289 cv
141.921 43.3289 141.158 43.645 140.595 44.2076 cv
140.033 44.7702 139.716 45.5333 139.716 46.3289 cv
139.716 47.1246 140.033 47.8877 140.595 48.4503 cv
141.158 49.0129 141.921 49.3289 142.716 49.3289 cv
cp
f
142.716 49.3289 mo
143.512 49.3289 144.275 49.0129 144.838 48.4503 cv
145.4 47.8877 145.716 47.1246 145.716 46.3289 cv
145.716 45.5333 145.4 44.7702 144.838 44.2076 cv
144.275 43.645 143.512 43.3289 142.716 43.3289 cv
141.921 43.3289 141.158 43.645 140.595 44.2076 cv
140.033 44.7702 139.716 45.5333 139.716 46.3289 cv
139.716 47.1246 140.033 47.8877 140.595 48.4503 cv
141.158 49.0129 141.921 49.3289 142.716 49.3289 cv
cp
@
127.067 156.621 mo
127.863 156.621 128.626 156.305 129.189 155.742 cv
129.751 155.18 130.067 154.417 130.067 153.621 cv
130.067 152.825 129.751 152.062 129.189 151.5 cv
128.626 150.937 127.863 150.621 127.067 150.621 cv
126.272 150.621 125.508 150.937 124.946 151.5 cv
124.383 152.062 124.067 152.825 124.067 153.621 cv
124.067 154.417 124.383 155.18 124.946 155.742 cv
125.508 156.305 126.272 156.621 127.067 156.621 cv
cp
f
127.067 156.621 mo
127.863 156.621 128.626 156.305 129.189 155.742 cv
129.751 155.18 130.067 154.417 130.067 153.621 cv
130.067 152.825 129.751 152.062 129.189 151.5 cv
128.626 150.937 127.863 150.621 127.067 150.621 cv
126.272 150.621 125.508 150.937 124.946 151.5 cv
124.383 152.062 124.067 152.825 124.067 153.621 cv
124.067 154.417 124.383 155.18 124.946 155.742 cv
125.508 156.305 126.272 156.621 127.067 156.621 cv
cp
@
321.935 137.304 mo
322.731 137.304 323.494 136.988 324.056 136.425 cv
324.619 135.862 324.935 135.099 324.935 134.304 cv
324.935 133.508 324.619 132.745 324.056 132.182 cv
323.494 131.62 322.731 131.304 321.935 131.304 cv
321.14 131.304 320.376 131.62 319.814 132.182 cv
319.251 132.745 318.935 133.508 318.935 134.304 cv
318.935 135.099 319.251 135.862 319.814 136.425 cv
320.376 136.988 321.14 137.304 321.935 137.304 cv
cp
f
321.935 137.304 mo
322.731 137.304 323.494 136.988 324.056 136.425 cv
324.619 135.862 324.935 135.099 324.935 134.304 cv
324.935 133.508 324.619 132.745 324.056 132.182 cv
323.494 131.62 322.731 131.304 321.935 131.304 cv
321.14 131.304 320.376 131.62 319.814 132.182 cv
319.251 132.745 318.935 133.508 318.935 134.304 cv
318.935 135.099 319.251 135.862 319.814 136.425 cv
320.376 136.988 321.14 137.304 321.935 137.304 cv
cp
@
341.543 127.462 mo
342.339 127.462 343.102 127.146 343.664 126.583 cv
344.227 126.02 344.543 125.257 344.543 124.462 cv
344.543 123.666 344.227 122.903 343.664 122.34 cv
343.102 121.778 342.339 121.462 341.543 121.462 cv
340.747 121.462 339.984 121.778 339.422 122.34 cv
338.859 122.903 338.543 123.666 338.543 124.462 cv
338.543 125.257 338.859 126.02 339.422 126.583 cv
339.984 127.146 340.747 127.462 341.543 127.462 cv
cp
f
341.543 127.462 mo
342.339 127.462 343.102 127.146 343.664 126.583 cv
344.227 126.02 344.543 125.257 344.543 124.462 cv
344.543 123.666 344.227 122.903 343.664 122.34 cv
343.102 121.778 342.339 121.462 341.543 121.462 cv
340.747 121.462 339.984 121.778 339.422 122.34 cv
338.859 122.903 338.543 123.666 338.543 124.462 cv
338.543 125.257 338.859 126.02 339.422 126.583 cv
339.984 127.146 340.747 127.462 341.543 127.462 cv
cp
@
366.585 39.2145 mo
367.381 39.2145 368.144 38.8984 368.707 38.3359 cv
369.269 37.7733 369.585 37.0101 369.585 36.2145 cv
369.585 35.4189 369.269 34.6558 368.707 34.0932 cv
368.144 33.5306 367.381 33.2145 366.585 33.2145 cv
365.79 33.2145 365.027 33.5306 364.464 34.0932 cv
363.901 34.6558 363.585 35.4189 363.585 36.2145 cv
363.585 37.0101 363.901 37.7733 364.464 38.3359 cv
365.027 38.8984 365.79 39.2145 366.585 39.2145 cv
cp
f
366.585 39.2145 mo
367.381 39.2145 368.144 38.8984 368.707 38.3359 cv
369.269 37.7733 369.585 37.0101 369.585 36.2145 cv
369.585 35.4189 369.269 34.6558 368.707 34.0932 cv
368.144 33.5306 367.381 33.2145 366.585 33.2145 cv
365.79 33.2145 365.027 33.5306 364.464 34.0932 cv
363.901 34.6558 363.585 35.4189 363.585 36.2145 cv
363.585 37.0101 363.901 37.7733 364.464 38.3359 cv
365.027 38.8984 365.79 39.2145 366.585 39.2145 cv
cp
@
425.791 158.767 mo
426.586 158.767 427.35 158.451 427.912 157.888 cv
428.475 157.326 428.791 156.562 428.791 155.767 cv
428.791 154.971 428.475 154.208 427.912 153.646 cv
427.35 153.083 426.586 152.767 425.791 152.767 cv
424.995 152.767 424.232 153.083 423.67 153.646 cv
423.107 154.208 422.791 154.971 422.791 155.767 cv
422.791 156.562 423.107 157.326 423.67 157.888 cv
424.232 158.451 424.995 158.767 425.791 158.767 cv
cp
f
425.791 158.767 mo
426.586 158.767 427.35 158.451 427.912 157.888 cv
428.475 157.326 428.791 156.562 428.791 155.767 cv
428.791 154.971 428.475 154.208 427.912 153.646 cv
427.35 153.083 426.586 152.767 425.791 152.767 cv
424.995 152.767 424.232 153.083 423.67 153.646 cv
423.107 154.208 422.791 154.971 422.791 155.767 cv
422.791 156.562 423.107 157.326 423.67 157.888 cv
424.232 158.451 424.995 158.767 425.791 158.767 cv
cp
@
352.326 96.2202 mo
353.122 96.2202 353.885 95.9041 354.448 95.3416 cv
355.01 94.779 355.326 94.0159 355.326 93.2202 cv
355.326 92.4246 355.01 91.6615 354.448 91.0989 cv
353.885 90.5363 353.122 90.2202 352.326 90.2202 cv
351.531 90.2202 350.768 90.5363 350.205 91.0989 cv
349.643 91.6615 349.326 92.4246 349.326 93.2202 cv
349.326 94.0159 349.643 94.779 350.205 95.3416 cv
350.768 95.9041 351.531 96.2202 352.326 96.2202 cv
cp
f
352.326 96.2202 mo
353.122 96.2202 353.885 95.9041 354.448 95.3416 cv
355.01 94.779 355.326 94.0159 355.326 93.2202 cv
355.326 92.4246 355.01 91.6615 354.448 91.0989 cv
353.885 90.5363 353.122 90.2202 352.326 90.2202 cv
351.531 90.2202 350.768 90.5363 350.205 91.0989 cv
349.643 91.6615 349.326 92.4246 349.326 93.2202 cv
349.326 94.0159 349.643 94.779 350.205 95.3416 cv
350.768 95.9041 351.531 96.2202 352.326 96.2202 cv
cp
@
340.522 143.998 mo
341.318 143.998 342.081 143.682 342.643 143.119 cv
343.206 142.557 343.522 141.794 343.522 140.998 cv
343.522 140.202 343.206 139.439 342.643 138.877 cv
342.081 138.314 341.318 137.998 340.522 137.998 cv
339.727 137.998 338.963 138.314 338.401 138.877 cv
337.838 139.439 337.522 140.202 337.522 140.998 cv
337.522 141.794 337.838 142.557 338.401 143.119 cv
338.963 143.682 339.727 143.998 340.522 143.998 cv
cp
f
340.522 143.998 mo
341.318 143.998 342.081 143.682 342.643 143.119 cv
343.206 142.557 343.522 141.794 343.522 140.998 cv
343.522 140.202 343.206 139.439 342.643 138.877 cv
342.081 138.314 341.318 137.998 340.522 137.998 cv
339.727 137.998 338.963 138.314 338.401 138.877 cv
337.838 139.439 337.522 140.202 337.522 140.998 cv
337.522 141.794 337.838 142.557 338.401 143.119 cv
338.963 143.682 339.727 143.998 340.522 143.998 cv
cp
@
409.646 99.826 mo
410.441 99.826 411.205 99.5099 411.767 98.9473 cv
412.33 98.3847 412.646 97.6216 412.646 96.826 cv
412.646 96.0303 412.33 95.2672 411.767 94.7046 cv
411.205 94.1421 410.441 93.826 409.646 93.826 cv
408.85 93.826 408.087 94.1421 407.525 94.7046 cv
406.962 95.2672 406.646 96.0303 406.646 96.826 cv
406.646 97.6216 406.962 98.3847 407.525 98.9473 cv
408.087 99.5099 408.85 99.826 409.646 99.826 cv
cp
f
409.646 99.826 mo
410.441 99.826 411.205 99.5099 411.767 98.9473 cv
412.33 98.3847 412.646 97.6216 412.646 96.826 cv
412.646 96.0303 412.33 95.2672 411.767 94.7046 cv
411.205 94.1421 410.441 93.826 409.646 93.826 cv
408.85 93.826 408.087 94.1421 407.525 94.7046 cv
406.962 95.2672 406.646 96.0303 406.646 96.826 cv
406.646 97.6216 406.962 98.3847 407.525 98.9473 cv
408.087 99.5099 408.85 99.826 409.646 99.826 cv
cp
@
93.4205 105.293 mo
94.2161 105.293 94.9793 104.977 95.5419 104.414 cv
96.1044 103.852 96.4205 103.089 96.4205 102.293 cv
96.4205 101.497 96.1044 100.734 95.5419 100.172 cv
94.9793 99.6092 94.2161 99.2931 93.4205 99.2931 cv
92.6249 99.2931 91.8618 99.6092 91.2992 100.172 cv
90.7366 100.734 90.4205 101.497 90.4205 102.293 cv
90.4205 103.089 90.7366 103.852 91.2992 104.414 cv
91.8618 104.977 92.6249 105.293 93.4205 105.293 cv
cp
f
93.4205 105.293 mo
94.2161 105.293 94.9793 104.977 95.5419 104.414 cv
96.1044 103.852 96.4205 103.089 96.4205 102.293 cv
96.4205 101.497 96.1044 100.734 95.5419 100.172 cv
94.9793 99.6092 94.2161 99.2931 93.4205 99.2931 cv
92.6249 99.2931 91.8618 99.6092 91.2992 100.172 cv
90.7366 100.734 90.4205 101.497 90.4205 102.293 cv
90.4205 103.089 90.7366 103.852 91.2992 104.414 cv
91.8618 104.977 92.6249 105.293 93.4205 105.293 cv
cp
@
141.558 57.9195 mo
142.354 57.9195 143.117 57.6034 143.679 57.0408 cv
144.242 56.4782 144.558 55.7151 144.558 54.9195 cv
144.558 54.1239 144.242 53.3608 143.679 52.7982 cv
143.117 52.2356 142.354 51.9195 141.558 51.9195 cv
140.763 51.9195 139.999 52.2356 139.437 52.7982 cv
138.874 53.3608 138.558 54.1239 138.558 54.9195 cv
138.558 55.7151 138.874 56.4782 139.437 57.0408 cv
139.999 57.6034 140.763 57.9195 141.558 57.9195 cv
cp
f
141.558 57.9195 mo
142.354 57.9195 143.117 57.6034 143.679 57.0408 cv
144.242 56.4782 144.558 55.7151 144.558 54.9195 cv
144.558 54.1239 144.242 53.3608 143.679 52.7982 cv
143.117 52.2356 142.354 51.9195 141.558 51.9195 cv
140.763 51.9195 139.999 52.2356 139.437 52.7982 cv
138.874 53.3608 138.558 54.1239 138.558 54.9195 cv
138.558 55.7151 138.874 56.4782 139.437 57.0408 cv
139.999 57.6034 140.763 57.9195 141.558 57.9195 cv
cp
@
147.309 137.939 mo
148.105 137.939 148.868 137.623 149.431 137.06 cv
149.993 136.498 150.309 135.734 150.309 134.939 cv
150.309 134.143 149.993 133.38 149.431 132.818 cv
148.868 132.255 148.105 131.939 147.309 131.939 cv
146.514 131.939 145.751 132.255 145.188 132.818 cv
144.626 133.38 144.309 134.143 144.309 134.939 cv
144.309 135.734 144.626 136.498 145.188 137.06 cv
145.751 137.623 146.514 137.939 147.309 137.939 cv
cp
f
147.309 137.939 mo
148.105 137.939 148.868 137.623 149.431 137.06 cv
149.993 136.498 150.309 135.734 150.309 134.939 cv
150.309 134.143 149.993 133.38 149.431 132.818 cv
148.868 132.255 148.105 131.939 147.309 131.939 cv
146.514 131.939 145.751 132.255 145.188 132.818 cv
144.626 133.38 144.309 134.143 144.309 134.939 cv
144.309 135.734 144.626 136.498 145.188 137.06 cv
145.751 137.623 146.514 137.939 147.309 137.939 cv
cp
@
250.669 120.253 mo
251.464 120.253 252.227 119.937 252.79 119.374 cv
253.352 118.812 253.669 118.048 253.669 117.253 cv
253.669 116.457 253.352 115.694 252.79 115.131 cv
252.227 114.569 251.464 114.253 250.669 114.253 cv
249.873 114.253 249.11 114.569 248.547 115.131 cv
247.985 115.694 247.669 116.457 247.669 117.253 cv
247.669 118.048 247.985 118.812 248.547 119.374 cv
249.11 119.937 249.873 120.253 250.669 120.253 cv
cp
f
250.669 120.253 mo
251.464 120.253 252.227 119.937 252.79 119.374 cv
253.352 118.812 253.669 118.048 253.669 117.253 cv
253.669 116.457 253.352 115.694 252.79 115.131 cv
252.227 114.569 251.464 114.253 250.669 114.253 cv
249.873 114.253 249.11 114.569 248.547 115.131 cv
247.985 115.694 247.669 116.457 247.669 117.253 cv
247.669 118.048 247.985 118.812 248.547 119.374 cv
249.11 119.937 249.873 120.253 250.669 120.253 cv
cp
@
476.501 140.78 mo
477.297 140.78 478.06 140.464 478.622 139.901 cv
479.185 139.338 479.501 138.575 479.501 137.78 cv
479.501 136.984 479.185 136.221 478.622 135.658 cv
478.06 135.096 477.297 134.78 476.501 134.78 cv
475.706 134.78 474.942 135.096 474.38 135.658 cv
473.817 136.221 473.501 136.984 473.501 137.78 cv
473.501 138.575 473.817 139.338 474.38 139.901 cv
474.942 140.464 475.706 140.78 476.501 140.78 cv
cp
f
476.501 140.78 mo
477.297 140.78 478.06 140.464 478.622 139.901 cv
479.185 139.338 479.501 138.575 479.501 137.78 cv
479.501 136.984 479.185 136.221 478.622 135.658 cv
478.06 135.096 477.297 134.78 476.501 134.78 cv
475.706 134.78 474.942 135.096 474.38 135.658 cv
473.817 136.221 473.501 136.984 473.501 137.78 cv
473.501 138.575 473.817 139.338 474.38 139.901 cv
474.942 140.464 475.706 140.78 476.501 140.78 cv
cp
@
295.89 45.5789 mo
296.686 45.5789 297.449 45.2628 298.012 44.7002 cv
298.574 44.1376 298.89 43.3745 298.89 42.5789 cv
298.89 41.7833 298.574 41.0201 298.012 40.4576 cv
297.449 39.895 296.686 39.5789 295.89 39.5789 cv
295.095 39.5789 294.332 39.895 293.769 40.4576 cv
293.206 41.0201 292.89 41.7833 292.89 42.5789 cv
292.89 43.3745 293.206 44.1376 293.769 44.7002 cv
294.332 45.2628 295.095 45.5789 295.89 45.5789 cv
cp
f
295.89 45.5789 mo
296.686 45.5789 297.449 45.2628 298.012 44.7002 cv
298.574 44.1376 298.89 43.3745 298.89 42.5789 cv
298.89 41.7833 298.574 41.0201 298.012 40.4576 cv
297.449 39.895 296.686 39.5789 295.89 39.5789 cv
295.095 39.5789 294.332 39.895 293.769 40.4576 cv
293.206 41.0201 292.89 41.7833 292.89 42.5789 cv
292.89 43.3745 293.206 44.1376 293.769 44.7002 cv
294.332 45.2628 295.095 45.5789 295.89 45.5789 cv
cp
@
104.417 93.4519 mo
105.213 93.4519 105.976 93.1358 106.539 92.5732 cv
107.101 92.0106 107.417 91.2475 107.417 90.4519 cv
107.417 89.6563 107.101 88.8931 106.539 88.3306 cv
105.976 87.768 105.213 87.4519 104.417 87.4519 cv
103.622 87.4519 102.858 87.768 102.296 88.3306 cv
101.733 88.8931 101.417 89.6563 101.417 90.4519 cv
101.417 91.2475 101.733 92.0106 102.296 92.5732 cv
102.858 93.1358 103.622 93.4519 104.417 93.4519 cv
cp
f
104.417 93.4519 mo
105.213 93.4519 105.976 93.1358 106.539 92.5732 cv
107.101 92.0106 107.417 91.2475 107.417 90.4519 cv
107.417 89.6563 107.101 88.8931 106.539 88.3306 cv
105.976 87.768 105.213 87.4519 104.417 87.4519 cv
103.622 87.4519 102.858 87.768 102.296 88.3306 cv
101.733 88.8931 101.417 89.6563 101.417 90.4519 cv
101.417 91.2475 101.733 92.0106 102.296 92.5732 cv
102.858 93.1358 103.622 93.4519 104.417 93.4519 cv
cp
@
139.336 60.3386 mo
140.131 60.3386 140.894 60.0225 141.457 59.4599 cv
142.019 58.8973 142.336 58.1342 142.336 57.3386 cv
142.336 56.543 142.019 55.7799 141.457 55.2173 cv
140.894 54.6547 140.131 54.3386 139.336 54.3386 cv
138.54 54.3386 137.777 54.6547 137.214 55.2173 cv
136.652 55.7799 136.336 56.543 136.336 57.3386 cv
136.336 58.1342 136.652 58.8973 137.214 59.4599 cv
137.777 60.0225 138.54 60.3386 139.336 60.3386 cv
cp
f
139.336 60.3386 mo
140.131 60.3386 140.894 60.0225 141.457 59.4599 cv
142.019 58.8973 142.336 58.1342 142.336 57.3386 cv
142.336 56.543 142.019 55.7799 141.457 55.2173 cv
140.894 54.6547 140.131 54.3386 139.336 54.3386 cv
138.54 54.3386 137.777 54.6547 137.214 55.2173 cv
136.652 55.7799 136.336 56.543 136.336 57.3386 cv
136.336 58.1342 136.652 58.8973 137.214 59.4599 cv
137.777 60.0225 138.54 60.3386 139.336 60.3386 cv
cp
@
253.059 57.3246 mo
253.854 57.3246 254.617 57.0085 255.18 56.4459 cv
255.743 55.8833 256.059 55.1202 256.059 54.3246 cv
256.059 53.529 255.743 52.7658 255.18 52.2033 cv
254.617 51.6407 253.854 51.3246 253.059 51.3246 cv
252.263 51.3246 251.5 51.6407 250.937 52.2033 cv
250.375 52.7658 250.059 53.529 250.059 54.3246 cv
250.059 55.1202 250.375 55.8833 250.937 56.4459 cv
251.5 57.0085 252.263 57.3246 253.059 57.3246 cv
cp
f
253.059 57.3246 mo
253.854 57.3246 254.617 57.0085 255.18 56.4459 cv
255.743 55.8833 256.059 55.1202 256.059 54.3246 cv
256.059 53.529 255.743 52.7658 255.18 52.2033 cv
254.617 51.6407 253.854 51.3246 253.059 51.3246 cv
252.263 51.3246 251.5 51.6407 250.937 52.2033 cv
250.375 52.7658 250.059 53.529 250.059 54.3246 cv
250.059 55.1202 250.375 55.8833 250.937 56.4459 cv
251.5 57.0085 252.263 57.3246 253.059 57.3246 cv
cp
@
260.546 100.329 mo
261.342 100.329 262.105 100.013 262.667 99.4501 cv
263.23 98.8875 263.546 98.1244 263.546 97.3288 cv
263.546 96.5332 263.23 95.77 262.667 95.2074 cv
262.105 94.6449 261.342 94.3288 260.546 94.3288 cv
259.75 94.3288 258.987 94.6449 258.425 95.2074 cv
257.862 95.77 257.546 96.5332 257.546 97.3288 cv
257.546 98.1244 257.862 98.8875 258.425 99.4501 cv
258.987 100.013 259.75 100.329 260.546 100.329 cv
cp
f
260.546 100.329 mo
261.342 100.329 262.105 100.013 262.667 99.4501 cv
263.23 98.8875 263.546 98.1244 263.546 97.3288 cv
263.546 96.5332 263.23 95.77 262.667 95.2074 cv
262.105 94.6449 261.342 94.3288 260.546 94.3288 cv
259.75 94.3288 258.987 94.6449 258.425 95.2074 cv
257.862 95.77 257.546 96.5332 257.546 97.3288 cv
257.546 98.1244 257.862 98.8875 258.425 99.4501 cv
258.987 100.013 259.75 100.329 260.546 100.329 cv
cp
@
331.975 138.732 mo
332.771 138.732 333.534 138.416 334.096 137.854 cv
334.659 137.291 334.975 136.528 334.975 135.732 cv
334.975 134.937 334.659 134.173 334.096 133.611 cv
333.534 133.048 332.771 132.732 331.975 132.732 cv
331.179 132.732 330.416 133.048 329.854 133.611 cv
329.291 134.173 328.975 134.937 328.975 135.732 cv
328.975 136.528 329.291 137.291 329.854 137.854 cv
330.416 138.416 331.179 138.732 331.975 138.732 cv
cp
f
331.975 138.732 mo
332.771 138.732 333.534 138.416 334.096 137.854 cv
334.659 137.291 334.975 136.528 334.975 135.732 cv
334.975 134.937 334.659 134.173 334.096 133.611 cv
333.534 133.048 332.771 132.732 331.975 132.732 cv
331.179 132.732 330.416 133.048 329.854 133.611 cv
329.291 134.173 328.975 134.937 328.975 135.732 cv
328.975 136.528 329.291 137.291 329.854 137.854 cv
330.416 138.416 331.179 138.732 331.975 138.732 cv
cp
@
166.724 74.2247 mo
167.52 74.2247 168.283 73.9086 168.845 73.3461 cv
169.408 72.7835 169.724 72.0203 169.724 71.2247 cv
169.724 70.4291 169.408 69.666 168.845 69.1034 cv
168.283 68.5408 167.52 68.2247 166.724 68.2247 cv
165.928 68.2247 165.165 68.5408 164.603 69.1034 cv
164.04 69.666 163.724 70.4291 163.724 71.2247 cv
163.724 72.0203 164.04 72.7835 164.603 73.3461 cv
165.165 73.9086 165.928 74.2247 166.724 74.2247 cv
cp
f
166.724 74.2247 mo
167.52 74.2247 168.283 73.9086 168.845 73.3461 cv
169.408 72.7835 169.724 72.0203 169.724 71.2247 cv
169.724 70.4291 169.408 69.666 168.845 69.1034 cv
168.283 68.5408 167.52 68.2247 166.724 68.2247 cv
165.928 68.2247 165.165 68.5408 164.603 69.1034 cv
164.04 69.666 163.724 70.4291 163.724 71.2247 cv
163.724 72.0203 164.04 72.7835 164.603 73.3461 cv
165.165 73.9086 165.928 74.2247 166.724 74.2247 cv
cp
@
466.407 71.8647 mo
467.203 71.8647 467.966 71.5486 468.528 70.986 cv
469.091 70.4234 469.407 69.6603 469.407 68.8647 cv
469.407 68.069 469.091 67.3059 468.528 66.7433 cv
467.966 66.1808 467.203 65.8647 466.407 65.8647 cv
465.611 65.8647 464.848 66.1808 464.286 66.7433 cv
463.723 67.3059 463.407 68.069 463.407 68.8647 cv
463.407 69.6603 463.723 70.4234 464.286 70.986 cv
464.848 71.5486 465.611 71.8647 466.407 71.8647 cv
cp
f
466.407 71.8647 mo
467.203 71.8647 467.966 71.5486 468.528 70.986 cv
469.091 70.4234 469.407 69.6603 469.407 68.8647 cv
469.407 68.069 469.091 67.3059 468.528 66.7433 cv
467.966 66.1808 467.203 65.8647 466.407 65.8647 cv
465.611 65.8647 464.848 66.1808 464.286 66.7433 cv
463.723 67.3059 463.407 68.069 463.407 68.8647 cv
463.407 69.6603 463.723 70.4234 464.286 70.986 cv
464.848 71.5486 465.611 71.8647 466.407 71.8647 cv
cp
@
339.178 107.71 mo
339.974 107.71 340.737 107.394 341.299 106.832 cv
341.862 106.269 342.178 105.506 342.178 104.71 cv
342.178 103.915 341.862 103.152 341.299 102.589 cv
340.737 102.027 339.974 101.71 339.178 101.71 cv
338.382 101.71 337.619 102.027 337.057 102.589 cv
336.494 103.152 336.178 103.915 336.178 104.71 cv
336.178 105.506 336.494 106.269 337.057 106.832 cv
337.619 107.394 338.382 107.71 339.178 107.71 cv
cp
f
339.178 107.71 mo
339.974 107.71 340.737 107.394 341.299 106.832 cv
341.862 106.269 342.178 105.506 342.178 104.71 cv
342.178 103.915 341.862 103.152 341.299 102.589 cv
340.737 102.027 339.974 101.71 339.178 101.71 cv
338.382 101.71 337.619 102.027 337.057 102.589 cv
336.494 103.152 336.178 103.915 336.178 104.71 cv
336.178 105.506 336.494 106.269 337.057 106.832 cv
337.619 107.394 338.382 107.71 339.178 107.71 cv
cp
@
181.168 159.218 mo
181.964 159.218 182.727 158.902 183.289 158.34 cv
183.852 157.777 184.168 157.014 184.168 156.218 cv
184.168 155.423 183.852 154.659 183.289 154.097 cv
182.727 153.534 181.964 153.218 181.168 153.218 cv
180.373 153.218 179.609 153.534 179.047 154.097 cv
178.484 154.659 178.168 155.423 178.168 156.218 cv
178.168 157.014 178.484 157.777 179.047 158.34 cv
179.609 158.902 180.373 159.218 181.168 159.218 cv
cp
f
181.168 159.218 mo
181.964 159.218 182.727 158.902 183.289 158.34 cv
183.852 157.777 184.168 157.014 184.168 156.218 cv
184.168 155.423 183.852 154.659 183.289 154.097 cv
182.727 153.534 181.964 153.218 181.168 153.218 cv
180.373 153.218 179.609 153.534 179.047 154.097 cv
178.484 154.659 178.168 155.423 178.168 156.218 cv
178.168 157.014 178.484 157.777 179.047 158.34 cv
179.609 158.902 180.373 159.218 181.168 159.218 cv
cp
@
91.2245 152.712 mo
92.0201 152.712 92.7832 152.396 93.3458 151.833 cv
93.9084 151.271 94.2245 150.507 94.2245 149.712 cv
94.2245 148.916 93.9084 148.153 93.3458 147.59 cv
92.7832 147.028 92.0201 146.712 91.2245 146.712 cv
90.4289 146.712 89.6657 147.028 89.1032 147.59 cv
88.5406 148.153 88.2245 148.916 88.2245 149.712 cv
88.2245 150.507 88.5406 151.271 89.1032 151.833 cv
89.6657 152.396 90.4289 152.712 91.2245 152.712 cv
cp
f
91.2245 152.712 mo
92.0201 152.712 92.7832 152.396 93.3458 151.833 cv
93.9084 151.271 94.2245 150.507 94.2245 149.712 cv
94.2245 148.916 93.9084 148.153 93.3458 147.59 cv
92.7832 147.028 92.0201 146.712 91.2245 146.712 cv
90.4289 146.712 89.6657 147.028 89.1032 147.59 cv
88.5406 148.153 88.2245 148.916 88.2245 149.712 cv
88.2245 150.507 88.5406 151.271 89.1032 151.833 cv
89.6657 152.396 90.4289 152.712 91.2245 152.712 cv
cp
@
116.573 155.167 mo
117.369 155.167 118.132 154.851 118.695 154.288 cv
119.257 153.726 119.573 152.962 119.573 152.167 cv
119.573 151.371 119.257 150.608 118.695 150.046 cv
118.132 149.483 117.369 149.167 116.573 149.167 cv
115.778 149.167 115.015 149.483 114.452 150.046 cv
113.89 150.608 113.573 151.371 113.573 152.167 cv
113.573 152.962 113.89 153.726 114.452 154.288 cv
115.015 154.851 115.778 155.167 116.573 155.167 cv
cp
f
116.573 155.167 mo
117.369 155.167 118.132 154.851 118.695 154.288 cv
119.257 153.726 119.573 152.962 119.573 152.167 cv
119.573 151.371 119.257 150.608 118.695 150.046 cv
118.132 149.483 117.369 149.167 116.573 149.167 cv
115.778 149.167 115.015 149.483 114.452 150.046 cv
113.89 150.608 113.573 151.371 113.573 152.167 cv
113.573 152.962 113.89 153.726 114.452 154.288 cv
115.015 154.851 115.778 155.167 116.573 155.167 cv
cp
@
347.643 84.0864 mo
348.438 84.0864 349.201 83.7703 349.764 83.2077 cv
350.327 82.6452 350.643 81.882 350.643 81.0864 cv
350.643 80.2908 350.327 79.5277 349.764 78.9651 cv
349.201 78.4025 348.438 78.0864 347.643 78.0864 cv
346.847 78.0864 346.084 78.4025 345.521 78.9651 cv
344.959 79.5277 344.643 80.2908 344.643 81.0864 cv
344.643 81.882 344.959 82.6452 345.521 83.2077 cv
346.084 83.7703 346.847 84.0864 347.643 84.0864 cv
cp
f
347.643 84.0864 mo
348.438 84.0864 349.201 83.7703 349.764 83.2077 cv
350.327 82.6452 350.643 81.882 350.643 81.0864 cv
350.643 80.2908 350.327 79.5277 349.764 78.9651 cv
349.201 78.4025 348.438 78.0864 347.643 78.0864 cv
346.847 78.0864 346.084 78.4025 345.521 78.9651 cv
344.959 79.5277 344.643 80.2908 344.643 81.0864 cv
344.643 81.882 344.959 82.6452 345.521 83.2077 cv
346.084 83.7703 346.847 84.0864 347.643 84.0864 cv
cp
@
418.541 79.8906 mo
419.336 79.8906 420.099 79.5745 420.662 79.0119 cv
421.225 78.4494 421.541 77.6862 421.541 76.8906 cv
421.541 76.095 421.225 75.3319 420.662 74.7693 cv
420.099 74.2067 419.336 73.8906 418.541 73.8906 cv
417.745 73.8906 416.982 74.2067 416.419 74.7693 cv
415.857 75.3319 415.541 76.095 415.541 76.8906 cv
415.541 77.6862 415.857 78.4494 416.419 79.0119 cv
416.982 79.5745 417.745 79.8906 418.541 79.8906 cv
cp
f
418.541 79.8906 mo
419.336 79.8906 420.099 79.5745 420.662 79.0119 cv
421.225 78.4494 421.541 77.6862 421.541 76.8906 cv
421.541 76.095 421.225 75.3319 420.662 74.7693 cv
420.099 74.2067 419.336 73.8906 418.541 73.8906 cv
417.745 73.8906 416.982 74.2067 416.419 74.7693 cv
415.857 75.3319 415.541 76.095 415.541 76.8906 cv
415.541 77.6862 415.857 78.4494 416.419 79.0119 cv
416.982 79.5745 417.745 79.8906 418.541 79.8906 cv
cp
@
362.734 144.943 mo
363.53 144.943 364.293 144.627 364.856 144.064 cv
365.418 143.502 365.734 142.739 365.734 141.943 cv
365.734 141.148 365.418 140.384 364.856 139.822 cv
364.293 139.259 363.53 138.943 362.734 138.943 cv
361.939 138.943 361.176 139.259 360.613 139.822 cv
360.05 140.384 359.734 141.148 359.734 141.943 cv
359.734 142.739 360.05 143.502 360.613 144.064 cv
361.176 144.627 361.939 144.943 362.734 144.943 cv
cp
f
362.734 144.943 mo
363.53 144.943 364.293 144.627 364.856 144.064 cv
365.418 143.502 365.734 142.739 365.734 141.943 cv
365.734 141.148 365.418 140.384 364.856 139.822 cv
364.293 139.259 363.53 138.943 362.734 138.943 cv
361.939 138.943 361.176 139.259 360.613 139.822 cv
360.05 140.384 359.734 141.148 359.734 141.943 cv
359.734 142.739 360.05 143.502 360.613 144.064 cv
361.176 144.627 361.939 144.943 362.734 144.943 cv
cp
@
228.477 56.9101 mo
229.272 56.9101 230.035 56.594 230.598 56.0314 cv
231.161 55.4688 231.477 54.7057 231.477 53.9101 cv
231.477 53.1145 231.161 52.3514 230.598 51.7888 cv
230.035 51.2262 229.272 50.9101 228.477 50.9101 cv
227.681 50.9101 226.918 51.2262 226.355 51.7888 cv
225.793 52.3514 225.477 53.1145 225.477 53.9101 cv
225.477 54.7057 225.793 55.4688 226.355 56.0314 cv
226.918 56.594 227.681 56.9101 228.477 56.9101 cv
cp
f
228.477 56.9101 mo
229.272 56.9101 230.035 56.594 230.598 56.0314 cv
231.161 55.4688 231.477 54.7057 231.477 53.9101 cv
231.477 53.1145 231.161 52.3514 230.598 51.7888 cv
230.035 51.2262 229.272 50.9101 228.477 50.9101 cv
227.681 50.9101 226.918 51.2262 226.355 51.7888 cv
225.793 52.3514 225.477 53.1145 225.477 53.9101 cv
225.477 54.7057 225.793 55.4688 226.355 56.0314 cv
226.918 56.594 227.681 56.9101 228.477 56.9101 cv
cp
@
370.781 74.108 mo
371.577 74.108 372.34 73.7919 372.903 73.2293 cv
373.465 72.6667 373.781 71.9036 373.781 71.108 cv
373.781 70.3124 373.465 69.5492 372.903 68.9866 cv
372.34 68.4241 371.577 68.108 370.781 68.108 cv
369.986 68.108 369.222 68.4241 368.66 68.9866 cv
368.097 69.5492 367.781 70.3124 367.781 71.108 cv
367.781 71.9036 368.097 72.6667 368.66 73.2293 cv
369.222 73.7919 369.986 74.108 370.781 74.108 cv
cp
f
370.781 74.108 mo
371.577 74.108 372.34 73.7919 372.903 73.2293 cv
373.465 72.6667 373.781 71.9036 373.781 71.108 cv
373.781 70.3124 373.465 69.5492 372.903 68.9866 cv
372.34 68.4241 371.577 68.108 370.781 68.108 cv
369.986 68.108 369.222 68.4241 368.66 68.9866 cv
368.097 69.5492 367.781 70.3124 367.781 71.108 cv
367.781 71.9036 368.097 72.6667 368.66 73.2293 cv
369.222 73.7919 369.986 74.108 370.781 74.108 cv
cp
@
337.108 153.556 mo
337.903 153.556 338.666 153.24 339.229 152.678 cv
339.791 152.115 340.108 151.352 340.108 150.556 cv
340.108 149.761 339.791 148.997 339.229 148.435 cv
338.666 147.872 337.903 147.556 337.108 147.556 cv
336.312 147.556 335.549 147.872 334.986 148.435 cv
334.424 148.997 334.108 149.761 334.108 150.556 cv
334.108 151.352 334.424 152.115 334.986 152.678 cv
335.549 153.24 336.312 153.556 337.108 153.556 cv
cp
f
337.108 153.556 mo
337.903 153.556 338.666 153.24 339.229 152.678 cv
339.791 152.115 340.108 151.352 340.108 150.556 cv
340.108 149.761 339.791 148.997 339.229 148.435 cv
338.666 147.872 337.903 147.556 337.108 147.556 cv
336.312 147.556 335.549 147.872 334.986 148.435 cv
334.424 148.997 334.108 149.761 334.108 150.556 cv
334.108 151.352 334.424 152.115 334.986 152.678 cv
335.549 153.24 336.312 153.556 337.108 153.556 cv
cp
@
92.985 155.342 mo
93.7806 155.342 94.5437 155.026 95.1063 154.463 cv
95.6689 153.901 95.985 153.138 95.985 152.342 cv
95.985 151.546 95.6689 150.783 95.1063 150.221 cv
94.5437 149.658 93.7806 149.342 92.985 149.342 cv
92.1894 149.342 91.4263 149.658 90.8637 150.221 cv
90.3011 150.783 89.985 151.546 89.985 152.342 cv
89.985 153.138 90.3011 153.901 90.8637 154.463 cv
91.4263 155.026 92.1894 155.342 92.985 155.342 cv
cp
.760891 .105776 1 0 cmyk
f
92.985 155.342 mo
93.7806 155.342 94.5437 155.026 95.1063 154.463 cv
95.6689 153.901 95.985 153.138 95.985 152.342 cv
95.985 151.546 95.6689 150.783 95.1063 150.221 cv
94.5437 149.658 93.7806 149.342 92.985 149.342 cv
92.1894 149.342 91.4263 149.658 90.8637 150.221 cv
90.3011 150.783 89.985 151.546 89.985 152.342 cv
89.985 153.138 90.3011 153.901 90.8637 154.463 cv
91.4263 155.026 92.1894 155.342 92.985 155.342 cv
cp
@
245.399 134.089 mo
246.195 134.089 246.958 133.773 247.52 133.21 cv
248.083 132.648 248.399 131.885 248.399 131.089 cv
248.399 130.293 248.083 129.53 247.52 128.968 cv
246.958 128.405 246.195 128.089 245.399 128.089 cv
244.603 128.089 243.84 128.405 243.278 128.968 cv
242.715 129.53 242.399 130.293 242.399 131.089 cv
242.399 131.885 242.715 132.648 243.278 133.21 cv
243.84 133.773 244.603 134.089 245.399 134.089 cv
cp
f
245.399 134.089 mo
246.195 134.089 246.958 133.773 247.52 133.21 cv
248.083 132.648 248.399 131.885 248.399 131.089 cv
248.399 130.293 248.083 129.53 247.52 128.968 cv
246.958 128.405 246.195 128.089 245.399 128.089 cv
244.603 128.089 243.84 128.405 243.278 128.968 cv
242.715 129.53 242.399 130.293 242.399 131.089 cv
242.399 131.885 242.715 132.648 243.278 133.21 cv
243.84 133.773 244.603 134.089 245.399 134.089 cv
cp
@
386.272 114.596 mo
387.067 114.596 387.831 114.28 388.393 113.717 cv
388.956 113.155 389.272 112.392 389.272 111.596 cv
389.272 110.801 388.956 110.037 388.393 109.475 cv
387.831 108.912 387.067 108.596 386.272 108.596 cv
385.476 108.596 384.713 108.912 384.15 109.475 cv
383.588 110.037 383.272 110.801 383.272 111.596 cv
383.272 112.392 383.588 113.155 384.15 113.717 cv
384.713 114.28 385.476 114.596 386.272 114.596 cv
cp
f
386.272 114.596 mo
387.067 114.596 387.831 114.28 388.393 113.717 cv
388.956 113.155 389.272 112.392 389.272 111.596 cv
389.272 110.801 388.956 110.037 388.393 109.475 cv
387.831 108.912 387.067 108.596 386.272 108.596 cv
385.476 108.596 384.713 108.912 384.15 109.475 cv
383.588 110.037 383.272 110.801 383.272 111.596 cv
383.272 112.392 383.588 113.155 384.15 113.717 cv
384.713 114.28 385.476 114.596 386.272 114.596 cv
cp
@
210.075 157.363 mo
210.871 157.363 211.634 157.047 212.196 156.484 cv
212.759 155.921 213.075 155.158 213.075 154.363 cv
213.075 153.567 212.759 152.804 212.196 152.241 cv
211.634 151.679 210.871 151.363 210.075 151.363 cv
209.279 151.363 208.516 151.679 207.954 152.241 cv
207.391 152.804 207.075 153.567 207.075 154.363 cv
207.075 155.158 207.391 155.921 207.954 156.484 cv
208.516 157.047 209.279 157.363 210.075 157.363 cv
cp
f
210.075 157.363 mo
210.871 157.363 211.634 157.047 212.196 156.484 cv
212.759 155.921 213.075 155.158 213.075 154.363 cv
213.075 153.567 212.759 152.804 212.196 152.241 cv
211.634 151.679 210.871 151.363 210.075 151.363 cv
209.279 151.363 208.516 151.679 207.954 152.241 cv
207.391 152.804 207.075 153.567 207.075 154.363 cv
207.075 155.158 207.391 155.921 207.954 156.484 cv
208.516 157.047 209.279 157.363 210.075 157.363 cv
cp
@
348.29 139.892 mo
349.085 139.892 349.849 139.576 350.411 139.013 cv
350.974 138.451 351.29 137.688 351.29 136.892 cv
351.29 136.096 350.974 135.333 350.411 134.771 cv
349.849 134.208 349.085 133.892 348.29 133.892 cv
347.494 133.892 346.731 134.208 346.168 134.771 cv
345.606 135.333 345.29 136.096 345.29 136.892 cv
345.29 137.688 345.606 138.451 346.168 139.013 cv
346.731 139.576 347.494 139.892 348.29 139.892 cv
cp
f
348.29 139.892 mo
349.085 139.892 349.849 139.576 350.411 139.013 cv
350.974 138.451 351.29 137.688 351.29 136.892 cv
351.29 136.096 350.974 135.333 350.411 134.771 cv
349.849 134.208 349.085 133.892 348.29 133.892 cv
347.494 133.892 346.731 134.208 346.168 134.771 cv
345.606 135.333 345.29 136.096 345.29 136.892 cv
345.29 137.688 345.606 138.451 346.168 139.013 cv
346.731 139.576 347.494 139.892 348.29 139.892 cv
cp
@
86.7832 108.547 mo
87.5788 108.547 88.3419 108.231 88.9045 107.668 cv
89.4671 107.106 89.7832 106.343 89.7832 105.547 cv
89.7832 104.752 89.4671 103.988 88.9045 103.426 cv
88.3419 102.863 87.5788 102.547 86.7832 102.547 cv
85.9876 102.547 85.2244 102.863 84.6618 103.426 cv
84.0993 103.988 83.7832 104.752 83.7832 105.547 cv
83.7832 106.343 84.0993 107.106 84.6618 107.668 cv
85.2244 108.231 85.9876 108.547 86.7832 108.547 cv
cp
f
86.7832 108.547 mo
87.5788 108.547 88.3419 108.231 88.9045 107.668 cv
89.4671 107.106 89.7832 106.343 89.7832 105.547 cv
89.7832 104.752 89.4671 103.988 88.9045 103.426 cv
88.3419 102.863 87.5788 102.547 86.7832 102.547 cv
85.9876 102.547 85.2244 102.863 84.6618 103.426 cv
84.0993 103.988 83.7832 104.752 83.7832 105.547 cv
83.7832 106.343 84.0993 107.106 84.6618 107.668 cv
85.2244 108.231 85.9876 108.547 86.7832 108.547 cv
cp
@
409.629 146.971 mo
410.425 146.971 411.188 146.655 411.75 146.092 cv
412.313 145.53 412.629 144.767 412.629 143.971 cv
412.629 143.176 412.313 142.412 411.75 141.85 cv
411.188 141.287 410.425 140.971 409.629 140.971 cv
408.833 140.971 408.07 141.287 407.508 141.85 cv
406.945 142.412 406.629 143.176 406.629 143.971 cv
406.629 144.767 406.945 145.53 407.508 146.092 cv
408.07 146.655 408.833 146.971 409.629 146.971 cv
cp
f
409.629 146.971 mo
410.425 146.971 411.188 146.655 411.75 146.092 cv
412.313 145.53 412.629 144.767 412.629 143.971 cv
412.629 143.176 412.313 142.412 411.75 141.85 cv
411.188 141.287 410.425 140.971 409.629 140.971 cv
408.833 140.971 408.07 141.287 407.508 141.85 cv
406.945 142.412 406.629 143.176 406.629 143.971 cv
406.629 144.767 406.945 145.53 407.508 146.092 cv
408.07 146.655 408.833 146.971 409.629 146.971 cv
cp
@
323.588 149.128 mo
324.383 149.128 325.147 148.812 325.709 148.25 cv
326.272 147.687 326.588 146.924 326.588 146.128 cv
326.588 145.333 326.272 144.57 325.709 144.007 cv
325.147 143.444 324.383 143.128 323.588 143.128 cv
322.792 143.128 322.029 143.444 321.466 144.007 cv
320.904 144.57 320.588 145.333 320.588 146.128 cv
320.588 146.924 320.904 147.687 321.466 148.25 cv
322.029 148.812 322.792 149.128 323.588 149.128 cv
cp
f
323.588 149.128 mo
324.383 149.128 325.147 148.812 325.709 148.25 cv
326.272 147.687 326.588 146.924 326.588 146.128 cv
326.588 145.333 326.272 144.57 325.709 144.007 cv
325.147 143.444 324.383 143.128 323.588 143.128 cv
322.792 143.128 322.029 143.444 321.466 144.007 cv
320.904 144.57 320.588 145.333 320.588 146.128 cv
320.588 146.924 320.904 147.687 321.466 148.25 cv
322.029 148.812 322.792 149.128 323.588 149.128 cv
cp
@
240.937 91.5822 mo
241.732 91.5822 242.495 91.2661 243.058 90.7035 cv
243.621 90.1409 243.937 89.3777 243.937 88.5822 cv
243.937 87.7865 243.621 87.0234 243.058 86.4608 cv
242.495 85.8982 241.732 85.5822 240.937 85.5822 cv
240.141 85.5822 239.378 85.8982 238.815 86.4608 cv
238.253 87.0234 237.937 87.7865 237.937 88.5822 cv
237.937 89.3777 238.253 90.1409 238.815 90.7035 cv
239.378 91.2661 240.141 91.5822 240.937 91.5822 cv
cp
f
240.937 91.5822 mo
241.732 91.5822 242.495 91.2661 243.058 90.7035 cv
243.621 90.1409 243.937 89.3777 243.937 88.5822 cv
243.937 87.7865 243.621 87.0234 243.058 86.4608 cv
242.495 85.8982 241.732 85.5822 240.937 85.5822 cv
240.141 85.5822 239.378 85.8982 238.815 86.4608 cv
238.253 87.0234 237.937 87.7865 237.937 88.5822 cv
237.937 89.3777 238.253 90.1409 238.815 90.7035 cv
239.378 91.2661 240.141 91.5822 240.937 91.5822 cv
cp
@
104.823 126.278 mo
105.619 126.278 106.382 125.962 106.944 125.4 cv
107.507 124.837 107.823 124.074 107.823 123.278 cv
107.823 122.483 107.507 121.72 106.944 121.157 cv
106.382 120.594 105.619 120.278 104.823 120.278 cv
104.028 120.278 103.264 120.594 102.702 121.157 cv
102.139 121.72 101.823 122.483 101.823 123.278 cv
101.823 124.074 102.139 124.837 102.702 125.4 cv
103.264 125.962 104.028 126.278 104.823 126.278 cv
cp
f
104.823 126.278 mo
105.619 126.278 106.382 125.962 106.944 125.4 cv
107.507 124.837 107.823 124.074 107.823 123.278 cv
107.823 122.483 107.507 121.72 106.944 121.157 cv
106.382 120.594 105.619 120.278 104.823 120.278 cv
104.028 120.278 103.264 120.594 102.702 121.157 cv
102.139 121.72 101.823 122.483 101.823 123.278 cv
101.823 124.074 102.139 124.837 102.702 125.4 cv
103.264 125.962 104.028 126.278 104.823 126.278 cv
cp
@
227.065 135.944 mo
227.861 135.944 228.624 135.628 229.187 135.065 cv
229.749 134.503 230.065 133.74 230.065 132.944 cv
230.065 132.148 229.749 131.385 229.187 130.823 cv
228.624 130.26 227.861 129.944 227.065 129.944 cv
226.27 129.944 225.507 130.26 224.944 130.823 cv
224.382 131.385 224.065 132.148 224.065 132.944 cv
224.065 133.74 224.382 134.503 224.944 135.065 cv
225.507 135.628 226.27 135.944 227.065 135.944 cv
cp
f
227.065 135.944 mo
227.861 135.944 228.624 135.628 229.187 135.065 cv
229.749 134.503 230.065 133.74 230.065 132.944 cv
230.065 132.148 229.749 131.385 229.187 130.823 cv
228.624 130.26 227.861 129.944 227.065 129.944 cv
226.27 129.944 225.507 130.26 224.944 130.823 cv
224.382 131.385 224.065 132.148 224.065 132.944 cv
224.065 133.74 224.382 134.503 224.944 135.065 cv
225.507 135.628 226.27 135.944 227.065 135.944 cv
cp
@
484.628 136.097 mo
485.424 136.097 486.187 135.781 486.75 135.219 cv
487.312 134.656 487.628 133.893 487.628 133.097 cv
487.628 132.302 487.312 131.539 486.75 130.976 cv
486.187 130.414 485.424 130.097 484.628 130.097 cv
483.833 130.097 483.069 130.414 482.507 130.976 cv
481.944 131.539 481.628 132.302 481.628 133.097 cv
481.628 133.893 481.944 134.656 482.507 135.219 cv
483.069 135.781 483.833 136.097 484.628 136.097 cv
cp
f
484.628 136.097 mo
485.424 136.097 486.187 135.781 486.75 135.219 cv
487.312 134.656 487.628 133.893 487.628 133.097 cv
487.628 132.302 487.312 131.539 486.75 130.976 cv
486.187 130.414 485.424 130.097 484.628 130.097 cv
483.833 130.097 483.069 130.414 482.507 130.976 cv
481.944 131.539 481.628 132.302 481.628 133.097 cv
481.628 133.893 481.944 134.656 482.507 135.219 cv
483.069 135.781 483.833 136.097 484.628 136.097 cv
cp
@
195.27 78.4059 mo
196.065 78.4059 196.829 78.0898 197.391 77.5273 cv
197.954 76.9647 198.27 76.2016 198.27 75.4059 cv
198.27 74.6104 197.954 73.8472 197.391 73.2846 cv
196.829 72.722 196.065 72.4059 195.27 72.4059 cv
194.474 72.4059 193.711 72.722 193.148 73.2846 cv
192.586 73.8472 192.27 74.6104 192.27 75.4059 cv
192.27 76.2016 192.586 76.9647 193.148 77.5273 cv
193.711 78.0898 194.474 78.4059 195.27 78.4059 cv
cp
f
195.27 78.4059 mo
196.065 78.4059 196.829 78.0898 197.391 77.5273 cv
197.954 76.9647 198.27 76.2016 198.27 75.4059 cv
198.27 74.6104 197.954 73.8472 197.391 73.2846 cv
196.829 72.722 196.065 72.4059 195.27 72.4059 cv
194.474 72.4059 193.711 72.722 193.148 73.2846 cv
192.586 73.8472 192.27 74.6104 192.27 75.4059 cv
192.27 76.2016 192.586 76.9647 193.148 77.5273 cv
193.711 78.0898 194.474 78.4059 195.27 78.4059 cv
cp
@
107.971 77.9129 mo
108.767 77.9129 109.53 77.5968 110.093 77.0342 cv
110.655 76.4716 110.971 75.7085 110.971 74.9129 cv
110.971 74.1172 110.655 73.3541 110.093 72.7915 cv
109.53 72.229 108.767 71.9129 107.971 71.9129 cv
107.176 71.9129 106.413 72.229 105.85 72.7915 cv
105.287 73.3541 104.971 74.1172 104.971 74.9129 cv
104.971 75.7085 105.287 76.4716 105.85 77.0342 cv
106.413 77.5968 107.176 77.9129 107.971 77.9129 cv
cp
f
107.971 77.9129 mo
108.767 77.9129 109.53 77.5968 110.093 77.0342 cv
110.655 76.4716 110.971 75.7085 110.971 74.9129 cv
110.971 74.1172 110.655 73.3541 110.093 72.7915 cv
109.53 72.229 108.767 71.9129 107.971 71.9129 cv
107.176 71.9129 106.413 72.229 105.85 72.7915 cv
105.287 73.3541 104.971 74.1172 104.971 74.9129 cv
104.971 75.7085 105.287 76.4716 105.85 77.0342 cv
106.413 77.5968 107.176 77.9129 107.971 77.9129 cv
cp
@
125.391 85.479 mo
126.186 85.479 126.949 85.1629 127.512 84.6003 cv
128.075 84.0377 128.391 83.2746 128.391 82.479 cv
128.391 81.6834 128.075 80.9203 127.512 80.3577 cv
126.949 79.7951 126.186 79.479 125.391 79.479 cv
124.595 79.479 123.832 79.7951 123.269 80.3577 cv
122.707 80.9203 122.391 81.6834 122.391 82.479 cv
122.391 83.2746 122.707 84.0377 123.269 84.6003 cv
123.832 85.1629 124.595 85.479 125.391 85.479 cv
cp
f
125.391 85.479 mo
126.186 85.479 126.949 85.1629 127.512 84.6003 cv
128.075 84.0377 128.391 83.2746 128.391 82.479 cv
128.391 81.6834 128.075 80.9203 127.512 80.3577 cv
126.949 79.7951 126.186 79.479 125.391 79.479 cv
124.595 79.479 123.832 79.7951 123.269 80.3577 cv
122.707 80.9203 122.391 81.6834 122.391 82.479 cv
122.391 83.2746 122.707 84.0377 123.269 84.6003 cv
123.832 85.1629 124.595 85.479 125.391 85.479 cv
cp
@
256.361 107.225 mo
257.157 107.225 257.92 106.909 258.482 106.346 cv
259.045 105.784 259.361 105.021 259.361 104.225 cv
259.361 103.43 259.045 102.666 258.482 102.104 cv
257.92 101.541 257.157 101.225 256.361 101.225 cv
255.565 101.225 254.802 101.541 254.24 102.104 cv
253.677 102.666 253.361 103.43 253.361 104.225 cv
253.361 105.021 253.677 105.784 254.24 106.346 cv
254.802 106.909 255.565 107.225 256.361 107.225 cv
cp
f
256.361 107.225 mo
257.157 107.225 257.92 106.909 258.482 106.346 cv
259.045 105.784 259.361 105.021 259.361 104.225 cv
259.361 103.43 259.045 102.666 258.482 102.104 cv
257.92 101.541 257.157 101.225 256.361 101.225 cv
255.565 101.225 254.802 101.541 254.24 102.104 cv
253.677 102.666 253.361 103.43 253.361 104.225 cv
253.361 105.021 253.677 105.784 254.24 106.346 cv
254.802 106.909 255.565 107.225 256.361 107.225 cv
cp
@
126.903 107.399 mo
127.699 107.399 128.462 107.083 129.025 106.521 cv
129.587 105.958 129.903 105.195 129.903 104.399 cv
129.903 103.604 129.587 102.841 129.025 102.278 cv
128.462 101.715 127.699 101.399 126.903 101.399 cv
126.108 101.399 125.345 101.715 124.782 102.278 cv
124.219 102.841 123.903 103.604 123.903 104.399 cv
123.903 105.195 124.219 105.958 124.782 106.521 cv
125.345 107.083 126.108 107.399 126.903 107.399 cv
cp
f
126.903 107.399 mo
127.699 107.399 128.462 107.083 129.025 106.521 cv
129.587 105.958 129.903 105.195 129.903 104.399 cv
129.903 103.604 129.587 102.841 129.025 102.278 cv
128.462 101.715 127.699 101.399 126.903 101.399 cv
126.108 101.399 125.345 101.715 124.782 102.278 cv
124.219 102.841 123.903 103.604 123.903 104.399 cv
123.903 105.195 124.219 105.958 124.782 106.521 cv
125.345 107.083 126.108 107.399 126.903 107.399 cv
cp
@
262.908 125.324 mo
263.704 125.324 264.467 125.008 265.03 124.445 cv
265.592 123.882 265.908 123.119 265.908 122.324 cv
265.908 121.528 265.592 120.765 265.03 120.202 cv
264.467 119.64 263.704 119.324 262.908 119.324 cv
262.113 119.324 261.35 119.64 260.787 120.202 cv
260.224 120.765 259.908 121.528 259.908 122.324 cv
259.908 123.119 260.224 123.882 260.787 124.445 cv
261.35 125.008 262.113 125.324 262.908 125.324 cv
cp
f
262.908 125.324 mo
263.704 125.324 264.467 125.008 265.03 124.445 cv
265.592 123.882 265.908 123.119 265.908 122.324 cv
265.908 121.528 265.592 120.765 265.03 120.202 cv
264.467 119.64 263.704 119.324 262.908 119.324 cv
262.113 119.324 261.35 119.64 260.787 120.202 cv
260.224 120.765 259.908 121.528 259.908 122.324 cv
259.908 123.119 260.224 123.882 260.787 124.445 cv
261.35 125.008 262.113 125.324 262.908 125.324 cv
cp
@
311.09 153.394 mo
311.885 153.394 312.649 153.078 313.211 152.515 cv
313.774 151.953 314.09 151.19 314.09 150.394 cv
314.09 149.598 313.774 148.835 313.211 148.273 cv
312.649 147.71 311.885 147.394 311.09 147.394 cv
310.294 147.394 309.531 147.71 308.969 148.273 cv
308.406 148.835 308.09 149.598 308.09 150.394 cv
308.09 151.19 308.406 151.953 308.969 152.515 cv
309.531 153.078 310.294 153.394 311.09 153.394 cv
cp
f
311.09 153.394 mo
311.885 153.394 312.649 153.078 313.211 152.515 cv
313.774 151.953 314.09 151.19 314.09 150.394 cv
314.09 149.598 313.774 148.835 313.211 148.273 cv
312.649 147.71 311.885 147.394 311.09 147.394 cv
310.294 147.394 309.531 147.71 308.969 148.273 cv
308.406 148.835 308.09 149.598 308.09 150.394 cv
308.09 151.19 308.406 151.953 308.969 152.515 cv
309.531 153.078 310.294 153.394 311.09 153.394 cv
cp
@
367.123 155.395 mo
367.919 155.395 368.682 155.079 369.245 154.516 cv
369.807 153.954 370.123 153.19 370.123 152.395 cv
370.123 151.599 369.807 150.836 369.245 150.273 cv
368.682 149.711 367.919 149.395 367.123 149.395 cv
366.328 149.395 365.565 149.711 365.002 150.273 cv
364.44 150.836 364.123 151.599 364.123 152.395 cv
364.123 153.19 364.44 153.954 365.002 154.516 cv
365.565 155.079 366.328 155.395 367.123 155.395 cv
cp
f
367.123 155.395 mo
367.919 155.395 368.682 155.079 369.245 154.516 cv
369.807 153.954 370.123 153.19 370.123 152.395 cv
370.123 151.599 369.807 150.836 369.245 150.273 cv
368.682 149.711 367.919 149.395 367.123 149.395 cv
366.328 149.395 365.565 149.711 365.002 150.273 cv
364.44 150.836 364.123 151.599 364.123 152.395 cv
364.123 153.19 364.44 153.954 365.002 154.516 cv
365.565 155.079 366.328 155.395 367.123 155.395 cv
cp
@
187.42 87.4634 mo
188.216 87.4634 188.979 87.1473 189.542 86.5847 cv
190.104 86.0221 190.42 85.259 190.42 84.4634 cv
190.42 83.6678 190.104 82.9047 189.542 82.3421 cv
188.979 81.7795 188.216 81.4634 187.42 81.4634 cv
186.625 81.4634 185.862 81.7795 185.299 82.3421 cv
184.736 82.9047 184.42 83.6678 184.42 84.4634 cv
184.42 85.259 184.736 86.0221 185.299 86.5847 cv
185.862 87.1473 186.625 87.4634 187.42 87.4634 cv
cp
f
187.42 87.4634 mo
188.216 87.4634 188.979 87.1473 189.542 86.5847 cv
190.104 86.0221 190.42 85.259 190.42 84.4634 cv
190.42 83.6678 190.104 82.9047 189.542 82.3421 cv
188.979 81.7795 188.216 81.4634 187.42 81.4634 cv
186.625 81.4634 185.862 81.7795 185.299 82.3421 cv
184.736 82.9047 184.42 83.6678 184.42 84.4634 cv
184.42 85.259 184.736 86.0221 185.299 86.5847 cv
185.862 87.1473 186.625 87.4634 187.42 87.4634 cv
cp
@
227.257 150.683 mo
228.052 150.683 228.815 150.367 229.378 149.804 cv
229.94 149.242 230.257 148.479 230.257 147.683 cv
230.257 146.888 229.94 146.124 229.378 145.562 cv
228.815 144.999 228.052 144.683 227.257 144.683 cv
226.461 144.683 225.698 144.999 225.135 145.562 cv
224.573 146.124 224.257 146.888 224.257 147.683 cv
224.257 148.479 224.573 149.242 225.135 149.804 cv
225.698 150.367 226.461 150.683 227.257 150.683 cv
cp
f
227.257 150.683 mo
228.052 150.683 228.815 150.367 229.378 149.804 cv
229.94 149.242 230.257 148.479 230.257 147.683 cv
230.257 146.888 229.94 146.124 229.378 145.562 cv
228.815 144.999 228.052 144.683 227.257 144.683 cv
226.461 144.683 225.698 144.999 225.135 145.562 cv
224.573 146.124 224.257 146.888 224.257 147.683 cv
224.257 148.479 224.573 149.242 225.135 149.804 cv
225.698 150.367 226.461 150.683 227.257 150.683 cv
cp
@
137.752 68.0067 mo
138.548 68.0067 139.311 67.6906 139.873 67.128 cv
140.436 66.5654 140.752 65.8023 140.752 65.0067 cv
140.752 64.2111 140.436 63.4479 139.873 62.8853 cv
139.311 62.3228 138.548 62.0067 137.752 62.0067 cv
136.956 62.0067 136.193 62.3228 135.631 62.8853 cv
135.068 63.4479 134.752 64.2111 134.752 65.0067 cv
134.752 65.8023 135.068 66.5654 135.631 67.128 cv
136.193 67.6906 136.956 68.0067 137.752 68.0067 cv
cp
f
137.752 68.0067 mo
138.548 68.0067 139.311 67.6906 139.873 67.128 cv
140.436 66.5654 140.752 65.8023 140.752 65.0067 cv
140.752 64.2111 140.436 63.4479 139.873 62.8853 cv
139.311 62.3228 138.548 62.0067 137.752 62.0067 cv
136.956 62.0067 136.193 62.3228 135.631 62.8853 cv
135.068 63.4479 134.752 64.2111 134.752 65.0067 cv
134.752 65.8023 135.068 66.5654 135.631 67.128 cv
136.193 67.6906 136.956 68.0067 137.752 68.0067 cv
cp
@
93.19 66.5505 mo
93.9856 66.5505 94.7487 66.2344 95.3113 65.6718 cv
95.8739 65.1093 96.19 64.3461 96.19 63.5505 cv
96.19 62.7549 95.8739 61.9918 95.3113 61.4292 cv
94.7487 60.8666 93.9856 60.5505 93.19 60.5505 cv
92.3944 60.5505 91.6313 60.8666 91.0687 61.4292 cv
90.5061 61.9918 90.19 62.7549 90.19 63.5505 cv
90.19 64.3461 90.5061 65.1093 91.0687 65.6718 cv
91.6313 66.2344 92.3944 66.5505 93.19 66.5505 cv
cp
f
93.19 66.5505 mo
93.9856 66.5505 94.7487 66.2344 95.3113 65.6718 cv
95.8739 65.1093 96.19 64.3461 96.19 63.5505 cv
96.19 62.7549 95.8739 61.9918 95.3113 61.4292 cv
94.7487 60.8666 93.9856 60.5505 93.19 60.5505 cv
92.3944 60.5505 91.6313 60.8666 91.0687 61.4292 cv
90.5061 61.9918 90.19 62.7549 90.19 63.5505 cv
90.19 64.3461 90.5061 65.1093 91.0687 65.6718 cv
91.6313 66.2344 92.3944 66.5505 93.19 66.5505 cv
cp
@
136.605 70.9761 mo
137.401 70.9761 138.164 70.66 138.726 70.0974 cv
139.289 69.5348 139.605 68.7717 139.605 67.9761 cv
139.605 67.1805 139.289 66.4174 138.726 65.8548 cv
138.164 65.2922 137.401 64.9761 136.605 64.9761 cv
135.81 64.9761 135.046 65.2922 134.484 65.8548 cv
133.921 66.4174 133.605 67.1805 133.605 67.9761 cv
133.605 68.7717 133.921 69.5348 134.484 70.0974 cv
135.046 70.66 135.81 70.9761 136.605 70.9761 cv
cp
f
136.605 70.9761 mo
137.401 70.9761 138.164 70.66 138.726 70.0974 cv
139.289 69.5348 139.605 68.7717 139.605 67.9761 cv
139.605 67.1805 139.289 66.4174 138.726 65.8548 cv
138.164 65.2922 137.401 64.9761 136.605 64.9761 cv
135.81 64.9761 135.046 65.2922 134.484 65.8548 cv
133.921 66.4174 133.605 67.1805 133.605 67.9761 cv
133.605 68.7717 133.921 69.5348 134.484 70.0974 cv
135.046 70.66 135.81 70.9761 136.605 70.9761 cv
cp
@
459.262 140.142 mo
460.058 140.142 460.821 139.826 461.383 139.263 cv
461.946 138.701 462.262 137.938 462.262 137.142 cv
462.262 136.346 461.946 135.583 461.383 135.021 cv
460.821 134.458 460.058 134.142 459.262 134.142 cv
458.467 134.142 457.703 134.458 457.141 135.021 cv
456.578 135.583 456.262 136.346 456.262 137.142 cv
456.262 137.938 456.578 138.701 457.141 139.263 cv
457.703 139.826 458.467 140.142 459.262 140.142 cv
cp
f
459.262 140.142 mo
460.058 140.142 460.821 139.826 461.383 139.263 cv
461.946 138.701 462.262 137.938 462.262 137.142 cv
462.262 136.346 461.946 135.583 461.383 135.021 cv
460.821 134.458 460.058 134.142 459.262 134.142 cv
458.467 134.142 457.703 134.458 457.141 135.021 cv
456.578 135.583 456.262 136.346 456.262 137.142 cv
456.262 137.938 456.578 138.701 457.141 139.263 cv
457.703 139.826 458.467 140.142 459.262 140.142 cv
cp
@
230.663 94.0647 mo
231.458 94.0647 232.222 93.7486 232.784 93.186 cv
233.347 92.6234 233.663 91.8603 233.663 91.0647 cv
233.663 90.2691 233.347 89.506 232.784 88.9434 cv
232.222 88.3808 231.458 88.0647 230.663 88.0647 cv
229.867 88.0647 229.104 88.3808 228.541 88.9434 cv
227.979 89.506 227.663 90.2691 227.663 91.0647 cv
227.663 91.8603 227.979 92.6234 228.541 93.186 cv
229.104 93.7486 229.867 94.0647 230.663 94.0647 cv
cp
f
230.663 94.0647 mo
231.458 94.0647 232.222 93.7486 232.784 93.186 cv
233.347 92.6234 233.663 91.8603 233.663 91.0647 cv
233.663 90.2691 233.347 89.506 232.784 88.9434 cv
232.222 88.3808 231.458 88.0647 230.663 88.0647 cv
229.867 88.0647 229.104 88.3808 228.541 88.9434 cv
227.979 89.506 227.663 90.2691 227.663 91.0647 cv
227.663 91.8603 227.979 92.6234 228.541 93.186 cv
229.104 93.7486 229.867 94.0647 230.663 94.0647 cv
cp
@
139.348 121.159 mo
140.143 121.159 140.906 120.842 141.469 120.28 cv
142.032 119.717 142.348 118.954 142.348 118.159 cv
142.348 117.363 142.032 116.6 141.469 116.037 cv
140.906 115.475 140.143 115.159 139.348 115.159 cv
138.552 115.159 137.789 115.475 137.226 116.037 cv
136.664 116.6 136.348 117.363 136.348 118.159 cv
136.348 118.954 136.664 119.717 137.226 120.28 cv
137.789 120.842 138.552 121.159 139.348 121.159 cv
cp
f
139.348 121.159 mo
140.143 121.159 140.906 120.842 141.469 120.28 cv
142.032 119.717 142.348 118.954 142.348 118.159 cv
142.348 117.363 142.032 116.6 141.469 116.037 cv
140.906 115.475 140.143 115.159 139.348 115.159 cv
138.552 115.159 137.789 115.475 137.226 116.037 cv
136.664 116.6 136.348 117.363 136.348 118.159 cv
136.348 118.954 136.664 119.717 137.226 120.28 cv
137.789 120.842 138.552 121.159 139.348 121.159 cv
cp
@
93.5808 155.35 mo
94.3764 155.35 95.1395 155.034 95.7021 154.472 cv
96.2647 153.909 96.5808 153.146 96.5808 152.35 cv
96.5808 151.555 96.2647 150.792 95.7021 150.229 cv
95.1395 149.667 94.3764 149.35 93.5808 149.35 cv
92.7852 149.35 92.0221 149.667 91.4595 150.229 cv
90.8969 150.792 90.5808 151.555 90.5808 152.35 cv
90.5808 153.146 90.8969 153.909 91.4595 154.472 cv
92.0221 155.034 92.7852 155.35 93.5808 155.35 cv
cp
f
93.5808 155.35 mo
94.3764 155.35 95.1395 155.034 95.7021 154.472 cv
96.2647 153.909 96.5808 153.146 96.5808 152.35 cv
96.5808 151.555 96.2647 150.792 95.7021 150.229 cv
95.1395 149.667 94.3764 149.35 93.5808 149.35 cv
92.7852 149.35 92.0221 149.667 91.4595 150.229 cv
90.8969 150.792 90.5808 151.555 90.5808 152.35 cv
90.5808 153.146 90.8969 153.909 91.4595 154.472 cv
92.0221 155.034 92.7852 155.35 93.5808 155.35 cv
cp
@
428.716 134.593 mo
429.512 134.593 430.275 134.277 430.838 133.714 cv
431.4 133.151 431.716 132.388 431.716 131.593 cv
431.716 130.797 431.4 130.034 430.838 129.471 cv
430.275 128.909 429.512 128.593 428.716 128.593 cv
427.921 128.593 427.158 128.909 426.595 129.471 cv
426.032 130.034 425.716 130.797 425.716 131.593 cv
425.716 132.388 426.032 133.151 426.595 133.714 cv
427.158 134.277 427.921 134.593 428.716 134.593 cv
cp
f
428.716 134.593 mo
429.512 134.593 430.275 134.277 430.838 133.714 cv
431.4 133.151 431.716 132.388 431.716 131.593 cv
431.716 130.797 431.4 130.034 430.838 129.471 cv
430.275 128.909 429.512 128.593 428.716 128.593 cv
427.921 128.593 427.158 128.909 426.595 129.471 cv
426.032 130.034 425.716 130.797 425.716 131.593 cv
425.716 132.388 426.032 133.151 426.595 133.714 cv
427.158 134.277 427.921 134.593 428.716 134.593 cv
cp
@
267.011 112.277 mo
267.806 112.277 268.569 111.961 269.132 111.398 cv
269.694 110.836 270.011 110.073 270.011 109.277 cv
270.011 108.482 269.694 107.718 269.132 107.156 cv
268.569 106.593 267.806 106.277 267.011 106.277 cv
266.215 106.277 265.452 106.593 264.889 107.156 cv
264.327 107.718 264.011 108.482 264.011 109.277 cv
264.011 110.073 264.327 110.836 264.889 111.398 cv
265.452 111.961 266.215 112.277 267.011 112.277 cv
cp
f
267.011 112.277 mo
267.806 112.277 268.569 111.961 269.132 111.398 cv
269.694 110.836 270.011 110.073 270.011 109.277 cv
270.011 108.482 269.694 107.718 269.132 107.156 cv
268.569 106.593 267.806 106.277 267.011 106.277 cv
266.215 106.277 265.452 106.593 264.889 107.156 cv
264.327 107.718 264.011 108.482 264.011 109.277 cv
264.011 110.073 264.327 110.836 264.889 111.398 cv
265.452 111.961 266.215 112.277 267.011 112.277 cv
cp
@
84.9232 93.235 mo
85.7188 93.235 86.4819 92.9189 87.0445 92.3563 cv
87.6071 91.7937 87.9232 91.0306 87.9232 90.235 cv
87.9232 89.4394 87.6071 88.6762 87.0445 88.1136 cv
86.4819 87.5511 85.7188 87.235 84.9232 87.235 cv
84.1276 87.235 83.3644 87.5511 82.8019 88.1136 cv
82.2393 88.6762 81.9232 89.4394 81.9232 90.235 cv
81.9232 91.0306 82.2393 91.7937 82.8019 92.3563 cv
83.3644 92.9189 84.1276 93.235 84.9232 93.235 cv
cp
f
84.9232 93.235 mo
85.7188 93.235 86.4819 92.9189 87.0445 92.3563 cv
87.6071 91.7937 87.9232 91.0306 87.9232 90.235 cv
87.9232 89.4394 87.6071 88.6762 87.0445 88.1136 cv
86.4819 87.5511 85.7188 87.235 84.9232 87.235 cv
84.1276 87.235 83.3644 87.5511 82.8019 88.1136 cv
82.2393 88.6762 81.9232 89.4394 81.9232 90.235 cv
81.9232 91.0306 82.2393 91.7937 82.8019 92.3563 cv
83.3644 92.9189 84.1276 93.235 84.9232 93.235 cv
cp
@
178.283 152.123 mo
179.079 152.123 179.842 151.807 180.405 151.244 cv
180.967 150.682 181.283 149.919 181.283 149.123 cv
181.283 148.327 180.967 147.564 180.405 147.002 cv
179.842 146.439 179.079 146.123 178.283 146.123 cv
177.488 146.123 176.725 146.439 176.162 147.002 cv
175.6 147.564 175.283 148.327 175.283 149.123 cv
175.283 149.919 175.6 150.682 176.162 151.244 cv
176.725 151.807 177.488 152.123 178.283 152.123 cv
cp
f
178.283 152.123 mo
179.079 152.123 179.842 151.807 180.405 151.244 cv
180.967 150.682 181.283 149.919 181.283 149.123 cv
181.283 148.327 180.967 147.564 180.405 147.002 cv
179.842 146.439 179.079 146.123 178.283 146.123 cv
177.488 146.123 176.725 146.439 176.162 147.002 cv
175.6 147.564 175.283 148.327 175.283 149.123 cv
175.283 149.919 175.6 150.682 176.162 151.244 cv
176.725 151.807 177.488 152.123 178.283 152.123 cv
cp
@
208.6 81.591 mo
209.395 81.591 210.159 81.2749 210.721 80.7123 cv
211.284 80.1497 211.6 79.3866 211.6 78.591 cv
211.6 77.7954 211.284 77.0323 210.721 76.4697 cv
210.159 75.9071 209.395 75.591 208.6 75.591 cv
207.804 75.591 207.041 75.9071 206.479 76.4697 cv
205.916 77.0323 205.6 77.7954 205.6 78.591 cv
205.6 79.3866 205.916 80.1497 206.479 80.7123 cv
207.041 81.2749 207.804 81.591 208.6 81.591 cv
cp
f
208.6 81.591 mo
209.395 81.591 210.159 81.2749 210.721 80.7123 cv
211.284 80.1497 211.6 79.3866 211.6 78.591 cv
211.6 77.7954 211.284 77.0323 210.721 76.4697 cv
210.159 75.9071 209.395 75.591 208.6 75.591 cv
207.804 75.591 207.041 75.9071 206.479 76.4697 cv
205.916 77.0323 205.6 77.7954 205.6 78.591 cv
205.6 79.3866 205.916 80.1497 206.479 80.7123 cv
207.041 81.2749 207.804 81.591 208.6 81.591 cv
cp
@
127.067 156.621 mo
127.863 156.621 128.626 156.305 129.189 155.742 cv
129.751 155.18 130.067 154.417 130.067 153.621 cv
130.067 152.825 129.751 152.062 129.189 151.5 cv
128.626 150.937 127.863 150.621 127.067 150.621 cv
126.272 150.621 125.508 150.937 124.946 151.5 cv
124.383 152.062 124.067 152.825 124.067 153.621 cv
124.067 154.417 124.383 155.18 124.946 155.742 cv
125.508 156.305 126.272 156.621 127.067 156.621 cv
cp
f
127.067 156.621 mo
127.863 156.621 128.626 156.305 129.189 155.742 cv
129.751 155.18 130.067 154.417 130.067 153.621 cv
130.067 152.825 129.751 152.062 129.189 151.5 cv
128.626 150.937 127.863 150.621 127.067 150.621 cv
126.272 150.621 125.508 150.937 124.946 151.5 cv
124.383 152.062 124.067 152.825 124.067 153.621 cv
124.067 154.417 124.383 155.18 124.946 155.742 cv
125.508 156.305 126.272 156.621 127.067 156.621 cv
cp
@
321.935 137.303 mo
322.731 137.303 323.494 136.987 324.056 136.425 cv
324.619 135.862 324.935 135.099 324.935 134.303 cv
324.935 133.508 324.619 132.745 324.056 132.182 cv
323.494 131.62 322.731 131.303 321.935 131.303 cv
321.14 131.303 320.376 131.62 319.814 132.182 cv
319.251 132.745 318.935 133.508 318.935 134.303 cv
318.935 135.099 319.251 135.862 319.814 136.425 cv
320.376 136.987 321.14 137.303 321.935 137.303 cv
cp
f
321.935 137.303 mo
322.731 137.303 323.494 136.987 324.056 136.425 cv
324.619 135.862 324.935 135.099 324.935 134.303 cv
324.935 133.508 324.619 132.745 324.056 132.182 cv
323.494 131.62 322.731 131.303 321.935 131.303 cv
321.14 131.303 320.376 131.62 319.814 132.182 cv
319.251 132.745 318.935 133.508 318.935 134.303 cv
318.935 135.099 319.251 135.862 319.814 136.425 cv
320.376 136.987 321.14 137.303 321.935 137.303 cv
cp
@
341.543 127.462 mo
342.339 127.462 343.102 127.145 343.664 126.583 cv
344.227 126.02 344.543 125.257 344.543 124.462 cv
344.543 123.666 344.227 122.903 343.664 122.34 cv
343.102 121.778 342.339 121.462 341.543 121.462 cv
340.747 121.462 339.984 121.778 339.422 122.34 cv
338.859 122.903 338.543 123.666 338.543 124.462 cv
338.543 125.257 338.859 126.02 339.422 126.583 cv
339.984 127.145 340.747 127.462 341.543 127.462 cv
cp
f
341.543 127.462 mo
342.339 127.462 343.102 127.145 343.664 126.583 cv
344.227 126.02 344.543 125.257 344.543 124.462 cv
344.543 123.666 344.227 122.903 343.664 122.34 cv
343.102 121.778 342.339 121.462 341.543 121.462 cv
340.747 121.462 339.984 121.778 339.422 122.34 cv
338.859 122.903 338.543 123.666 338.543 124.462 cv
338.543 125.257 338.859 126.02 339.422 126.583 cv
339.984 127.145 340.747 127.462 341.543 127.462 cv
cp
@
425.791 158.767 mo
426.586 158.767 427.35 158.451 427.912 157.888 cv
428.475 157.325 428.791 156.562 428.791 155.767 cv
428.791 154.971 428.475 154.208 427.912 153.645 cv
427.35 153.083 426.586 152.767 425.791 152.767 cv
424.995 152.767 424.232 153.083 423.669 153.645 cv
423.107 154.208 422.791 154.971 422.791 155.767 cv
422.791 156.562 423.107 157.325 423.669 157.888 cv
424.232 158.451 424.995 158.767 425.791 158.767 cv
cp
f
425.791 158.767 mo
426.586 158.767 427.35 158.451 427.912 157.888 cv
428.475 157.325 428.791 156.562 428.791 155.767 cv
428.791 154.971 428.475 154.208 427.912 153.645 cv
427.35 153.083 426.586 152.767 425.791 152.767 cv
424.995 152.767 424.232 153.083 423.669 153.645 cv
423.107 154.208 422.791 154.971 422.791 155.767 cv
422.791 156.562 423.107 157.325 423.669 157.888 cv
424.232 158.451 424.995 158.767 425.791 158.767 cv
cp
@
340.522 143.998 mo
341.318 143.998 342.081 143.682 342.643 143.119 cv
343.206 142.557 343.522 141.793 343.522 140.998 cv
343.522 140.202 343.206 139.439 342.643 138.877 cv
342.081 138.314 341.318 137.998 340.522 137.998 cv
339.727 137.998 338.963 138.314 338.401 138.877 cv
337.838 139.439 337.522 140.202 337.522 140.998 cv
337.522 141.793 337.838 142.557 338.401 143.119 cv
338.963 143.682 339.727 143.998 340.522 143.998 cv
cp
f
340.522 143.998 mo
341.318 143.998 342.081 143.682 342.643 143.119 cv
343.206 142.557 343.522 141.793 343.522 140.998 cv
343.522 140.202 343.206 139.439 342.643 138.877 cv
342.081 138.314 341.318 137.998 340.522 137.998 cv
339.727 137.998 338.963 138.314 338.401 138.877 cv
337.838 139.439 337.522 140.202 337.522 140.998 cv
337.522 141.793 337.838 142.557 338.401 143.119 cv
338.963 143.682 339.727 143.998 340.522 143.998 cv
cp
@
93.4205 105.293 mo
94.2161 105.293 94.9792 104.977 95.5418 104.414 cv
96.1044 103.852 96.4205 103.089 96.4205 102.293 cv
96.4205 101.497 96.1044 100.734 95.5418 100.172 cv
94.9792 99.6091 94.2161 99.293 93.4205 99.293 cv
92.6249 99.293 91.8618 99.6091 91.2992 100.172 cv
90.7366 100.734 90.4205 101.497 90.4205 102.293 cv
90.4205 103.089 90.7366 103.852 91.2992 104.414 cv
91.8618 104.977 92.6249 105.293 93.4205 105.293 cv
cp
f
93.4205 105.293 mo
94.2161 105.293 94.9792 104.977 95.5418 104.414 cv
96.1044 103.852 96.4205 103.089 96.4205 102.293 cv
96.4205 101.497 96.1044 100.734 95.5418 100.172 cv
94.9792 99.6091 94.2161 99.293 93.4205 99.293 cv
92.6249 99.293 91.8618 99.6091 91.2992 100.172 cv
90.7366 100.734 90.4205 101.497 90.4205 102.293 cv
90.4205 103.089 90.7366 103.852 91.2992 104.414 cv
91.8618 104.977 92.6249 105.293 93.4205 105.293 cv
cp
@
147.309 137.939 mo
148.105 137.939 148.868 137.623 149.431 137.06 cv
149.993 136.498 150.309 135.734 150.309 134.939 cv
150.309 134.143 149.993 133.38 149.431 132.817 cv
148.868 132.255 148.105 131.939 147.309 131.939 cv
146.514 131.939 145.751 132.255 145.188 132.817 cv
144.625 133.38 144.309 134.143 144.309 134.939 cv
144.309 135.734 144.625 136.498 145.188 137.06 cv
145.751 137.623 146.514 137.939 147.309 137.939 cv
cp
f
147.309 137.939 mo
148.105 137.939 148.868 137.623 149.431 137.06 cv
149.993 136.498 150.309 135.734 150.309 134.939 cv
150.309 134.143 149.993 133.38 149.431 132.817 cv
148.868 132.255 148.105 131.939 147.309 131.939 cv
146.514 131.939 145.751 132.255 145.188 132.817 cv
144.625 133.38 144.309 134.143 144.309 134.939 cv
144.309 135.734 144.625 136.498 145.188 137.06 cv
145.751 137.623 146.514 137.939 147.309 137.939 cv
cp
@
250.668 120.253 mo
251.464 120.253 252.227 119.937 252.79 119.374 cv
253.352 118.811 253.668 118.048 253.668 117.253 cv
253.668 116.457 253.352 115.694 252.79 115.131 cv
252.227 114.569 251.464 114.253 250.668 114.253 cv
249.873 114.253 249.11 114.569 248.547 115.131 cv
247.985 115.694 247.668 116.457 247.668 117.253 cv
247.668 118.048 247.985 118.811 248.547 119.374 cv
249.11 119.937 249.873 120.253 250.668 120.253 cv
cp
f
250.668 120.253 mo
251.464 120.253 252.227 119.937 252.79 119.374 cv
253.352 118.811 253.668 118.048 253.668 117.253 cv
253.668 116.457 253.352 115.694 252.79 115.131 cv
252.227 114.569 251.464 114.253 250.668 114.253 cv
249.873 114.253 249.11 114.569 248.547 115.131 cv
247.985 115.694 247.668 116.457 247.668 117.253 cv
247.668 118.048 247.985 118.811 248.547 119.374 cv
249.11 119.937 249.873 120.253 250.668 120.253 cv
cp
@
476.501 140.78 mo
477.297 140.78 478.06 140.464 478.622 139.901 cv
479.185 139.338 479.501 138.575 479.501 137.78 cv
479.501 136.984 479.185 136.221 478.622 135.658 cv
478.06 135.096 477.297 134.78 476.501 134.78 cv
475.706 134.78 474.942 135.096 474.38 135.658 cv
473.817 136.221 473.501 136.984 473.501 137.78 cv
473.501 138.575 473.817 139.338 474.38 139.901 cv
474.942 140.464 475.706 140.78 476.501 140.78 cv
cp
f
476.501 140.78 mo
477.297 140.78 478.06 140.464 478.622 139.901 cv
479.185 139.338 479.501 138.575 479.501 137.78 cv
479.501 136.984 479.185 136.221 478.622 135.658 cv
478.06 135.096 477.297 134.78 476.501 134.78 cv
475.706 134.78 474.942 135.096 474.38 135.658 cv
473.817 136.221 473.501 136.984 473.501 137.78 cv
473.501 138.575 473.817 139.338 474.38 139.901 cv
474.942 140.464 475.706 140.78 476.501 140.78 cv
cp
@
104.417 93.4518 mo
105.213 93.4518 105.976 93.1357 106.539 92.5731 cv
107.101 92.0105 107.417 91.2474 107.417 90.4518 cv
107.417 89.6562 107.101 88.893 106.539 88.3304 cv
105.976 87.7679 105.213 87.4518 104.417 87.4518 cv
103.622 87.4518 102.858 87.7679 102.296 88.3304 cv
101.733 88.893 101.417 89.6562 101.417 90.4518 cv
101.417 91.2474 101.733 92.0105 102.296 92.5731 cv
102.858 93.1357 103.622 93.4518 104.417 93.4518 cv
cp
f
104.417 93.4518 mo
105.213 93.4518 105.976 93.1357 106.539 92.5731 cv
107.101 92.0105 107.417 91.2474 107.417 90.4518 cv
107.417 89.6562 107.101 88.893 106.539 88.3304 cv
105.976 87.7679 105.213 87.4518 104.417 87.4518 cv
103.622 87.4518 102.858 87.7679 102.296 88.3304 cv
101.733 88.893 101.417 89.6562 101.417 90.4518 cv
101.417 91.2474 101.733 92.0105 102.296 92.5731 cv
102.858 93.1357 103.622 93.4518 104.417 93.4518 cv
cp
@
260.546 100.329 mo
261.342 100.329 262.105 100.013 262.667 99.45 cv
263.23 98.8874 263.546 98.1243 263.546 97.3287 cv
263.546 96.5331 263.23 95.7699 262.667 95.2073 cv
262.105 94.6448 261.342 94.3287 260.546 94.3287 cv
259.75 94.3287 258.987 94.6448 258.425 95.2073 cv
257.862 95.7699 257.546 96.5331 257.546 97.3287 cv
257.546 98.1243 257.862 98.8874 258.425 99.45 cv
258.987 100.013 259.75 100.329 260.546 100.329 cv
cp
f
260.546 100.329 mo
261.342 100.329 262.105 100.013 262.667 99.45 cv
263.23 98.8874 263.546 98.1243 263.546 97.3287 cv
263.546 96.5331 263.23 95.7699 262.667 95.2073 cv
262.105 94.6448 261.342 94.3287 260.546 94.3287 cv
259.75 94.3287 258.987 94.6448 258.425 95.2073 cv
257.862 95.7699 257.546 96.5331 257.546 97.3287 cv
257.546 98.1243 257.862 98.8874 258.425 99.45 cv
258.987 100.013 259.75 100.329 260.546 100.329 cv
cp
@
331.975 138.732 mo
332.771 138.732 333.534 138.416 334.096 137.853 cv
334.659 137.291 334.975 136.528 334.975 135.732 cv
334.975 134.936 334.659 134.173 334.096 133.611 cv
333.534 133.048 332.771 132.732 331.975 132.732 cv
331.179 132.732 330.416 133.048 329.854 133.611 cv
329.291 134.173 328.975 134.936 328.975 135.732 cv
328.975 136.528 329.291 137.291 329.854 137.853 cv
330.416 138.416 331.179 138.732 331.975 138.732 cv
cp
f
331.975 138.732 mo
332.771 138.732 333.534 138.416 334.096 137.853 cv
334.659 137.291 334.975 136.528 334.975 135.732 cv
334.975 134.936 334.659 134.173 334.096 133.611 cv
333.534 133.048 332.771 132.732 331.975 132.732 cv
331.179 132.732 330.416 133.048 329.854 133.611 cv
329.291 134.173 328.975 134.936 328.975 135.732 cv
328.975 136.528 329.291 137.291 329.854 137.853 cv
330.416 138.416 331.179 138.732 331.975 138.732 cv
cp
@
166.724 74.2246 mo
167.52 74.2246 168.283 73.9085 168.845 73.3459 cv
169.408 72.7834 169.724 72.0203 169.724 71.2246 cv
169.724 70.429 169.408 69.6659 168.845 69.1033 cv
168.283 68.5407 167.52 68.2246 166.724 68.2246 cv
165.928 68.2246 165.165 68.5407 164.603 69.1033 cv
164.04 69.6659 163.724 70.429 163.724 71.2246 cv
163.724 72.0203 164.04 72.7834 164.603 73.3459 cv
165.165 73.9085 165.928 74.2246 166.724 74.2246 cv
cp
f
166.724 74.2246 mo
167.52 74.2246 168.283 73.9085 168.845 73.3459 cv
169.408 72.7834 169.724 72.0203 169.724 71.2246 cv
169.724 70.429 169.408 69.6659 168.845 69.1033 cv
168.283 68.5407 167.52 68.2246 166.724 68.2246 cv
165.928 68.2246 165.165 68.5407 164.603 69.1033 cv
164.04 69.6659 163.724 70.429 163.724 71.2246 cv
163.724 72.0203 164.04 72.7834 164.603 73.3459 cv
165.165 73.9085 165.928 74.2246 166.724 74.2246 cv
cp
@
339.178 107.71 mo
339.974 107.71 340.737 107.394 341.299 106.832 cv
341.862 106.269 342.178 105.506 342.178 104.71 cv
342.178 103.915 341.862 103.152 341.299 102.589 cv
340.737 102.026 339.974 101.71 339.178 101.71 cv
338.382 101.71 337.619 102.026 337.057 102.589 cv
336.494 103.152 336.178 103.915 336.178 104.71 cv
336.178 105.506 336.494 106.269 337.057 106.832 cv
337.619 107.394 338.382 107.71 339.178 107.71 cv
cp
f
339.178 107.71 mo
339.974 107.71 340.737 107.394 341.299 106.832 cv
341.862 106.269 342.178 105.506 342.178 104.71 cv
342.178 103.915 341.862 103.152 341.299 102.589 cv
340.737 102.026 339.974 101.71 339.178 101.71 cv
338.382 101.71 337.619 102.026 337.057 102.589 cv
336.494 103.152 336.178 103.915 336.178 104.71 cv
336.178 105.506 336.494 106.269 337.057 106.832 cv
337.619 107.394 338.382 107.71 339.178 107.71 cv
cp
@
181.168 159.218 mo
181.964 159.218 182.727 158.902 183.289 158.339 cv
183.852 157.777 184.168 157.014 184.168 156.218 cv
184.168 155.423 183.852 154.659 183.289 154.097 cv
182.727 153.534 181.964 153.218 181.168 153.218 cv
180.373 153.218 179.609 153.534 179.047 154.097 cv
178.484 154.659 178.168 155.423 178.168 156.218 cv
178.168 157.014 178.484 157.777 179.047 158.339 cv
179.609 158.902 180.373 159.218 181.168 159.218 cv
cp
f
181.168 159.218 mo
181.964 159.218 182.727 158.902 183.289 158.339 cv
183.852 157.777 184.168 157.014 184.168 156.218 cv
184.168 155.423 183.852 154.659 183.289 154.097 cv
182.727 153.534 181.964 153.218 181.168 153.218 cv
180.373 153.218 179.609 153.534 179.047 154.097 cv
178.484 154.659 178.168 155.423 178.168 156.218 cv
178.168 157.014 178.484 157.777 179.047 158.339 cv
179.609 158.902 180.373 159.218 181.168 159.218 cv
cp
@
91.2244 152.712 mo
92.0201 152.712 92.7832 152.396 93.3458 151.833 cv
93.9083 151.27 94.2244 150.507 94.2244 149.712 cv
94.2244 148.916 93.9083 148.153 93.3458 147.59 cv
92.7832 147.028 92.0201 146.712 91.2244 146.712 cv
90.4288 146.712 89.6657 147.028 89.1031 147.59 cv
88.5405 148.153 88.2244 148.916 88.2244 149.712 cv
88.2244 150.507 88.5405 151.27 89.1031 151.833 cv
89.6657 152.396 90.4288 152.712 91.2244 152.712 cv
cp
f
91.2244 152.712 mo
92.0201 152.712 92.7832 152.396 93.3458 151.833 cv
93.9083 151.27 94.2244 150.507 94.2244 149.712 cv
94.2244 148.916 93.9083 148.153 93.3458 147.59 cv
92.7832 147.028 92.0201 146.712 91.2244 146.712 cv
90.4288 146.712 89.6657 147.028 89.1031 147.59 cv
88.5405 148.153 88.2244 148.916 88.2244 149.712 cv
88.2244 150.507 88.5405 151.27 89.1031 151.833 cv
89.6657 152.396 90.4288 152.712 91.2244 152.712 cv
cp
@
116.573 155.167 mo
117.369 155.167 118.132 154.851 118.695 154.288 cv
119.257 153.725 119.573 152.962 119.573 152.167 cv
119.573 151.371 119.257 150.608 118.695 150.045 cv
118.132 149.483 117.369 149.167 116.573 149.167 cv
115.778 149.167 115.015 149.483 114.452 150.045 cv
113.89 150.608 113.573 151.371 113.573 152.167 cv
113.573 152.962 113.89 153.725 114.452 154.288 cv
115.015 154.851 115.778 155.167 116.573 155.167 cv
cp
f
116.573 155.167 mo
117.369 155.167 118.132 154.851 118.695 154.288 cv
119.257 153.725 119.573 152.962 119.573 152.167 cv
119.573 151.371 119.257 150.608 118.695 150.045 cv
118.132 149.483 117.369 149.167 116.573 149.167 cv
115.778 149.167 115.015 149.483 114.452 150.045 cv
113.89 150.608 113.573 151.371 113.573 152.167 cv
113.573 152.962 113.89 153.725 114.452 154.288 cv
115.015 154.851 115.778 155.167 116.573 155.167 cv
cp
@
362.734 144.943 mo
363.53 144.943 364.293 144.627 364.856 144.064 cv
365.418 143.502 365.734 142.739 365.734 141.943 cv
365.734 141.147 365.418 140.384 364.856 139.822 cv
364.293 139.259 363.53 138.943 362.734 138.943 cv
361.939 138.943 361.176 139.259 360.613 139.822 cv
360.05 140.384 359.734 141.147 359.734 141.943 cv
359.734 142.739 360.05 143.502 360.613 144.064 cv
361.176 144.627 361.939 144.943 362.734 144.943 cv
cp
f
362.734 144.943 mo
363.53 144.943 364.293 144.627 364.856 144.064 cv
365.418 143.502 365.734 142.739 365.734 141.943 cv
365.734 141.147 365.418 140.384 364.856 139.822 cv
364.293 139.259 363.53 138.943 362.734 138.943 cv
361.939 138.943 361.176 139.259 360.613 139.822 cv
360.05 140.384 359.734 141.147 359.734 141.943 cv
359.734 142.739 360.05 143.502 360.613 144.064 cv
361.176 144.627 361.939 144.943 362.734 144.943 cv
cp
@
337.108 153.556 mo
337.903 153.556 338.666 153.24 339.229 152.677 cv
339.791 152.115 340.108 151.352 340.108 150.556 cv
340.108 149.761 339.791 148.997 339.229 148.435 cv
338.666 147.872 337.903 147.556 337.108 147.556 cv
336.312 147.556 335.549 147.872 334.986 148.435 cv
334.424 148.997 334.108 149.761 334.108 150.556 cv
334.108 151.352 334.424 152.115 334.986 152.677 cv
335.549 153.24 336.312 153.556 337.108 153.556 cv
cp
f
337.108 153.556 mo
337.903 153.556 338.666 153.24 339.229 152.677 cv
339.791 152.115 340.108 151.352 340.108 150.556 cv
340.108 149.761 339.791 148.997 339.229 148.435 cv
338.666 147.872 337.903 147.556 337.108 147.556 cv
336.312 147.556 335.549 147.872 334.986 148.435 cv
334.424 148.997 334.108 149.761 334.108 150.556 cv
334.108 151.352 334.424 152.115 334.986 152.677 cv
335.549 153.24 336.312 153.556 337.108 153.556 cv
cp
@
.8 lw
2 lc
0 lj
62.2 450.72 mo
62.2 7.20001 li
1 /0 /CSD get_res sepcs
1 sep
@
508.6 450.72 mo
508.6 7.20001 li
@
62.2 450.72 mo
508.6 450.72 li
@
62.2 7.20001 mo
508.6 7.20001 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

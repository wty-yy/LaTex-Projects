%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Colored_neural_network.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yy
%%CreationDate: 2022/4/29, 16:18:00
%%BoundingBox: 0 0 237 285
%%HiResBoundingBox: 0 0 236.6061 284.5281
%%CropBox: 0 0 236.6061 284.5281
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 576 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2022-04-29T08:17:10Z"
   xmp:CreatorTool="Inkscape 1.0.2 (https://inkscape.org)"
   pdf:Producer="cairo 1.16.0 (https://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -284.528 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 284.528 li
236.606 284.528 li
236.606 0 li
cp
clp
.501875 lw
1 lc
1 lj
10.0375 ml
[] 0 dsh
true sadj
47.355 213.621 mo
47.355 213.5 47.352 213.375 47.352 213.25 cv
47.348 213.129 47.348 213.004 47.344 212.883 cv
47.34 212.758 47.332 212.637 47.328 212.512 cv
47.32 212.391 47.316 212.266 47.309 212.145 cv
47.301 212.02 47.293 211.898 47.281 211.773 cv
47.273 211.652 47.262 211.527 47.25 211.406 cv
47.238 211.281 47.227 211.16 47.211 211.039 cv
47.199 210.914 47.184 210.793 47.168 210.672 cv
47.152 210.547 47.137 210.426 47.117 210.305 cv
47.102 210.18 47.082 210.059 47.062 209.938 cv
47.043 209.816 47.023 209.695 47.004 209.574 cv
46.98 209.449 46.961 209.328 46.938 209.207 cv
46.914 209.086 46.891 208.965 46.863 208.848 cv
46.84 208.727 46.812 208.605 46.785 208.484 cv
46.762 208.363 46.73 208.242 46.703 208.125 cv
46.676 208.004 46.645 207.883 46.613 207.766 cv
46.582 207.645 46.551 207.527 46.52 207.406 cv
46.488 207.289 46.453 207.168 46.418 207.051 cv
46.383 206.934 46.348 206.816 46.312 206.695 cv
46.277 206.578 46.238 206.461 46.203 206.344 cv
46.164 206.227 46.125 206.109 46.086 205.992 cv
46.043 205.875 46.004 205.762 45.961 205.645 cv
45.918 205.527 45.879 205.414 45.832 205.297 cv
45.789 205.18 45.746 205.066 45.699 204.953 cv
45.656 204.836 45.609 204.723 45.562 204.609 cv
45.516 204.496 45.465 204.383 45.418 204.27 cv
45.367 204.156 45.316 204.043 45.266 203.93 cv
45.215 203.816 45.164 203.707 45.113 203.594 cv
45.059 203.48 45.008 203.371 44.953 203.262 cv
44.898 203.148 44.844 203.039 44.785 202.93 cv
44.73 202.82 44.676 202.711 44.617 202.602 cv
44.559 202.492 44.5 202.383 44.441 202.277 cv
44.383 202.168 44.32 202.059 44.262 201.953 cv
44.199 201.848 44.137 201.738 44.074 201.633 cv
44.012 201.527 43.949 201.422 43.883 201.316 cv
43.82 201.211 43.754 201.105 43.688 201.004 cv
43.621 200.898 43.555 200.793 43.488 200.691 cv
43.418 200.59 43.352 200.484 43.281 200.383 cv
43.211 200.281 43.141 200.18 43.07 200.078 cv
43 199.98 42.93 199.879 42.855 199.777 cv
42.785 199.68 42.711 199.578 42.637 199.48 cv
42.562 199.383 42.488 199.285 42.41 199.188 cv
42.336 199.09 42.262 198.992 42.184 198.895 cv
42.105 198.801 42.027 198.703 41.949 198.609 cv
41.871 198.516 41.793 198.422 41.711 198.328 cv
41.633 198.234 41.551 198.141 41.469 198.047 cv
41.387 197.953 41.305 197.863 41.223 197.77 cv
41.141 197.68 41.055 197.59 40.973 197.5 cv
40.887 197.41 40.801 197.32 40.715 197.23 cv
40.629 197.145 40.543 197.055 40.457 196.969 cv
40.367 196.883 40.281 196.793 40.191 196.707 cv
40.105 196.621 40.016 196.539 39.926 196.453 cv
39.836 196.367 39.746 196.285 39.652 196.203 cv
39.562 196.121 39.469 196.035 39.379 195.957 cv
39.285 195.875 39.191 195.793 39.098 195.715 cv
39.004 195.633 38.91 195.555 38.816 195.477 cv
38.719 195.395 38.625 195.32 38.527 195.242 cv
38.434 195.164 38.336 195.09 38.238 195.012 cv
38.141 194.938 38.043 194.863 37.941 194.789 cv
37.844 194.715 37.746 194.641 37.645 194.566 cv
37.547 194.496 37.445 194.426 37.344 194.352 cv
37.242 194.281 37.141 194.211 37.039 194.145 cv
36.938 194.074 36.836 194.004 36.734 193.938 cv
36.629 193.871 36.527 193.801 36.422 193.738 cv
36.316 193.672 36.215 193.605 36.109 193.539 cv
36.004 193.477 35.898 193.414 35.793 193.352 cv
35.684 193.289 35.578 193.227 35.473 193.164 cv
35.363 193.102 35.258 193.043 35.148 192.984 cv
35.039 192.926 34.934 192.867 34.824 192.809 cv
34.715 192.75 34.605 192.691 34.496 192.637 cv
34.387 192.582 34.273 192.527 34.164 192.473 cv
34.055 192.418 33.941 192.363 33.832 192.312 cv
33.719 192.258 33.605 192.207 33.496 192.156 cv
33.383 192.105 33.27 192.055 33.156 192.008 cv
33.043 191.957 32.93 191.91 32.816 191.863 cv
32.703 191.816 32.586 191.77 32.473 191.723 cv
32.359 191.68 32.242 191.633 32.129 191.59 cv
32.012 191.547 31.895 191.504 31.781 191.461 cv
31.664 191.422 31.547 191.379 31.43 191.34 cv
31.316 191.301 31.199 191.262 31.082 191.223 cv
30.965 191.184 30.844 191.148 30.727 191.109 cv
30.609 191.074 30.492 191.039 30.375 191.004 cv
30.254 190.973 30.137 190.938 30.016 190.906 cv
29.898 190.871 29.777 190.84 29.66 190.809 cv
29.539 190.781 29.422 190.75 29.301 190.723 cv
29.18 190.691 29.059 190.664 28.941 190.637 cv
28.82 190.609 28.699 190.586 28.578 190.559 cv
28.457 190.535 28.336 190.512 28.215 190.488 cv
28.094 190.465 27.973 190.441 27.852 190.422 cv
27.73 190.398 27.609 190.379 27.488 190.359 cv
27.363 190.34 27.242 190.324 27.121 190.305 cv
27 190.289 26.875 190.27 26.754 190.258 cv
26.633 190.242 26.508 190.227 26.387 190.211 cv
26.266 190.199 26.141 190.188 26.02 190.176 cv
25.895 190.164 25.773 190.152 25.648 190.145 cv
25.527 190.133 25.406 190.125 25.281 190.117 cv
25.16 190.109 25.035 190.102 24.91 190.098 cv
24.789 190.09 24.664 190.086 24.543 190.082 cv
24.418 190.078 24.297 190.074 24.172 190.074 cv
24.051 190.07 23.926 190.07 23.801 190.07 cv
23.68 190.07 23.555 190.07 23.434 190.074 cv
23.309 190.074 23.188 190.078 23.062 190.082 cv
22.941 190.086 22.816 190.09 22.691 190.098 cv
22.57 190.102 22.445 190.109 22.324 190.117 cv
22.199 190.125 22.078 190.133 21.953 190.145 cv
21.832 190.152 21.707 190.164 21.586 190.176 cv
21.465 190.188 21.34 190.199 21.219 190.211 cv
21.094 190.227 20.973 190.242 20.852 190.258 cv
20.727 190.27 20.605 190.289 20.484 190.305 cv
20.363 190.324 20.238 190.34 20.117 190.359 cv
19.996 190.379 19.875 190.398 19.754 190.422 cv
19.633 190.441 19.512 190.465 19.391 190.488 cv
19.27 190.512 19.148 190.535 19.027 190.559 cv
18.906 190.586 18.785 190.609 18.664 190.637 cv
18.543 190.664 18.426 190.691 18.305 190.723 cv
18.184 190.75 18.066 190.781 17.945 190.809 cv
17.824 190.84 17.707 190.871 17.59 190.906 cv
17.469 190.938 17.352 190.973 17.23 191.004 cv
17.113 191.039 16.996 191.074 16.879 191.109 cv
16.758 191.148 16.641 191.184 16.523 191.223 cv
16.406 191.262 16.289 191.301 16.172 191.34 cv
16.059 191.379 15.941 191.422 15.824 191.461 cv
15.707 191.504 15.594 191.547 15.477 191.59 cv
15.363 191.633 15.246 191.68 15.133 191.723 cv
15.02 191.77 14.902 191.816 14.789 191.863 cv
14.676 191.91 14.562 191.957 14.449 192.008 cv
14.336 192.055 14.223 192.105 14.109 192.156 cv
14 192.207 13.887 192.258 13.773 192.312 cv
13.664 192.363 13.551 192.418 13.441 192.473 cv
13.332 192.527 13.219 192.582 13.109 192.637 cv
13 192.691 12.891 192.75 12.781 192.809 cv
12.672 192.867 12.566 192.926 12.457 192.984 cv
12.348 193.043 12.242 193.102 12.133 193.164 cv
12.027 193.227 11.922 193.289 11.812 193.352 cv
11.707 193.414 11.602 193.477 11.496 193.539 cv
11.391 193.605 11.285 193.672 11.184 193.738 cv
11.078 193.801 10.977 193.871 10.871 193.938 cv
10.77 194.004 10.668 194.074 10.566 194.145 cv
10.461 194.211 10.359 194.281 10.262 194.352 cv
10.16 194.426 10.059 194.496 9.961 194.566 cv
9.859 194.641 9.762 194.715 9.66 194.789 cv
9.562 194.863 9.465 194.938 9.367 195.012 cv
9.27 195.09 9.172 195.164 9.078 195.242 cv
8.98 195.32 8.887 195.395 8.789 195.477 cv
8.695 195.555 8.602 195.633 8.508 195.715 cv
8.414 195.793 8.32 195.875 8.227 195.957 cv
8.137 196.035 8.043 196.121 7.953 196.203 cv
7.859 196.285 7.77 196.367 7.68 196.453 cv
7.59 196.539 7.5 196.621 7.414 196.707 cv
7.324 196.793 7.234 196.883 7.148 196.969 cv
7.062 197.055 6.977 197.145 6.891 197.23 cv
6.805 197.32 6.719 197.41 6.633 197.5 cv
6.551 197.59 6.465 197.68 6.383 197.77 cv
6.301 197.863 6.219 197.953 6.137 198.047 cv
6.055 198.141 5.973 198.234 5.895 198.328 cv
5.812 198.422 5.734 198.516 5.656 198.609 cv
5.578 198.703 5.5 198.801 5.422 198.895 cv
5.344 198.992 5.27 199.09 5.191 199.188 cv
5.117 199.285 5.043 199.383 4.969 199.48 cv
4.895 199.578 4.82 199.68 4.75 199.777 cv
4.676 199.879 4.605 199.98 4.535 200.078 cv
4.465 200.18 4.395 200.281 4.324 200.383 cv
4.254 200.484 4.188 200.59 4.117 200.691 cv
4.051 200.793 3.984 200.898 3.918 201.004 cv
3.852 201.105 3.785 201.211 3.723 201.316 cv
3.656 201.422 3.594 201.527 3.531 201.633 cv
3.469 201.738 3.406 201.848 3.344 201.953 cv
3.285 202.059 3.223 202.168 3.164 202.277 cv
3.105 202.383 3.047 202.492 2.988 202.602 cv
2.93 202.711 2.875 202.82 2.816 202.93 cv
2.762 203.039 2.707 203.148 2.652 203.262 cv
2.598 203.371 2.547 203.48 2.492 203.594 cv
2.441 203.707 2.387 203.816 2.336 203.93 cv
2.285 204.043 2.238 204.156 2.188 204.27 cv
2.141 204.383 2.09 204.496 2.043 204.609 cv
1.996 204.723 1.949 204.836 1.906 204.953 cv
1.859 205.066 1.816 205.18 1.77 205.297 cv
1.727 205.414 1.684 205.527 1.645 205.645 cv
1.602 205.762 1.562 205.875 1.52 205.992 cv
1.48 206.109 1.441 206.227 1.402 206.344 cv
1.367 206.461 1.328 206.578 1.293 206.695 cv
1.258 206.816 1.219 206.934 1.188 207.051 cv
1.152 207.168 1.117 207.289 1.086 207.406 cv
1.055 207.527 1.023 207.645 .992 207.766 cv
.961 207.883 .93 208.004 .902 208.125 cv
.871 208.242 .844 208.363 .816 208.484 cv
.793 208.605 .766 208.727 .742 208.848 cv
.715 208.965 .691 209.086 .668 209.207 cv
.645 209.328 .621 209.449 .602 209.574 cv
.582 209.695 .559 209.816 .539 209.938 cv
.523 210.059 .504 210.18 .484 210.305 cv
.469 210.426 .453 210.547 .438 210.672 cv
.422 210.793 .406 210.914 .395 211.039 cv
.379 211.16 .367 211.281 .355 211.406 cv
.344 211.527 .332 211.652 .324 211.773 cv
.312 211.898 .305 212.02 .297 212.145 cv
.289 212.266 .281 212.391 .277 212.512 cv
.27 212.637 .266 212.758 .262 212.883 cv
.258 213.004 .254 213.129 .254 213.25 cv
.254 213.375 .25 213.5 .25 213.621 cv
.25 213.746 .254 213.867 .254 213.992 cv
.254 214.113 .258 214.238 .262 214.363 cv
.266 214.484 .27 214.609 .277 214.73 cv
.281 214.855 .289 214.977 .297 215.102 cv
.305 215.223 .312 215.348 .324 215.469 cv
.332 215.594 .344 215.715 .355 215.84 cv
.367 215.961 .379 216.082 .395 216.207 cv
.406 216.328 .422 216.449 .438 216.574 cv
.453 216.695 .469 216.816 .484 216.941 cv
.504 217.062 .523 217.184 .539 217.305 cv
.559 217.43 .582 217.551 .602 217.672 cv
.621 217.793 .645 217.914 .668 218.035 cv
.691 218.156 .715 218.277 .742 218.398 cv
.766 218.52 .793 218.641 .816 218.758 cv
.844 218.879 .871 219 .902 219.121 cv
.93 219.238 .961 219.359 .992 219.48 cv
1.023 219.598 1.055 219.719 1.086 219.836 cv
1.117 219.957 1.152 220.074 1.188 220.191 cv
1.219 220.312 1.258 220.43 1.293 220.547 cv
1.328 220.664 1.367 220.781 1.402 220.898 cv
1.441 221.016 1.48 221.133 1.52 221.25 cv
1.562 221.367 1.602 221.484 1.645 221.598 cv
1.684 221.715 1.727 221.832 1.77 221.945 cv
1.816 222.062 1.859 222.176 1.906 222.293 cv
1.949 222.406 1.996 222.52 2.043 222.633 cv
2.09 222.75 2.141 222.863 2.188 222.977 cv
2.238 223.09 2.285 223.199 2.336 223.312 cv
2.387 223.426 2.441 223.539 2.492 223.648 cv
2.547 223.762 2.598 223.871 2.652 223.984 cv
2.707 224.094 2.762 224.203 2.816 224.312 cv
2.875 224.422 2.93 224.535 2.988 224.641 cv
3.047 224.75 3.105 224.859 3.164 224.969 cv
3.223 225.074 3.285 225.184 3.344 225.289 cv
3.406 225.398 3.469 225.504 3.531 225.609 cv
3.594 225.715 3.656 225.82 3.723 225.926 cv
3.785 226.031 3.852 226.137 3.918 226.242 cv
3.984 226.344 4.051 226.449 4.117 226.551 cv
4.188 226.656 4.254 226.758 4.324 226.859 cv
4.395 226.961 4.465 227.062 4.535 227.164 cv
4.605 227.266 4.676 227.363 4.75 227.465 cv
4.82 227.566 4.895 227.664 4.969 227.762 cv
5.043 227.859 5.117 227.961 5.191 228.055 cv
5.27 228.152 5.344 228.25 5.422 228.348 cv
5.5 228.441 5.578 228.539 5.656 228.633 cv
5.734 228.73 5.812 228.824 5.895 228.918 cv
5.973 229.012 6.055 229.105 6.137 229.195 cv
6.219 229.289 6.301 229.383 6.383 229.473 cv
6.465 229.562 6.551 229.652 6.633 229.742 cv
6.719 229.832 6.805 229.922 6.891 230.012 cv
6.977 230.102 7.062 230.188 7.148 230.273 cv
7.234 230.363 7.324 230.449 7.414 230.535 cv
7.5 230.621 7.59 230.707 7.68 230.789 cv
7.77 230.875 7.859 230.957 7.953 231.043 cv
8.043 231.125 8.137 231.207 8.227 231.289 cv
8.32 231.371 8.414 231.449 8.508 231.531 cv
8.602 231.609 8.695 231.691 8.789 231.77 cv
8.887 231.848 8.98 231.926 9.078 232.004 cv
9.172 232.078 9.27 232.156 9.367 232.23 cv
9.465 232.305 9.562 232.383 9.66 232.457 cv
9.762 232.531 9.859 232.602 9.961 232.676 cv
10.059 232.746 10.16 232.82 10.262 232.891 cv
10.359 232.961 10.461 233.031 10.566 233.102 cv
10.668 233.172 10.77 233.238 10.871 233.305 cv
10.977 233.375 11.078 233.441 11.184 233.508 cv
11.285 233.574 11.391 233.637 11.496 233.703 cv
11.602 233.766 11.707 233.832 11.812 233.895 cv
11.922 233.957 12.027 234.02 12.133 234.078 cv
12.242 234.141 12.348 234.199 12.457 234.262 cv
12.566 234.32 12.672 234.379 12.781 234.438 cv
12.891 234.492 13 234.551 13.109 234.605 cv
13.219 234.664 13.332 234.719 13.441 234.773 cv
13.551 234.824 13.664 234.879 13.773 234.934 cv
13.887 234.984 14 235.035 14.109 235.086 cv
14.223 235.137 14.336 235.188 14.449 235.234 cv
14.562 235.285 14.676 235.332 14.789 235.379 cv
14.902 235.426 15.02 235.473 15.133 235.52 cv
15.246 235.566 15.363 235.609 15.477 235.652 cv
15.594 235.695 15.707 235.738 15.824 235.781 cv
15.941 235.824 16.059 235.863 16.172 235.902 cv
16.289 235.945 16.406 235.98 16.523 236.02 cv
16.641 236.059 16.758 236.098 16.879 236.133 cv
16.996 236.168 17.113 236.203 17.23 236.238 cv
17.352 236.273 17.469 236.305 17.59 236.34 cv
17.707 236.371 17.824 236.402 17.945 236.434 cv
18.066 236.465 18.184 236.492 18.305 236.523 cv
18.426 236.551 18.543 236.578 18.664 236.605 cv
18.785 236.633 18.906 236.66 19.027 236.684 cv
19.148 236.707 19.27 236.734 19.391 236.758 cv
19.512 236.777 19.633 236.801 19.754 236.824 cv
19.875 236.844 19.996 236.863 20.117 236.883 cv
20.238 236.902 20.363 236.922 20.484 236.938 cv
20.605 236.957 20.727 236.973 20.852 236.988 cv
20.973 237.004 21.094 237.016 21.219 237.031 cv
21.34 237.043 21.465 237.059 21.586 237.07 cv
21.707 237.082 21.832 237.09 21.953 237.102 cv
22.078 237.109 22.199 237.117 22.324 237.125 cv
22.445 237.133 22.57 237.141 22.691 237.148 cv
22.816 237.152 22.941 237.156 23.062 237.16 cv
23.188 237.164 23.309 237.168 23.434 237.172 cv
23.555 237.172 23.68 237.172 23.801 237.172 cv
23.926 237.172 24.051 237.172 24.172 237.172 cv
24.297 237.168 24.418 237.164 24.543 237.16 cv
24.664 237.156 24.789 237.152 24.91 237.148 cv
25.035 237.141 25.16 237.133 25.281 237.125 cv
25.406 237.117 25.527 237.109 25.648 237.102 cv
25.773 237.09 25.895 237.082 26.02 237.07 cv
26.141 237.059 26.266 237.043 26.387 237.031 cv
26.508 237.016 26.633 237.004 26.754 236.988 cv
26.875 236.973 27 236.957 27.121 236.938 cv
27.242 236.922 27.363 236.902 27.488 236.883 cv
27.609 236.863 27.73 236.844 27.852 236.824 cv
27.973 236.801 28.094 236.777 28.215 236.758 cv
28.336 236.734 28.457 236.707 28.578 236.684 cv
28.699 236.66 28.82 236.633 28.941 236.605 cv
29.059 236.578 29.18 236.551 29.301 236.523 cv
29.422 236.492 29.539 236.465 29.66 236.434 cv
29.777 236.402 29.898 236.371 30.016 236.34 cv
30.137 236.305 30.254 236.273 30.375 236.238 cv
30.492 236.203 30.609 236.168 30.727 236.133 cv
30.844 236.098 30.965 236.059 31.082 236.02 cv
31.199 235.98 31.316 235.945 31.43 235.902 cv
31.547 235.863 31.664 235.824 31.781 235.781 cv
31.895 235.738 32.012 235.695 32.129 235.652 cv
32.242 235.609 32.359 235.566 32.473 235.52 cv
32.586 235.473 32.703 235.426 32.816 235.379 cv
32.93 235.332 33.043 235.285 33.156 235.234 cv
33.27 235.188 33.383 235.137 33.496 235.086 cv
33.605 235.035 33.719 234.984 33.832 234.934 cv
33.941 234.879 34.055 234.824 34.164 234.773 cv
34.273 234.719 34.387 234.664 34.496 234.605 cv
34.605 234.551 34.715 234.492 34.824 234.438 cv
34.934 234.379 35.039 234.32 35.148 234.262 cv
35.258 234.199 35.363 234.141 35.473 234.078 cv
35.578 234.02 35.684 233.957 35.793 233.895 cv
35.898 233.832 36.004 233.766 36.109 233.703 cv
36.215 233.637 36.316 233.574 36.422 233.508 cv
36.527 233.441 36.629 233.375 36.734 233.305 cv
36.836 233.238 36.938 233.172 37.039 233.102 cv
37.141 233.031 37.242 232.961 37.344 232.891 cv
37.445 232.82 37.547 232.746 37.645 232.676 cv
37.746 232.602 37.844 232.531 37.941 232.457 cv
38.043 232.383 38.141 232.305 38.238 232.23 cv
38.336 232.156 38.434 232.078 38.527 232.004 cv
38.625 231.926 38.719 231.848 38.816 231.77 cv
38.91 231.691 39.004 231.609 39.098 231.531 cv
39.191 231.449 39.285 231.371 39.379 231.289 cv
39.469 231.207 39.562 231.125 39.652 231.043 cv
39.746 230.957 39.836 230.875 39.926 230.789 cv
40.016 230.707 40.105 230.621 40.191 230.535 cv
40.281 230.449 40.367 230.363 40.457 230.273 cv
40.543 230.188 40.629 230.102 40.715 230.012 cv
40.801 229.922 40.887 229.832 40.973 229.742 cv
41.055 229.652 41.141 229.562 41.223 229.473 cv
41.305 229.383 41.387 229.289 41.469 229.195 cv
41.551 229.105 41.633 229.012 41.711 228.918 cv
41.793 228.824 41.871 228.73 41.949 228.633 cv
42.027 228.539 42.105 228.441 42.184 228.348 cv
42.262 228.25 42.336 228.152 42.41 228.055 cv
42.488 227.961 42.562 227.859 42.637 227.762 cv
42.711 227.664 42.785 227.566 42.855 227.465 cv
42.93 227.363 43 227.266 43.07 227.164 cv
43.141 227.062 43.211 226.961 43.281 226.859 cv
43.352 226.758 43.418 226.656 43.488 226.551 cv
43.555 226.449 43.621 226.344 43.688 226.242 cv
43.754 226.137 43.82 226.031 43.883 225.926 cv
43.949 225.82 44.012 225.715 44.074 225.609 cv
44.137 225.504 44.199 225.398 44.262 225.289 cv
44.32 225.184 44.383 225.074 44.441 224.969 cv
44.5 224.859 44.559 224.75 44.617 224.641 cv
44.676 224.535 44.73 224.422 44.785 224.312 cv
44.844 224.203 44.898 224.094 44.953 223.984 cv
45.008 223.871 45.059 223.762 45.113 223.648 cv
45.164 223.539 45.215 223.426 45.266 223.312 cv
45.316 223.199 45.367 223.09 45.418 222.977 cv
45.465 222.863 45.516 222.75 45.562 222.633 cv
45.609 222.52 45.656 222.406 45.699 222.293 cv
45.746 222.176 45.789 222.062 45.832 221.945 cv
45.879 221.832 45.918 221.715 45.961 221.598 cv
46.004 221.484 46.043 221.367 46.086 221.25 cv
46.125 221.133 46.164 221.016 46.203 220.898 cv
46.238 220.781 46.277 220.664 46.312 220.547 cv
46.348 220.43 46.383 220.312 46.418 220.191 cv
46.453 220.074 46.488 219.957 46.52 219.836 cv
46.551 219.719 46.582 219.598 46.613 219.48 cv
46.645 219.359 46.676 219.238 46.703 219.121 cv
46.73 219 46.762 218.879 46.785 218.758 cv
46.812 218.641 46.84 218.52 46.863 218.398 cv
46.891 218.277 46.914 218.156 46.938 218.035 cv
46.961 217.914 46.98 217.793 47.004 217.672 cv
47.023 217.551 47.043 217.43 47.062 217.305 cv
47.082 217.184 47.102 217.062 47.117 216.941 cv
47.137 216.816 47.152 216.695 47.168 216.574 cv
47.184 216.449 47.199 216.328 47.211 216.207 cv
47.227 216.082 47.238 215.961 47.25 215.84 cv
47.262 215.715 47.273 215.594 47.281 215.469 cv
47.293 215.348 47.301 215.223 47.309 215.102 cv
47.316 214.977 47.32 214.855 47.328 214.73 cv
47.332 214.609 47.34 214.484 47.344 214.363 cv
47.348 214.238 47.348 214.113 47.352 213.992 cv
47.352 213.867 47.355 213.746 47.355 213.621 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.262913 1 1 .000915541 cmyk
@
47.355 142.969 mo
47.355 142.844 47.352 142.719 47.352 142.598 cv
47.348 142.473 47.348 142.352 47.344 142.227 cv
47.34 142.105 47.332 141.98 47.328 141.859 cv
47.32 141.734 47.316 141.613 47.309 141.488 cv
47.301 141.367 47.293 141.242 47.281 141.121 cv
47.273 140.996 47.262 140.875 47.25 140.75 cv
47.238 140.629 47.227 140.504 47.211 140.383 cv
47.199 140.262 47.184 140.137 47.168 140.016 cv
47.152 139.895 47.137 139.77 47.117 139.648 cv
47.102 139.527 47.082 139.406 47.062 139.281 cv
47.043 139.16 47.023 139.039 47.004 138.918 cv
46.98 138.797 46.961 138.676 46.938 138.555 cv
46.914 138.434 46.891 138.312 46.863 138.191 cv
46.84 138.07 46.812 137.949 46.785 137.828 cv
46.762 137.711 46.73 137.59 46.703 137.469 cv
46.676 137.348 46.645 137.23 46.613 137.109 cv
46.582 136.992 46.551 136.871 46.52 136.754 cv
46.488 136.633 46.453 136.516 46.418 136.398 cv
46.383 136.277 46.348 136.16 46.312 136.043 cv
46.277 135.926 46.238 135.809 46.203 135.688 cv
46.164 135.57 46.125 135.457 46.086 135.34 cv
46.043 135.223 46.004 135.105 45.961 134.988 cv
45.918 134.875 45.879 134.758 45.832 134.641 cv
45.789 134.527 45.746 134.41 45.699 134.297 cv
45.656 134.184 45.609 134.07 45.562 133.953 cv
45.516 133.84 45.465 133.727 45.418 133.613 cv
45.367 133.5 45.316 133.387 45.266 133.277 cv
45.215 133.164 45.164 133.051 45.113 132.941 cv
45.059 132.828 45.008 132.715 44.953 132.605 cv
44.898 132.496 44.844 132.387 44.785 132.273 cv
44.73 132.164 44.676 132.055 44.617 131.945 cv
44.559 131.836 44.5 131.73 44.441 131.621 cv
44.383 131.512 44.32 131.406 44.262 131.297 cv
44.199 131.191 44.137 131.086 44.074 130.977 cv
44.012 130.871 43.949 130.766 43.883 130.66 cv
43.82 130.555 43.754 130.453 43.688 130.348 cv
43.621 130.242 43.555 130.141 43.488 130.035 cv
43.418 129.934 43.352 129.832 43.281 129.73 cv
43.211 129.629 43.141 129.527 43.07 129.426 cv
43 129.324 42.93 129.223 42.855 129.125 cv
42.785 129.023 42.711 128.926 42.637 128.828 cv
42.562 128.727 42.488 128.629 42.41 128.531 cv
42.336 128.434 42.262 128.34 42.184 128.242 cv
42.105 128.145 42.027 128.051 41.949 127.953 cv
41.871 127.859 41.793 127.766 41.711 127.672 cv
41.633 127.578 41.551 127.484 41.469 127.391 cv
41.387 127.301 41.305 127.207 41.223 127.117 cv
41.141 127.027 41.055 126.934 40.973 126.844 cv
40.887 126.754 40.801 126.664 40.715 126.578 cv
40.629 126.488 40.543 126.402 40.457 126.312 cv
40.367 126.227 40.281 126.141 40.191 126.055 cv
40.105 125.969 40.016 125.883 39.926 125.801 cv
39.836 125.715 39.746 125.629 39.652 125.547 cv
39.562 125.465 39.469 125.383 39.379 125.301 cv
39.285 125.219 39.191 125.137 39.098 125.059 cv
39.004 124.977 38.91 124.898 38.816 124.82 cv
38.719 124.742 38.625 124.664 38.527 124.586 cv
38.434 124.512 38.336 124.434 38.238 124.359 cv
38.141 124.281 38.043 124.207 37.941 124.133 cv
37.844 124.059 37.746 123.984 37.645 123.914 cv
37.547 123.84 37.445 123.77 37.344 123.699 cv
37.242 123.629 37.141 123.559 37.039 123.488 cv
36.938 123.418 36.836 123.352 36.734 123.281 cv
36.629 123.215 36.527 123.148 36.422 123.082 cv
36.316 123.016 36.215 122.949 36.109 122.887 cv
36.004 122.82 35.898 122.758 35.793 122.695 cv
35.684 122.633 35.578 122.57 35.473 122.508 cv
35.363 122.449 35.258 122.387 35.148 122.328 cv
35.039 122.27 34.934 122.211 34.824 122.152 cv
34.715 122.094 34.605 122.039 34.496 121.984 cv
34.387 121.926 34.273 121.871 34.164 121.816 cv
34.055 121.762 33.941 121.711 33.832 121.656 cv
33.719 121.605 33.605 121.555 33.496 121.504 cv
33.383 121.453 33.27 121.402 33.156 121.352 cv
33.043 121.305 32.93 121.254 32.816 121.207 cv
32.703 121.16 32.586 121.113 32.473 121.07 cv
32.359 121.023 32.242 120.98 32.129 120.938 cv
32.012 120.891 31.895 120.852 31.781 120.809 cv
31.664 120.766 31.547 120.727 31.43 120.684 cv
31.316 120.645 31.199 120.605 31.082 120.57 cv
30.965 120.531 30.844 120.492 30.727 120.457 cv
30.609 120.422 30.492 120.387 30.375 120.352 cv
30.254 120.316 30.137 120.281 30.016 120.25 cv
29.898 120.219 29.777 120.188 29.66 120.156 cv
29.539 120.125 29.422 120.094 29.301 120.066 cv
29.18 120.039 29.059 120.012 28.941 119.984 cv
28.82 119.957 28.699 119.93 28.578 119.906 cv
28.457 119.879 28.336 119.855 28.215 119.832 cv
28.094 119.809 27.973 119.789 27.852 119.766 cv
27.73 119.746 27.609 119.727 27.488 119.707 cv
27.363 119.688 27.242 119.668 27.121 119.652 cv
27 119.633 26.875 119.617 26.754 119.602 cv
26.633 119.586 26.508 119.57 26.387 119.559 cv
26.266 119.543 26.141 119.531 26.02 119.52 cv
25.895 119.508 25.773 119.496 25.648 119.488 cv
25.527 119.48 25.406 119.469 25.281 119.461 cv
25.16 119.453 25.035 119.449 24.91 119.441 cv
24.789 119.438 24.664 119.43 24.543 119.426 cv
24.418 119.422 24.297 119.422 24.172 119.418 cv
24.051 119.418 23.926 119.414 23.801 119.414 cv
23.68 119.414 23.555 119.418 23.434 119.418 cv
23.309 119.422 23.188 119.422 23.062 119.426 cv
22.941 119.43 22.816 119.438 22.691 119.441 cv
22.57 119.449 22.445 119.453 22.324 119.461 cv
22.199 119.469 22.078 119.48 21.953 119.488 cv
21.832 119.496 21.707 119.508 21.586 119.52 cv
21.465 119.531 21.34 119.543 21.219 119.559 cv
21.094 119.57 20.973 119.586 20.852 119.602 cv
20.727 119.617 20.605 119.633 20.484 119.652 cv
20.363 119.668 20.238 119.688 20.117 119.707 cv
19.996 119.727 19.875 119.746 19.754 119.766 cv
19.633 119.789 19.512 119.809 19.391 119.832 cv
19.27 119.855 19.148 119.879 19.027 119.906 cv
18.906 119.93 18.785 119.957 18.664 119.984 cv
18.543 120.012 18.426 120.039 18.305 120.066 cv
18.184 120.094 18.066 120.125 17.945 120.156 cv
17.824 120.188 17.707 120.219 17.59 120.25 cv
17.469 120.281 17.352 120.316 17.23 120.352 cv
17.113 120.387 16.996 120.422 16.879 120.457 cv
16.758 120.492 16.641 120.531 16.523 120.57 cv
16.406 120.605 16.289 120.645 16.172 120.684 cv
16.059 120.727 15.941 120.766 15.824 120.809 cv
15.707 120.852 15.594 120.891 15.477 120.938 cv
15.363 120.98 15.246 121.023 15.133 121.07 cv
15.02 121.113 14.902 121.16 14.789 121.207 cv
14.676 121.254 14.562 121.305 14.449 121.352 cv
14.336 121.402 14.223 121.453 14.109 121.504 cv
14 121.555 13.887 121.605 13.773 121.656 cv
13.664 121.711 13.551 121.762 13.441 121.816 cv
13.332 121.871 13.219 121.926 13.109 121.984 cv
13 122.039 12.891 122.094 12.781 122.152 cv
12.672 122.211 12.566 122.27 12.457 122.328 cv
12.348 122.387 12.242 122.449 12.133 122.508 cv
12.027 122.57 11.922 122.633 11.812 122.695 cv
11.707 122.758 11.602 122.82 11.496 122.887 cv
11.391 122.949 11.285 123.016 11.184 123.082 cv
11.078 123.148 10.977 123.215 10.871 123.281 cv
10.77 123.352 10.668 123.418 10.566 123.488 cv
10.461 123.559 10.359 123.629 10.262 123.699 cv
10.16 123.77 10.059 123.84 9.961 123.914 cv
9.859 123.984 9.762 124.059 9.66 124.133 cv
9.562 124.207 9.465 124.281 9.367 124.359 cv
9.27 124.434 9.172 124.512 9.078 124.586 cv
8.98 124.664 8.887 124.742 8.789 124.82 cv
8.695 124.898 8.602 124.977 8.508 125.059 cv
8.414 125.137 8.32 125.219 8.227 125.301 cv
8.137 125.383 8.043 125.465 7.953 125.547 cv
7.859 125.629 7.77 125.715 7.68 125.801 cv
7.59 125.883 7.5 125.969 7.414 126.055 cv
7.324 126.141 7.234 126.227 7.148 126.312 cv
7.062 126.402 6.977 126.488 6.891 126.578 cv
6.805 126.664 6.719 126.754 6.633 126.844 cv
6.551 126.934 6.465 127.027 6.383 127.117 cv
6.301 127.207 6.219 127.301 6.137 127.391 cv
6.055 127.484 5.973 127.578 5.895 127.672 cv
5.812 127.766 5.734 127.859 5.656 127.953 cv
5.578 128.051 5.5 128.145 5.422 128.242 cv
5.344 128.34 5.27 128.434 5.191 128.531 cv
5.117 128.629 5.043 128.727 4.969 128.828 cv
4.895 128.926 4.82 129.023 4.75 129.125 cv
4.676 129.223 4.605 129.324 4.535 129.426 cv
4.465 129.527 4.395 129.629 4.324 129.73 cv
4.254 129.832 4.188 129.934 4.117 130.035 cv
4.051 130.141 3.984 130.242 3.918 130.348 cv
3.852 130.453 3.785 130.555 3.723 130.66 cv
3.656 130.766 3.594 130.871 3.531 130.977 cv
3.469 131.086 3.406 131.191 3.344 131.297 cv
3.285 131.406 3.223 131.512 3.164 131.621 cv
3.105 131.73 3.047 131.836 2.988 131.945 cv
2.93 132.055 2.875 132.164 2.816 132.273 cv
2.762 132.387 2.707 132.496 2.652 132.605 cv
2.598 132.715 2.547 132.828 2.492 132.941 cv
2.441 133.051 2.387 133.164 2.336 133.277 cv
2.285 133.387 2.238 133.5 2.188 133.613 cv
2.141 133.727 2.09 133.84 2.043 133.953 cv
1.996 134.07 1.949 134.184 1.906 134.297 cv
1.859 134.41 1.816 134.527 1.77 134.641 cv
1.727 134.758 1.684 134.875 1.645 134.988 cv
1.602 135.105 1.562 135.223 1.52 135.34 cv
1.48 135.457 1.441 135.57 1.402 135.688 cv
1.367 135.809 1.328 135.926 1.293 136.043 cv
1.258 136.16 1.219 136.277 1.188 136.398 cv
1.152 136.516 1.117 136.633 1.086 136.754 cv
1.055 136.871 1.023 136.992 .992 137.109 cv
.961 137.23 .93 137.348 .902 137.469 cv
.871 137.59 .844 137.711 .816 137.828 cv
.793 137.949 .766 138.07 .742 138.191 cv
.715 138.312 .691 138.434 .668 138.555 cv
.645 138.676 .621 138.797 .602 138.918 cv
.582 139.039 .559 139.16 .539 139.281 cv
.523 139.406 .504 139.527 .484 139.648 cv
.469 139.77 .453 139.895 .438 140.016 cv
.422 140.137 .406 140.262 .395 140.383 cv
.379 140.504 .367 140.629 .355 140.75 cv
.344 140.875 .332 140.996 .324 141.121 cv
.312 141.242 .305 141.367 .297 141.488 cv
.289 141.613 .281 141.734 .277 141.859 cv
.27 141.98 .266 142.105 .262 142.227 cv
.258 142.352 .254 142.473 .254 142.598 cv
.254 142.719 .25 142.844 .25 142.969 cv
.25 143.09 .254 143.215 .254 143.336 cv
.254 143.461 .258 143.582 .262 143.707 cv
.266 143.832 .27 143.953 .277 144.078 cv
.281 144.199 .289 144.324 .297 144.445 cv
.305 144.57 .312 144.691 .324 144.816 cv
.332 144.938 .344 145.062 .355 145.184 cv
.367 145.305 .379 145.43 .395 145.551 cv
.406 145.676 .422 145.797 .438 145.918 cv
.453 146.043 .469 146.164 .484 146.285 cv
.504 146.406 .523 146.531 .539 146.652 cv
.559 146.773 .582 146.895 .602 147.016 cv
.621 147.137 .645 147.258 .668 147.379 cv
.691 147.5 .715 147.621 .742 147.742 cv
.766 147.863 .793 147.984 .816 148.105 cv
.844 148.227 .871 148.344 .902 148.465 cv
.93 148.586 .961 148.703 .992 148.824 cv
1.023 148.945 1.055 149.062 1.086 149.184 cv
1.117 149.301 1.152 149.418 1.188 149.539 cv
1.219 149.656 1.258 149.773 1.293 149.891 cv
1.328 150.012 1.367 150.129 1.402 150.246 cv
1.441 150.363 1.48 150.48 1.52 150.598 cv
1.562 150.711 1.602 150.828 1.645 150.945 cv
1.684 151.062 1.727 151.176 1.77 151.293 cv
1.816 151.406 1.859 151.523 1.906 151.637 cv
1.949 151.75 1.996 151.867 2.043 151.98 cv
2.09 152.094 2.141 152.207 2.188 152.32 cv
2.238 152.434 2.285 152.547 2.336 152.66 cv
2.387 152.77 2.441 152.883 2.492 152.996 cv
2.547 153.105 2.598 153.219 2.652 153.328 cv
2.707 153.438 2.762 153.551 2.816 153.66 cv
2.875 153.77 2.93 153.879 2.988 153.988 cv
3.047 154.098 3.105 154.207 3.164 154.312 cv
3.223 154.422 3.285 154.527 3.344 154.637 cv
3.406 154.742 3.469 154.852 3.531 154.957 cv
3.594 155.062 3.656 155.168 3.723 155.273 cv
3.785 155.379 3.852 155.484 3.918 155.586 cv
3.984 155.691 4.051 155.793 4.117 155.898 cv
4.188 156 4.254 156.102 4.324 156.207 cv
4.395 156.309 4.465 156.41 4.535 156.508 cv
4.605 156.609 4.676 156.711 4.75 156.809 cv
4.82 156.91 4.895 157.008 4.969 157.109 cv
5.043 157.207 5.117 157.305 5.191 157.402 cv
5.27 157.5 5.344 157.598 5.422 157.691 cv
5.5 157.789 5.578 157.883 5.656 157.98 cv
5.734 158.074 5.812 158.168 5.895 158.262 cv
5.973 158.355 6.055 158.449 6.137 158.543 cv
6.219 158.633 6.301 158.727 6.383 158.816 cv
6.465 158.91 6.551 159 6.633 159.09 cv
6.719 159.18 6.805 159.27 6.891 159.355 cv
6.977 159.445 7.062 159.535 7.148 159.621 cv
7.234 159.707 7.324 159.793 7.414 159.879 cv
7.5 159.965 7.59 160.051 7.68 160.137 cv
7.77 160.219 7.859 160.305 7.953 160.387 cv
8.043 160.469 8.137 160.551 8.227 160.633 cv
8.32 160.715 8.414 160.797 8.508 160.875 cv
8.602 160.957 8.695 161.035 8.789 161.113 cv
8.887 161.191 8.98 161.27 9.078 161.348 cv
9.172 161.426 9.27 161.5 9.367 161.578 cv
9.465 161.652 9.562 161.727 9.66 161.801 cv
9.762 161.875 9.859 161.949 9.961 162.02 cv
10.059 162.094 10.16 162.164 10.262 162.234 cv
10.359 162.309 10.461 162.375 10.566 162.445 cv
10.668 162.516 10.77 162.586 10.871 162.652 cv
10.977 162.719 11.078 162.785 11.184 162.852 cv
11.285 162.918 11.391 162.984 11.496 163.047 cv
11.602 163.113 11.707 163.176 11.812 163.238 cv
11.922 163.301 12.027 163.363 12.133 163.426 cv
12.242 163.484 12.348 163.547 12.457 163.605 cv
12.566 163.664 12.672 163.723 12.781 163.781 cv
12.891 163.84 13 163.895 13.109 163.953 cv
13.219 164.008 13.332 164.062 13.441 164.117 cv
13.551 164.172 13.664 164.227 13.773 164.277 cv
13.887 164.328 14 164.383 14.109 164.434 cv
14.223 164.484 14.336 164.531 14.449 164.582 cv
14.562 164.629 14.676 164.68 14.789 164.727 cv
14.902 164.773 15.02 164.82 15.133 164.863 cv
15.246 164.91 15.363 164.953 15.477 165 cv
15.594 165.043 15.707 165.086 15.824 165.125 cv
15.941 165.168 16.059 165.211 16.172 165.25 cv
16.289 165.289 16.406 165.328 16.523 165.367 cv
16.641 165.402 16.758 165.441 16.879 165.477 cv
16.996 165.516 17.113 165.551 17.23 165.582 cv
17.352 165.617 17.469 165.652 17.59 165.684 cv
17.707 165.715 17.824 165.75 17.945 165.777 cv
18.066 165.809 18.184 165.84 18.305 165.867 cv
18.426 165.898 18.543 165.926 18.664 165.953 cv
18.785 165.977 18.906 166.004 19.027 166.031 cv
19.148 166.055 19.27 166.078 19.391 166.102 cv
19.512 166.125 19.633 166.148 19.754 166.168 cv
19.875 166.188 19.996 166.211 20.117 166.23 cv
20.238 166.246 20.363 166.266 20.484 166.285 cv
20.605 166.301 20.727 166.316 20.852 166.332 cv
20.973 166.348 21.094 166.363 21.219 166.375 cv
21.34 166.391 21.465 166.402 21.586 166.414 cv
21.707 166.426 21.832 166.438 21.953 166.445 cv
22.078 166.457 22.199 166.465 22.324 166.473 cv
22.445 166.48 22.57 166.488 22.691 166.492 cv
22.816 166.5 22.941 166.504 23.062 166.508 cv
23.188 166.512 23.309 166.516 23.434 166.516 cv
23.555 166.52 23.68 166.52 23.801 166.52 cv
23.926 166.52 24.051 166.52 24.172 166.516 cv
24.297 166.516 24.418 166.512 24.543 166.508 cv
24.664 166.504 24.789 166.5 24.91 166.492 cv
25.035 166.488 25.16 166.48 25.281 166.473 cv
25.406 166.465 25.527 166.457 25.648 166.445 cv
25.773 166.438 25.895 166.426 26.02 166.414 cv
26.141 166.402 26.266 166.391 26.387 166.375 cv
26.508 166.363 26.633 166.348 26.754 166.332 cv
26.875 166.316 27 166.301 27.121 166.285 cv
27.242 166.266 27.363 166.246 27.488 166.23 cv
27.609 166.211 27.73 166.188 27.852 166.168 cv
27.973 166.148 28.094 166.125 28.215 166.102 cv
28.336 166.078 28.457 166.055 28.578 166.031 cv
28.699 166.004 28.82 165.977 28.941 165.953 cv
29.059 165.926 29.18 165.898 29.301 165.867 cv
29.422 165.84 29.539 165.809 29.66 165.777 cv
29.777 165.75 29.898 165.715 30.016 165.684 cv
30.137 165.652 30.254 165.617 30.375 165.582 cv
30.492 165.551 30.609 165.516 30.727 165.477 cv
30.844 165.441 30.965 165.402 31.082 165.367 cv
31.199 165.328 31.316 165.289 31.43 165.25 cv
31.547 165.211 31.664 165.168 31.781 165.125 cv
31.895 165.086 32.012 165.043 32.129 165 cv
32.242 164.953 32.359 164.91 32.473 164.863 cv
32.586 164.82 32.703 164.773 32.816 164.727 cv
32.93 164.68 33.043 164.629 33.156 164.582 cv
33.27 164.531 33.383 164.484 33.496 164.434 cv
33.605 164.383 33.719 164.328 33.832 164.277 cv
33.941 164.227 34.055 164.172 34.164 164.117 cv
34.273 164.062 34.387 164.008 34.496 163.953 cv
34.605 163.895 34.715 163.84 34.824 163.781 cv
34.934 163.723 35.039 163.664 35.148 163.605 cv
35.258 163.547 35.363 163.484 35.473 163.426 cv
35.578 163.363 35.684 163.301 35.793 163.238 cv
35.898 163.176 36.004 163.113 36.109 163.047 cv
36.215 162.984 36.316 162.918 36.422 162.852 cv
36.527 162.785 36.629 162.719 36.734 162.652 cv
36.836 162.586 36.938 162.516 37.039 162.445 cv
37.141 162.375 37.242 162.309 37.344 162.234 cv
37.445 162.164 37.547 162.094 37.645 162.02 cv
37.746 161.949 37.844 161.875 37.941 161.801 cv
38.043 161.727 38.141 161.652 38.238 161.578 cv
38.336 161.5 38.434 161.426 38.527 161.348 cv
38.625 161.27 38.719 161.191 38.816 161.113 cv
38.91 161.035 39.004 160.957 39.098 160.875 cv
39.191 160.797 39.285 160.715 39.379 160.633 cv
39.469 160.551 39.562 160.469 39.652 160.387 cv
39.746 160.305 39.836 160.219 39.926 160.137 cv
40.016 160.051 40.105 159.965 40.191 159.879 cv
40.281 159.793 40.367 159.707 40.457 159.621 cv
40.543 159.535 40.629 159.445 40.715 159.355 cv
40.801 159.27 40.887 159.18 40.973 159.09 cv
41.055 159 41.141 158.91 41.223 158.816 cv
41.305 158.727 41.387 158.633 41.469 158.543 cv
41.551 158.449 41.633 158.355 41.711 158.262 cv
41.793 158.168 41.871 158.074 41.949 157.98 cv
42.027 157.883 42.105 157.789 42.184 157.691 cv
42.262 157.598 42.336 157.5 42.41 157.402 cv
42.488 157.305 42.562 157.207 42.637 157.109 cv
42.711 157.008 42.785 156.91 42.855 156.809 cv
42.93 156.711 43 156.609 43.07 156.508 cv
43.141 156.41 43.211 156.309 43.281 156.207 cv
43.352 156.102 43.418 156 43.488 155.898 cv
43.555 155.793 43.621 155.691 43.688 155.586 cv
43.754 155.484 43.82 155.379 43.883 155.273 cv
43.949 155.168 44.012 155.062 44.074 154.957 cv
44.137 154.852 44.199 154.742 44.262 154.637 cv
44.32 154.527 44.383 154.422 44.441 154.312 cv
44.5 154.207 44.559 154.098 44.617 153.988 cv
44.676 153.879 44.73 153.77 44.785 153.66 cv
44.844 153.551 44.898 153.438 44.953 153.328 cv
45.008 153.219 45.059 153.105 45.113 152.996 cv
45.164 152.883 45.215 152.77 45.266 152.66 cv
45.316 152.547 45.367 152.434 45.418 152.32 cv
45.465 152.207 45.516 152.094 45.562 151.98 cv
45.609 151.867 45.656 151.75 45.699 151.637 cv
45.746 151.523 45.789 151.406 45.832 151.293 cv
45.879 151.176 45.918 151.062 45.961 150.945 cv
46.004 150.828 46.043 150.711 46.086 150.598 cv
46.125 150.48 46.164 150.363 46.203 150.246 cv
46.238 150.129 46.277 150.012 46.312 149.891 cv
46.348 149.773 46.383 149.656 46.418 149.539 cv
46.453 149.418 46.488 149.301 46.52 149.184 cv
46.551 149.062 46.582 148.945 46.613 148.824 cv
46.645 148.703 46.676 148.586 46.703 148.465 cv
46.73 148.344 46.762 148.227 46.785 148.105 cv
46.812 147.984 46.84 147.863 46.863 147.742 cv
46.891 147.621 46.914 147.5 46.938 147.379 cv
46.961 147.258 46.98 147.137 47.004 147.016 cv
47.023 146.895 47.043 146.773 47.062 146.652 cv
47.082 146.531 47.102 146.406 47.117 146.285 cv
47.137 146.164 47.152 146.043 47.168 145.918 cv
47.184 145.797 47.199 145.676 47.211 145.551 cv
47.227 145.43 47.238 145.305 47.25 145.184 cv
47.262 145.062 47.273 144.938 47.281 144.816 cv
47.293 144.691 47.301 144.57 47.309 144.445 cv
47.316 144.324 47.32 144.199 47.328 144.078 cv
47.332 143.953 47.34 143.832 47.344 143.707 cv
47.348 143.582 47.348 143.461 47.352 143.336 cv
47.352 143.215 47.355 143.09 47.355 142.969 cv
cp
@
47.355 72.312 mo
47.355 72.191 47.352 72.066 47.352 71.941 cv
47.348 71.82 47.348 71.695 47.344 71.574 cv
47.34 71.449 47.332 71.328 47.328 71.203 cv
47.32 71.078 47.316 70.957 47.309 70.832 cv
47.301 70.711 47.293 70.586 47.281 70.465 cv
47.273 70.34 47.262 70.219 47.25 70.098 cv
47.238 69.973 47.227 69.852 47.211 69.73 cv
47.199 69.605 47.184 69.484 47.168 69.359 cv
47.152 69.238 47.137 69.117 47.117 68.996 cv
47.102 68.871 47.082 68.75 47.062 68.629 cv
47.043 68.508 47.023 68.383 47.004 68.266 cv
46.98 68.141 46.961 68.02 46.938 67.898 cv
46.914 67.777 46.891 67.656 46.863 67.535 cv
46.84 67.414 46.812 67.297 46.785 67.176 cv
46.762 67.055 46.73 66.934 46.703 66.816 cv
46.676 66.695 46.645 66.574 46.613 66.457 cv
46.582 66.336 46.551 66.215 46.52 66.098 cv
46.488 65.98 46.453 65.859 46.418 65.742 cv
46.383 65.625 46.348 65.504 46.312 65.387 cv
46.277 65.27 46.238 65.152 46.203 65.035 cv
46.164 64.918 46.125 64.801 46.086 64.684 cv
46.043 64.566 46.004 64.449 45.961 64.336 cv
45.918 64.219 45.879 64.105 45.832 63.988 cv
45.789 63.871 45.746 63.758 45.699 63.645 cv
45.656 63.527 45.609 63.414 45.562 63.301 cv
45.516 63.188 45.465 63.074 45.418 62.961 cv
45.367 62.844 45.316 62.734 45.266 62.621 cv
45.215 62.508 45.164 62.398 45.113 62.285 cv
45.059 62.172 45.008 62.062 44.953 61.953 cv
44.898 61.84 44.844 61.73 44.785 61.621 cv
44.73 61.512 44.676 61.402 44.617 61.293 cv
44.559 61.184 44.5 61.074 44.441 60.965 cv
44.383 60.859 44.32 60.75 44.262 60.645 cv
44.199 60.535 44.137 60.43 44.074 60.324 cv
44.012 60.219 43.949 60.113 43.883 60.008 cv
43.82 59.902 43.754 59.797 43.688 59.695 cv
43.621 59.59 43.555 59.484 43.488 59.383 cv
43.418 59.281 43.352 59.176 43.281 59.074 cv
43.211 58.973 43.141 58.871 43.07 58.77 cv
43 58.668 42.93 58.57 42.855 58.469 cv
42.785 58.371 42.711 58.27 42.637 58.172 cv
42.562 58.074 42.488 57.977 42.41 57.879 cv
42.336 57.781 42.262 57.684 42.184 57.586 cv
42.105 57.492 42.027 57.395 41.949 57.301 cv
41.871 57.207 41.793 57.109 41.711 57.02 cv
41.633 56.922 41.551 56.832 41.469 56.738 cv
41.387 56.645 41.305 56.555 41.223 56.461 cv
41.141 56.371 41.055 56.281 40.973 56.191 cv
40.887 56.102 40.801 56.012 40.715 55.922 cv
40.629 55.836 40.543 55.746 40.457 55.66 cv
40.367 55.57 40.281 55.484 40.191 55.398 cv
40.105 55.312 40.016 55.23 39.926 55.145 cv
39.836 55.059 39.746 54.977 39.652 54.895 cv
39.562 54.812 39.469 54.727 39.379 54.648 cv
39.285 54.566 39.191 54.484 39.098 54.402 cv
39.004 54.324 38.91 54.246 38.816 54.164 cv
38.719 54.086 38.625 54.008 38.527 53.934 cv
38.434 53.855 38.336 53.777 38.238 53.703 cv
38.141 53.629 38.043 53.551 37.941 53.48 cv
37.844 53.406 37.746 53.332 37.645 53.258 cv
37.547 53.188 37.445 53.113 37.344 53.043 cv
37.242 52.973 37.141 52.902 37.039 52.832 cv
36.938 52.766 36.836 52.695 36.734 52.629 cv
36.629 52.562 36.527 52.492 36.422 52.426 cv
36.316 52.363 36.215 52.297 36.109 52.23 cv
36.004 52.168 35.898 52.105 35.793 52.039 cv
35.684 51.977 35.578 51.918 35.473 51.855 cv
35.363 51.793 35.258 51.734 35.148 51.676 cv
35.039 51.613 34.934 51.559 34.824 51.5 cv
34.715 51.441 34.605 51.383 34.496 51.328 cv
34.387 51.273 34.273 51.215 34.164 51.164 cv
34.055 51.109 33.941 51.055 33.832 51.004 cv
33.719 50.949 33.605 50.898 33.496 50.848 cv
33.383 50.797 33.27 50.746 33.156 50.699 cv
33.043 50.648 32.93 50.602 32.816 50.555 cv
32.703 50.508 32.586 50.461 32.473 50.414 cv
32.359 50.371 32.242 50.324 32.129 50.281 cv
32.012 50.238 31.895 50.195 31.781 50.152 cv
31.664 50.113 31.547 50.07 31.43 50.031 cv
31.316 49.992 31.199 49.953 31.082 49.914 cv
30.965 49.875 30.844 49.84 30.727 49.801 cv
30.609 49.766 30.492 49.73 30.375 49.695 cv
30.254 49.66 30.137 49.629 30.016 49.594 cv
29.898 49.562 29.777 49.531 29.66 49.5 cv
29.539 49.469 29.422 49.441 29.301 49.41 cv
29.18 49.383 29.059 49.355 28.941 49.328 cv
28.82 49.301 28.699 49.277 28.578 49.25 cv
28.457 49.227 28.336 49.203 28.215 49.18 cv
28.094 49.156 27.973 49.133 27.852 49.113 cv
27.73 49.09 27.609 49.07 27.488 49.051 cv
27.363 49.031 27.242 49.016 27.121 48.996 cv
27 48.98 26.875 48.961 26.754 48.945 cv
26.633 48.934 26.508 48.918 26.387 48.902 cv
26.266 48.891 26.141 48.879 26.02 48.867 cv
25.895 48.855 25.773 48.844 25.648 48.832 cv
25.527 48.824 25.406 48.816 25.281 48.809 cv
25.16 48.801 25.035 48.793 24.91 48.789 cv
24.789 48.781 24.664 48.777 24.543 48.773 cv
24.418 48.77 24.297 48.766 24.172 48.766 cv
24.051 48.762 23.926 48.762 23.801 48.762 cv
23.68 48.762 23.555 48.762 23.434 48.766 cv
23.309 48.766 23.188 48.77 23.062 48.773 cv
22.941 48.777 22.816 48.781 22.691 48.789 cv
22.57 48.793 22.445 48.801 22.324 48.809 cv
22.199 48.816 22.078 48.824 21.953 48.832 cv
21.832 48.844 21.707 48.855 21.586 48.867 cv
21.465 48.879 21.34 48.891 21.219 48.902 cv
21.094 48.918 20.973 48.934 20.852 48.945 cv
20.727 48.961 20.605 48.98 20.484 48.996 cv
20.363 49.016 20.238 49.031 20.117 49.051 cv
19.996 49.07 19.875 49.09 19.754 49.113 cv
19.633 49.133 19.512 49.156 19.391 49.18 cv
19.27 49.203 19.148 49.227 19.027 49.25 cv
18.906 49.277 18.785 49.301 18.664 49.328 cv
18.543 49.355 18.426 49.383 18.305 49.41 cv
18.184 49.441 18.066 49.469 17.945 49.5 cv
17.824 49.531 17.707 49.562 17.59 49.594 cv
17.469 49.629 17.352 49.66 17.23 49.695 cv
17.113 49.73 16.996 49.766 16.879 49.801 cv
16.758 49.84 16.641 49.875 16.523 49.914 cv
16.406 49.953 16.289 49.992 16.172 50.031 cv
16.059 50.07 15.941 50.113 15.824 50.152 cv
15.707 50.195 15.594 50.238 15.477 50.281 cv
15.363 50.324 15.246 50.371 15.133 50.414 cv
15.02 50.461 14.902 50.508 14.789 50.555 cv
14.676 50.602 14.562 50.648 14.449 50.699 cv
14.336 50.746 14.223 50.797 14.109 50.848 cv
14 50.898 13.887 50.949 13.773 51.004 cv
13.664 51.055 13.551 51.109 13.441 51.164 cv
13.332 51.215 13.219 51.273 13.109 51.328 cv
13 51.383 12.891 51.441 12.781 51.5 cv
12.672 51.559 12.566 51.613 12.457 51.676 cv
12.348 51.734 12.242 51.793 12.133 51.855 cv
12.027 51.918 11.922 51.977 11.812 52.039 cv
11.707 52.105 11.602 52.168 11.496 52.23 cv
11.391 52.297 11.285 52.363 11.184 52.426 cv
11.078 52.492 10.977 52.562 10.871 52.629 cv
10.77 52.695 10.668 52.766 10.566 52.832 cv
10.461 52.902 10.359 52.973 10.262 53.043 cv
10.16 53.113 10.059 53.188 9.961 53.258 cv
9.859 53.332 9.762 53.406 9.66 53.48 cv
9.562 53.551 9.465 53.629 9.367 53.703 cv
9.27 53.777 9.172 53.855 9.078 53.934 cv
8.98 54.008 8.887 54.086 8.789 54.164 cv
8.695 54.246 8.602 54.324 8.508 54.402 cv
8.414 54.484 8.32 54.566 8.227 54.648 cv
8.137 54.727 8.043 54.812 7.953 54.895 cv
7.859 54.977 7.77 55.059 7.68 55.145 cv
7.59 55.23 7.5 55.312 7.414 55.398 cv
7.324 55.484 7.234 55.57 7.148 55.66 cv
7.062 55.746 6.977 55.836 6.891 55.922 cv
6.805 56.012 6.719 56.102 6.633 56.191 cv
6.551 56.281 6.465 56.371 6.383 56.461 cv
6.301 56.555 6.219 56.645 6.137 56.738 cv
6.055 56.832 5.973 56.922 5.895 57.02 cv
5.812 57.109 5.734 57.207 5.656 57.301 cv
5.578 57.395 5.5 57.492 5.422 57.586 cv
5.344 57.684 5.27 57.781 5.191 57.879 cv
5.117 57.977 5.043 58.074 4.969 58.172 cv
4.895 58.27 4.82 58.371 4.75 58.469 cv
4.676 58.57 4.605 58.668 4.535 58.77 cv
4.465 58.871 4.395 58.973 4.324 59.074 cv
4.254 59.176 4.188 59.281 4.117 59.383 cv
4.051 59.484 3.984 59.59 3.918 59.695 cv
3.852 59.797 3.785 59.902 3.723 60.008 cv
3.656 60.113 3.594 60.219 3.531 60.324 cv
3.469 60.43 3.406 60.535 3.344 60.645 cv
3.285 60.75 3.223 60.859 3.164 60.965 cv
3.105 61.074 3.047 61.184 2.988 61.293 cv
2.93 61.402 2.875 61.512 2.816 61.621 cv
2.762 61.73 2.707 61.84 2.652 61.953 cv
2.598 62.062 2.547 62.172 2.492 62.285 cv
2.441 62.398 2.387 62.508 2.336 62.621 cv
2.285 62.734 2.238 62.844 2.188 62.961 cv
2.141 63.074 2.09 63.188 2.043 63.301 cv
1.996 63.414 1.949 63.527 1.906 63.645 cv
1.859 63.758 1.816 63.871 1.77 63.988 cv
1.727 64.105 1.684 64.219 1.645 64.336 cv
1.602 64.449 1.562 64.566 1.52 64.684 cv
1.48 64.801 1.441 64.918 1.402 65.035 cv
1.367 65.152 1.328 65.27 1.293 65.387 cv
1.258 65.504 1.219 65.625 1.188 65.742 cv
1.152 65.859 1.117 65.98 1.086 66.098 cv
1.055 66.215 1.023 66.336 .992 66.457 cv
.961 66.574 .93 66.695 .902 66.816 cv
.871 66.934 .844 67.055 .816 67.176 cv
.793 67.297 .766 67.414 .742 67.535 cv
.715 67.656 .691 67.777 .668 67.898 cv
.645 68.02 .621 68.141 .602 68.266 cv
.582 68.383 .559 68.508 .539 68.629 cv
.523 68.75 .504 68.871 .484 68.996 cv
.469 69.117 .453 69.238 .438 69.359 cv
.422 69.484 .406 69.605 .395 69.73 cv
.379 69.852 .367 69.973 .355 70.098 cv
.344 70.219 .332 70.34 .324 70.465 cv
.312 70.586 .305 70.711 .297 70.832 cv
.289 70.957 .281 71.078 .277 71.203 cv
.27 71.328 .266 71.449 .262 71.574 cv
.258 71.695 .254 71.82 .254 71.941 cv
.254 72.066 .25 72.191 .25 72.312 cv
.25 72.438 .254 72.559 .254 72.684 cv
.254 72.805 .258 72.93 .262 73.051 cv
.266 73.176 .27 73.297 .277 73.422 cv
.281 73.547 .289 73.668 .297 73.793 cv
.305 73.914 .312 74.039 .324 74.16 cv
.332 74.285 .344 74.406 .355 74.527 cv
.367 74.652 .379 74.773 .395 74.898 cv
.406 75.02 .422 75.141 .438 75.266 cv
.453 75.387 .469 75.508 .484 75.629 cv
.504 75.754 .523 75.875 .539 75.996 cv
.559 76.117 .582 76.242 .602 76.363 cv
.621 76.484 .645 76.605 .668 76.727 cv
.691 76.848 .715 76.969 .742 77.09 cv
.766 77.211 .793 77.328 .816 77.449 cv
.844 77.57 .871 77.691 .902 77.812 cv
.93 77.93 .961 78.051 .992 78.168 cv
1.023 78.289 1.055 78.41 1.086 78.527 cv
1.117 78.648 1.152 78.766 1.188 78.883 cv
1.219 79 1.258 79.121 1.293 79.238 cv
1.328 79.355 1.367 79.473 1.402 79.59 cv
1.441 79.707 1.48 79.824 1.52 79.941 cv
1.562 80.059 1.602 80.176 1.645 80.289 cv
1.684 80.406 1.727 80.523 1.77 80.637 cv
1.816 80.754 1.859 80.867 1.906 80.984 cv
1.949 81.098 1.996 81.211 2.043 81.324 cv
2.09 81.441 2.141 81.551 2.188 81.664 cv
2.238 81.781 2.285 81.891 2.336 82.004 cv
2.387 82.117 2.441 82.23 2.492 82.34 cv
2.547 82.453 2.598 82.562 2.652 82.672 cv
2.707 82.785 2.762 82.895 2.816 83.004 cv
2.875 83.113 2.93 83.223 2.988 83.332 cv
3.047 83.441 3.105 83.551 3.164 83.66 cv
3.223 83.766 3.285 83.875 3.344 83.98 cv
3.406 84.09 3.469 84.195 3.531 84.301 cv
3.594 84.406 3.656 84.516 3.723 84.617 cv
3.785 84.723 3.852 84.828 3.918 84.934 cv
3.984 85.035 4.051 85.141 4.117 85.242 cv
4.188 85.348 4.254 85.449 4.324 85.551 cv
4.395 85.652 4.465 85.754 4.535 85.855 cv
4.605 85.957 4.676 86.055 4.75 86.156 cv
4.82 86.254 4.895 86.355 4.969 86.453 cv
5.043 86.551 5.117 86.648 5.191 86.746 cv
5.27 86.844 5.344 86.941 5.422 87.039 cv
5.5 87.133 5.578 87.23 5.656 87.324 cv
5.734 87.418 5.812 87.516 5.895 87.609 cv
5.973 87.703 6.055 87.793 6.137 87.887 cv
6.219 87.98 6.301 88.07 6.383 88.164 cv
6.465 88.254 6.551 88.344 6.633 88.434 cv
6.719 88.523 6.805 88.613 6.891 88.703 cv
6.977 88.789 7.062 88.879 7.148 88.965 cv
7.234 89.055 7.324 89.141 7.414 89.227 cv
7.5 89.312 7.59 89.398 7.68 89.48 cv
7.77 89.566 7.859 89.648 7.953 89.73 cv
8.043 89.816 8.137 89.898 8.227 89.98 cv
8.32 90.062 8.414 90.141 8.508 90.223 cv
8.602 90.301 8.695 90.379 8.789 90.461 cv
8.887 90.539 8.98 90.617 9.078 90.691 cv
9.172 90.77 9.27 90.848 9.367 90.922 cv
9.465 90.996 9.562 91.074 9.66 91.148 cv
9.762 91.223 9.859 91.293 9.961 91.367 cv
10.059 91.438 10.16 91.512 10.262 91.582 cv
10.359 91.652 10.461 91.723 10.566 91.793 cv
10.668 91.859 10.77 91.93 10.871 91.996 cv
10.977 92.066 11.078 92.133 11.184 92.199 cv
11.285 92.266 11.391 92.328 11.496 92.395 cv
11.602 92.457 11.707 92.523 11.812 92.586 cv
11.922 92.648 12.027 92.711 12.133 92.77 cv
12.242 92.832 12.348 92.891 12.457 92.949 cv
12.566 93.012 12.672 93.07 12.781 93.125 cv
12.891 93.184 13 93.242 13.109 93.297 cv
13.219 93.355 13.332 93.41 13.441 93.461 cv
13.551 93.516 13.664 93.57 13.773 93.621 cv
13.887 93.676 14 93.727 14.109 93.777 cv
14.223 93.828 14.336 93.879 14.449 93.926 cv
14.562 93.977 14.676 94.023 14.789 94.07 cv
14.902 94.117 15.02 94.164 15.133 94.211 cv
15.246 94.254 15.363 94.301 15.477 94.344 cv
15.594 94.387 15.707 94.43 15.824 94.473 cv
15.941 94.516 16.059 94.555 16.172 94.594 cv
16.289 94.633 16.406 94.672 16.523 94.711 cv
16.641 94.75 16.758 94.785 16.879 94.824 cv
16.996 94.859 17.113 94.895 17.23 94.93 cv
17.352 94.965 17.469 94.996 17.59 95.031 cv
17.707 95.062 17.824 95.094 17.945 95.125 cv
18.066 95.156 18.184 95.184 18.305 95.215 cv
18.426 95.242 18.543 95.27 18.664 95.297 cv
18.785 95.324 18.906 95.352 19.027 95.375 cv
19.148 95.398 19.27 95.422 19.391 95.445 cv
19.512 95.469 19.633 95.492 19.754 95.516 cv
19.875 95.535 19.996 95.555 20.117 95.574 cv
20.238 95.594 20.363 95.613 20.484 95.629 cv
20.605 95.648 20.727 95.664 20.852 95.68 cv
20.973 95.695 21.094 95.707 21.219 95.723 cv
21.34 95.734 21.465 95.746 21.586 95.758 cv
21.707 95.773 21.832 95.781 21.953 95.793 cv
22.078 95.801 22.199 95.809 22.324 95.816 cv
22.445 95.824 22.57 95.832 22.691 95.836 cv
22.816 95.844 22.941 95.848 23.062 95.852 cv
23.188 95.855 23.309 95.859 23.434 95.863 cv
23.555 95.863 23.68 95.863 23.801 95.863 cv
23.926 95.863 24.051 95.863 24.172 95.863 cv
24.297 95.859 24.418 95.855 24.543 95.852 cv
24.664 95.848 24.789 95.844 24.91 95.836 cv
25.035 95.832 25.16 95.824 25.281 95.816 cv
25.406 95.809 25.527 95.801 25.648 95.793 cv
25.773 95.781 25.895 95.773 26.02 95.758 cv
26.141 95.746 26.266 95.734 26.387 95.723 cv
26.508 95.707 26.633 95.695 26.754 95.68 cv
26.875 95.664 27 95.648 27.121 95.629 cv
27.242 95.613 27.363 95.594 27.488 95.574 cv
27.609 95.555 27.73 95.535 27.852 95.516 cv
27.973 95.492 28.094 95.469 28.215 95.445 cv
28.336 95.422 28.457 95.398 28.578 95.375 cv
28.699 95.352 28.82 95.324 28.941 95.297 cv
29.059 95.27 29.18 95.242 29.301 95.215 cv
29.422 95.184 29.539 95.156 29.66 95.125 cv
29.777 95.094 29.898 95.062 30.016 95.031 cv
30.137 94.996 30.254 94.965 30.375 94.93 cv
30.492 94.895 30.609 94.859 30.727 94.824 cv
30.844 94.785 30.965 94.75 31.082 94.711 cv
31.199 94.672 31.316 94.633 31.43 94.594 cv
31.547 94.555 31.664 94.516 31.781 94.473 cv
31.895 94.43 32.012 94.387 32.129 94.344 cv
32.242 94.301 32.359 94.254 32.473 94.211 cv
32.586 94.164 32.703 94.117 32.816 94.07 cv
32.93 94.023 33.043 93.977 33.156 93.926 cv
33.27 93.879 33.383 93.828 33.496 93.777 cv
33.605 93.727 33.719 93.676 33.832 93.621 cv
33.941 93.57 34.055 93.516 34.164 93.461 cv
34.273 93.41 34.387 93.355 34.496 93.297 cv
34.605 93.242 34.715 93.184 34.824 93.125 cv
34.934 93.07 35.039 93.012 35.148 92.949 cv
35.258 92.891 35.363 92.832 35.473 92.77 cv
35.578 92.711 35.684 92.648 35.793 92.586 cv
35.898 92.523 36.004 92.457 36.109 92.395 cv
36.215 92.328 36.316 92.266 36.422 92.199 cv
36.527 92.133 36.629 92.066 36.734 91.996 cv
36.836 91.93 36.938 91.859 37.039 91.793 cv
37.141 91.723 37.242 91.652 37.344 91.582 cv
37.445 91.512 37.547 91.438 37.645 91.367 cv
37.746 91.293 37.844 91.223 37.941 91.148 cv
38.043 91.074 38.141 90.996 38.238 90.922 cv
38.336 90.848 38.434 90.77 38.527 90.691 cv
38.625 90.617 38.719 90.539 38.816 90.461 cv
38.91 90.379 39.004 90.301 39.098 90.223 cv
39.191 90.141 39.285 90.062 39.379 89.98 cv
39.469 89.898 39.562 89.816 39.652 89.73 cv
39.746 89.648 39.836 89.566 39.926 89.48 cv
40.016 89.398 40.105 89.312 40.191 89.227 cv
40.281 89.141 40.367 89.055 40.457 88.965 cv
40.543 88.879 40.629 88.789 40.715 88.703 cv
40.801 88.613 40.887 88.523 40.973 88.434 cv
41.055 88.344 41.141 88.254 41.223 88.164 cv
41.305 88.07 41.387 87.98 41.469 87.887 cv
41.551 87.793 41.633 87.703 41.711 87.609 cv
41.793 87.516 41.871 87.418 41.949 87.324 cv
42.027 87.23 42.105 87.133 42.184 87.039 cv
42.262 86.941 42.336 86.844 42.41 86.746 cv
42.488 86.648 42.562 86.551 42.637 86.453 cv
42.711 86.355 42.785 86.254 42.855 86.156 cv
42.93 86.055 43 85.957 43.07 85.855 cv
43.141 85.754 43.211 85.652 43.281 85.551 cv
43.352 85.449 43.418 85.348 43.488 85.242 cv
43.555 85.141 43.621 85.035 43.688 84.934 cv
43.754 84.828 43.82 84.723 43.883 84.617 cv
43.949 84.516 44.012 84.406 44.074 84.301 cv
44.137 84.195 44.199 84.09 44.262 83.98 cv
44.32 83.875 44.383 83.766 44.441 83.66 cv
44.5 83.551 44.559 83.441 44.617 83.332 cv
44.676 83.223 44.73 83.113 44.785 83.004 cv
44.844 82.895 44.898 82.785 44.953 82.672 cv
45.008 82.562 45.059 82.453 45.113 82.34 cv
45.164 82.23 45.215 82.117 45.266 82.004 cv
45.316 81.891 45.367 81.781 45.418 81.664 cv
45.465 81.551 45.516 81.441 45.562 81.324 cv
45.609 81.211 45.656 81.098 45.699 80.984 cv
45.746 80.867 45.789 80.754 45.832 80.637 cv
45.879 80.523 45.918 80.406 45.961 80.289 cv
46.004 80.176 46.043 80.059 46.086 79.941 cv
46.125 79.824 46.164 79.707 46.203 79.59 cv
46.238 79.473 46.277 79.355 46.312 79.238 cv
46.348 79.121 46.383 79 46.418 78.883 cv
46.453 78.766 46.488 78.648 46.52 78.527 cv
46.551 78.41 46.582 78.289 46.613 78.168 cv
46.645 78.051 46.676 77.93 46.703 77.812 cv
46.73 77.691 46.762 77.57 46.785 77.449 cv
46.812 77.328 46.84 77.211 46.863 77.09 cv
46.891 76.969 46.914 76.848 46.938 76.727 cv
46.961 76.605 46.98 76.484 47.004 76.363 cv
47.023 76.242 47.043 76.117 47.062 75.996 cv
47.082 75.875 47.102 75.754 47.117 75.629 cv
47.137 75.508 47.152 75.387 47.168 75.266 cv
47.184 75.141 47.199 75.02 47.211 74.898 cv
47.227 74.773 47.238 74.652 47.25 74.527 cv
47.262 74.406 47.273 74.285 47.281 74.16 cv
47.293 74.039 47.301 73.914 47.309 73.793 cv
47.316 73.668 47.32 73.547 47.328 73.422 cv
47.332 73.297 47.34 73.176 47.344 73.051 cv
47.348 72.93 47.348 72.805 47.352 72.684 cv
47.352 72.559 47.355 72.438 47.355 72.312 cv
cp
@
141.559 248.949 mo
141.559 248.824 141.559 248.703 141.559 248.578 cv
141.555 248.457 141.551 248.332 141.547 248.211 cv
141.543 248.086 141.539 247.961 141.535 247.84 cv
141.527 247.715 141.523 247.594 141.512 247.469 cv
141.504 247.348 141.496 247.223 141.488 247.102 cv
141.477 246.977 141.469 246.855 141.457 246.734 cv
141.445 246.609 141.43 246.488 141.418 246.363 cv
141.406 246.242 141.391 246.121 141.375 245.996 cv
141.359 245.875 141.344 245.754 141.324 245.629 cv
141.309 245.508 141.289 245.387 141.27 245.266 cv
141.25 245.145 141.23 245.02 141.211 244.898 cv
141.188 244.777 141.164 244.656 141.141 244.535 cv
141.121 244.414 141.094 244.293 141.07 244.172 cv
141.047 244.051 141.02 243.934 140.992 243.812 cv
140.965 243.691 140.938 243.57 140.91 243.449 cv
140.879 243.332 140.852 243.211 140.82 243.094 cv
140.789 242.973 140.758 242.852 140.727 242.734 cv
140.691 242.617 140.66 242.496 140.625 242.379 cv
140.59 242.262 140.555 242.141 140.52 242.023 cv
140.484 241.906 140.445 241.789 140.406 241.672 cv
140.371 241.555 140.332 241.438 140.289 241.32 cv
140.25 241.203 140.211 241.086 140.168 240.973 cv
140.125 240.855 140.082 240.738 140.039 240.625 cv
139.996 240.508 139.953 240.395 139.906 240.277 cv
139.859 240.164 139.816 240.051 139.766 239.938 cv
139.719 239.82 139.672 239.707 139.621 239.594 cv
139.574 239.48 139.523 239.371 139.473 239.258 cv
139.422 239.145 139.371 239.031 139.32 238.922 cv
139.266 238.809 139.211 238.699 139.16 238.586 cv
139.105 238.477 139.047 238.367 138.992 238.258 cv
138.938 238.148 138.879 238.039 138.824 237.93 cv
138.766 237.82 138.707 237.711 138.648 237.602 cv
138.586 237.496 138.527 237.387 138.465 237.281 cv
138.406 237.172 138.344 237.066 138.281 236.961 cv
138.219 236.855 138.152 236.75 138.09 236.645 cv
138.023 236.539 137.961 236.434 137.895 236.328 cv
137.828 236.227 137.762 236.121 137.691 236.02 cv
137.625 235.914 137.555 235.812 137.488 235.711 cv
137.418 235.609 137.348 235.508 137.277 235.406 cv
137.207 235.305 137.133 235.207 137.062 235.105 cv
136.988 235.008 136.918 234.906 136.844 234.809 cv
136.77 234.711 136.695 234.613 136.617 234.516 cv
136.543 234.418 136.465 234.32 136.387 234.223 cv
136.312 234.129 136.234 234.031 136.156 233.938 cv
136.078 233.84 135.996 233.746 135.918 233.652 cv
135.836 233.559 135.758 233.465 135.676 233.375 cv
135.594 233.281 135.512 233.191 135.426 233.098 cv
135.344 233.008 135.262 232.918 135.176 232.828 cv
135.094 232.738 135.008 232.648 134.922 232.559 cv
134.836 232.469 134.75 232.383 134.66 232.297 cv
134.574 232.207 134.488 232.121 134.398 232.035 cv
134.309 231.949 134.219 231.863 134.129 231.781 cv
134.039 231.695 133.949 231.613 133.859 231.531 cv
133.766 231.445 133.676 231.363 133.582 231.281 cv
133.492 231.203 133.398 231.121 133.305 231.039 cv
133.211 230.961 133.117 230.879 133.02 230.801 cv
132.926 230.723 132.832 230.645 132.734 230.57 cv
132.637 230.492 132.539 230.414 132.445 230.34 cv
132.344 230.266 132.246 230.188 132.148 230.113 cv
132.051 230.043 131.953 229.969 131.852 229.895 cv
131.75 229.824 131.652 229.75 131.551 229.68 cv
131.449 229.609 131.348 229.539 131.246 229.469 cv
131.145 229.402 131.043 229.332 130.938 229.266 cv
130.836 229.195 130.734 229.129 130.629 229.062 cv
130.523 228.996 130.418 228.934 130.316 228.867 cv
130.207 228.805 130.102 228.738 129.996 228.676 cv
129.891 228.613 129.785 228.551 129.676 228.492 cv
129.57 228.43 129.461 228.371 129.355 228.312 cv
129.246 228.25 129.137 228.191 129.027 228.137 cv
128.918 228.078 128.809 228.02 128.699 227.965 cv
128.59 227.91 128.48 227.852 128.371 227.801 cv
128.258 227.746 128.148 227.691 128.035 227.641 cv
127.926 227.586 127.812 227.535 127.699 227.484 cv
127.586 227.434 127.477 227.383 127.363 227.336 cv
127.25 227.285 127.137 227.238 127.023 227.191 cv
126.906 227.145 126.793 227.098 126.68 227.051 cv
126.562 227.008 126.449 226.961 126.332 226.918 cv
126.219 226.875 126.102 226.832 125.988 226.789 cv
125.871 226.746 125.754 226.707 125.637 226.668 cv
125.52 226.629 125.402 226.59 125.285 226.551 cv
125.168 226.512 125.051 226.477 124.934 226.438 cv
124.816 226.402 124.699 226.367 124.578 226.332 cv
124.461 226.297 124.344 226.266 124.223 226.23 cv
124.105 226.199 123.984 226.168 123.867 226.137 cv
123.746 226.105 123.625 226.078 123.508 226.047 cv
123.387 226.02 123.266 225.992 123.145 225.965 cv
123.027 225.938 122.906 225.91 122.785 225.887 cv
122.664 225.863 122.543 225.836 122.422 225.816 cv
122.301 225.793 122.18 225.77 122.059 225.75 cv
121.938 225.727 121.816 225.707 121.691 225.688 cv
121.57 225.668 121.449 225.648 121.328 225.633 cv
121.203 225.613 121.082 225.598 120.961 225.582 cv
120.84 225.566 120.715 225.555 120.594 225.539 cv
120.469 225.527 120.348 225.512 120.227 225.504 cv
120.102 225.492 119.98 225.48 119.855 225.469 cv
119.734 225.461 119.609 225.453 119.488 225.445 cv
119.363 225.438 119.242 225.43 119.117 225.422 cv
118.996 225.418 118.871 225.414 118.75 225.41 cv
118.625 225.406 118.5 225.402 118.379 225.402 cv
118.254 225.398 118.133 225.398 118.008 225.398 cv
117.887 225.398 117.762 225.398 117.637 225.402 cv
117.516 225.402 117.391 225.406 117.27 225.41 cv
117.145 225.414 117.023 225.418 116.898 225.422 cv
116.777 225.43 116.652 225.438 116.531 225.445 cv
116.406 225.453 116.285 225.461 116.16 225.469 cv
116.039 225.48 115.914 225.492 115.793 225.504 cv
115.668 225.512 115.547 225.527 115.426 225.539 cv
115.301 225.555 115.18 225.566 115.059 225.582 cv
114.934 225.598 114.812 225.613 114.691 225.633 cv
114.566 225.648 114.445 225.668 114.324 225.688 cv
114.203 225.707 114.082 225.727 113.961 225.75 cv
113.836 225.77 113.715 225.793 113.594 225.816 cv
113.473 225.836 113.352 225.863 113.234 225.887 cv
113.113 225.91 112.992 225.938 112.871 225.965 cv
112.75 225.992 112.629 226.02 112.512 226.047 cv
112.391 226.078 112.27 226.105 112.152 226.137 cv
112.031 226.168 111.914 226.199 111.793 226.23 cv
111.676 226.266 111.555 226.297 111.438 226.332 cv
111.32 226.367 111.203 226.402 111.082 226.438 cv
110.965 226.477 110.848 226.512 110.73 226.551 cv
110.613 226.59 110.496 226.629 110.379 226.668 cv
110.262 226.707 110.148 226.746 110.031 226.789 cv
109.914 226.832 109.801 226.875 109.684 226.918 cv
109.566 226.961 109.453 227.008 109.34 227.051 cv
109.223 227.098 109.109 227.145 108.996 227.191 cv
108.883 227.238 108.77 227.285 108.656 227.336 cv
108.543 227.383 108.43 227.434 108.316 227.484 cv
108.203 227.535 108.094 227.586 107.98 227.641 cv
107.871 227.691 107.758 227.746 107.648 227.801 cv
107.535 227.852 107.426 227.91 107.316 227.965 cv
107.207 228.02 107.098 228.078 106.988 228.137 cv
106.879 228.191 106.77 228.25 106.664 228.312 cv
106.555 228.371 106.445 228.43 106.34 228.492 cv
106.234 228.551 106.125 228.613 106.02 228.676 cv
105.914 228.738 105.809 228.805 105.703 228.867 cv
105.598 228.934 105.492 228.996 105.391 229.062 cv
105.285 229.129 105.18 229.195 105.078 229.266 cv
104.977 229.332 104.871 229.402 104.77 229.469 cv
104.668 229.539 104.566 229.609 104.465 229.68 cv
104.367 229.75 104.266 229.824 104.164 229.895 cv
104.066 229.969 103.965 230.043 103.867 230.113 cv
103.77 230.188 103.672 230.266 103.574 230.34 cv
103.477 230.414 103.379 230.492 103.281 230.57 cv
103.188 230.645 103.09 230.723 102.996 230.801 cv
102.902 230.879 102.809 230.961 102.715 231.039 cv
102.621 231.121 102.527 231.203 102.434 231.281 cv
102.34 231.363 102.25 231.445 102.156 231.531 cv
102.066 231.613 101.977 231.695 101.887 231.781 cv
101.797 231.863 101.707 231.949 101.617 232.035 cv
101.531 232.121 101.441 232.207 101.355 232.297 cv
101.27 232.383 101.18 232.469 101.094 232.559 cv
101.008 232.648 100.926 232.738 100.84 232.828 cv
100.754 232.918 100.672 233.008 100.59 233.098 cv
100.508 233.191 100.422 233.281 100.344 233.375 cv
100.262 233.465 100.18 233.559 100.102 233.652 cv
100.02 233.746 99.941 233.84 99.863 233.938 cv
99.781 234.031 99.707 234.129 99.629 234.223 cv
99.551 234.32 99.477 234.418 99.398 234.516 cv
99.324 234.613 99.25 234.711 99.176 234.809 cv
99.102 234.906 99.027 235.008 98.953 235.105 cv
98.883 235.207 98.812 235.305 98.738 235.406 cv
98.668 235.508 98.598 235.609 98.531 235.711 cv
98.461 235.812 98.391 235.914 98.324 236.02 cv
98.258 236.121 98.188 236.227 98.125 236.328 cv
98.059 236.434 97.992 236.539 97.926 236.645 cv
97.863 236.75 97.801 236.855 97.738 236.961 cv
97.676 237.066 97.613 237.172 97.551 237.281 cv
97.488 237.387 97.43 237.496 97.371 237.602 cv
97.312 237.711 97.254 237.82 97.195 237.93 cv
97.137 238.039 97.078 238.148 97.023 238.258 cv
96.969 238.367 96.914 238.477 96.859 238.586 cv
96.805 238.699 96.75 238.809 96.699 238.922 cv
96.645 239.031 96.594 239.145 96.543 239.258 cv
96.492 239.371 96.441 239.48 96.395 239.594 cv
96.344 239.707 96.297 239.82 96.25 239.938 cv
96.203 240.051 96.156 240.164 96.109 240.277 cv
96.066 240.395 96.02 240.508 95.977 240.625 cv
95.934 240.738 95.891 240.855 95.848 240.973 cv
95.809 241.086 95.766 241.203 95.727 241.32 cv
95.688 241.438 95.648 241.555 95.609 241.672 cv
95.57 241.789 95.535 241.906 95.5 242.023 cv
95.461 242.141 95.426 242.262 95.391 242.379 cv
95.359 242.496 95.324 242.617 95.293 242.734 cv
95.258 242.852 95.227 242.973 95.195 243.094 cv
95.168 243.211 95.137 243.332 95.109 243.449 cv
95.078 243.57 95.051 243.691 95.023 243.812 cv
94.996 243.934 94.973 244.051 94.945 244.172 cv
94.922 244.293 94.898 244.414 94.875 244.535 cv
94.852 244.656 94.828 244.777 94.809 244.898 cv
94.785 245.02 94.766 245.145 94.746 245.266 cv
94.727 245.387 94.711 245.508 94.691 245.629 cv
94.676 245.754 94.656 245.875 94.645 245.996 cv
94.629 246.121 94.613 246.242 94.598 246.363 cv
94.586 246.488 94.574 246.609 94.562 246.734 cv
94.551 246.855 94.539 246.977 94.531 247.102 cv
94.52 247.223 94.512 247.348 94.504 247.469 cv
94.496 247.594 94.488 247.715 94.484 247.84 cv
94.477 247.961 94.473 248.086 94.469 248.211 cv
94.465 248.332 94.461 248.457 94.461 248.578 cv
94.457 248.703 94.457 248.824 94.457 248.949 cv
94.457 249.074 94.457 249.195 94.461 249.32 cv
94.461 249.441 94.465 249.566 94.469 249.688 cv
94.473 249.812 94.477 249.934 94.484 250.059 cv
94.488 250.18 94.496 250.305 94.504 250.43 cv
94.512 250.551 94.52 250.672 94.531 250.797 cv
94.539 250.918 94.551 251.043 94.562 251.164 cv
94.574 251.289 94.586 251.41 94.598 251.535 cv
94.613 251.656 94.629 251.777 94.645 251.902 cv
94.656 252.023 94.676 252.145 94.691 252.266 cv
94.711 252.391 94.727 252.512 94.746 252.633 cv
94.766 252.754 94.785 252.875 94.809 253 cv
94.828 253.121 94.852 253.242 94.875 253.363 cv
94.898 253.484 94.922 253.605 94.945 253.727 cv
94.973 253.844 94.996 253.965 95.023 254.086 cv
95.051 254.207 95.078 254.328 95.109 254.445 cv
95.137 254.566 95.168 254.688 95.195 254.805 cv
95.227 254.926 95.258 255.043 95.293 255.164 cv
95.324 255.281 95.359 255.402 95.391 255.52 cv
95.426 255.637 95.461 255.758 95.5 255.875 cv
95.535 255.992 95.57 256.109 95.609 256.227 cv
95.648 256.344 95.688 256.461 95.727 256.578 cv
95.766 256.695 95.809 256.812 95.848 256.926 cv
95.891 257.043 95.934 257.16 95.977 257.273 cv
96.02 257.391 96.066 257.504 96.109 257.617 cv
96.156 257.734 96.203 257.848 96.25 257.961 cv
96.297 258.074 96.344 258.188 96.395 258.301 cv
96.441 258.414 96.492 258.527 96.543 258.641 cv
96.594 258.754 96.645 258.863 96.699 258.977 cv
96.75 259.09 96.805 259.199 96.859 259.309 cv
96.914 259.422 96.969 259.531 97.023 259.641 cv
97.078 259.75 97.137 259.859 97.195 259.969 cv
97.254 260.078 97.312 260.188 97.371 260.297 cv
97.43 260.402 97.488 260.512 97.551 260.617 cv
97.613 260.727 97.676 260.832 97.738 260.938 cv
97.801 261.043 97.863 261.148 97.926 261.254 cv
97.992 261.359 98.059 261.465 98.125 261.57 cv
98.188 261.672 98.258 261.777 98.324 261.879 cv
98.391 261.98 98.461 262.086 98.531 262.188 cv
98.598 262.289 98.668 262.391 98.738 262.492 cv
98.812 262.594 98.883 262.691 98.953 262.793 cv
99.027 262.891 99.102 262.992 99.176 263.09 cv
99.25 263.188 99.324 263.285 99.398 263.383 cv
99.477 263.48 99.551 263.578 99.629 263.676 cv
99.707 263.77 99.781 263.867 99.863 263.961 cv
99.941 264.055 100.02 264.152 100.102 264.246 cv
100.18 264.34 100.262 264.43 100.344 264.523 cv
100.422 264.617 100.508 264.707 100.59 264.801 cv
100.672 264.891 100.754 264.98 100.84 265.07 cv
100.926 265.16 101.008 265.25 101.094 265.34 cv
101.18 265.426 101.27 265.516 101.355 265.602 cv
101.441 265.691 101.531 265.777 101.617 265.863 cv
101.707 265.949 101.797 266.031 101.887 266.117 cv
101.977 266.203 102.066 266.285 102.156 266.367 cv
102.25 266.453 102.34 266.535 102.434 266.613 cv
102.527 266.695 102.621 266.777 102.715 266.859 cv
102.809 266.938 102.902 267.016 102.996 267.098 cv
103.09 267.176 103.188 267.254 103.281 267.328 cv
103.379 267.406 103.477 267.484 103.574 267.559 cv
103.672 267.633 103.77 267.707 103.867 267.781 cv
103.965 267.855 104.066 267.93 104.164 268.004 cv
104.266 268.074 104.367 268.148 104.465 268.219 cv
104.566 268.289 104.668 268.359 104.77 268.43 cv
104.871 268.496 104.977 268.566 105.078 268.633 cv
105.18 268.703 105.285 268.77 105.391 268.836 cv
105.492 268.898 105.598 268.965 105.703 269.031 cv
105.809 269.094 105.914 269.156 106.02 269.223 cv
106.125 269.285 106.234 269.344 106.34 269.406 cv
106.445 269.469 106.555 269.527 106.664 269.586 cv
106.77 269.648 106.879 269.707 106.988 269.762 cv
107.098 269.82 107.207 269.879 107.316 269.934 cv
107.426 269.988 107.535 270.043 107.648 270.098 cv
107.758 270.152 107.871 270.207 107.98 270.258 cv
108.094 270.312 108.203 270.363 108.316 270.414 cv
108.43 270.465 108.543 270.516 108.656 270.562 cv
108.77 270.613 108.883 270.66 108.996 270.707 cv
109.109 270.754 109.223 270.801 109.34 270.848 cv
109.453 270.891 109.566 270.938 109.684 270.98 cv
109.801 271.023 109.914 271.066 110.031 271.109 cv
110.148 271.148 110.262 271.191 110.379 271.23 cv
110.496 271.27 110.613 271.309 110.73 271.348 cv
110.848 271.387 110.965 271.422 111.082 271.461 cv
111.203 271.496 111.32 271.531 111.438 271.566 cv
111.555 271.602 111.676 271.633 111.793 271.664 cv
111.914 271.699 112.031 271.73 112.152 271.762 cv
112.27 271.793 112.391 271.82 112.512 271.852 cv
112.629 271.879 112.75 271.906 112.871 271.934 cv
112.992 271.961 113.113 271.984 113.234 272.012 cv
113.352 272.035 113.473 272.059 113.594 272.082 cv
113.715 272.105 113.836 272.129 113.961 272.148 cv
114.082 272.172 114.203 272.191 114.324 272.211 cv
114.445 272.23 114.566 272.25 114.691 272.266 cv
114.812 272.281 114.934 272.301 115.059 272.316 cv
115.18 272.332 115.301 272.344 115.426 272.359 cv
115.547 272.371 115.668 272.383 115.793 272.395 cv
115.914 272.406 116.039 272.418 116.16 272.43 cv
116.285 272.438 116.406 272.445 116.531 272.453 cv
116.652 272.461 116.777 272.469 116.898 272.473 cv
117.023 272.48 117.145 272.484 117.27 272.488 cv
117.391 272.492 117.516 272.496 117.637 272.496 cv
117.762 272.5 117.887 272.5 118.008 272.5 cv
118.133 272.5 118.254 272.5 118.379 272.496 cv
118.5 272.496 118.625 272.492 118.75 272.488 cv
118.871 272.484 118.996 272.48 119.117 272.473 cv
119.242 272.469 119.363 272.461 119.488 272.453 cv
119.609 272.445 119.734 272.438 119.855 272.43 cv
119.98 272.418 120.102 272.406 120.227 272.395 cv
120.348 272.383 120.469 272.371 120.594 272.359 cv
120.715 272.344 120.84 272.332 120.961 272.316 cv
121.082 272.301 121.203 272.281 121.328 272.266 cv
121.449 272.25 121.57 272.23 121.691 272.211 cv
121.816 272.191 121.938 272.172 122.059 272.148 cv
122.18 272.129 122.301 272.105 122.422 272.082 cv
122.543 272.059 122.664 272.035 122.785 272.012 cv
122.906 271.984 123.027 271.961 123.145 271.934 cv
123.266 271.906 123.387 271.879 123.508 271.852 cv
123.625 271.82 123.746 271.793 123.867 271.762 cv
123.984 271.73 124.105 271.699 124.223 271.664 cv
124.344 271.633 124.461 271.602 124.578 271.566 cv
124.699 271.531 124.816 271.496 124.934 271.461 cv
125.051 271.422 125.168 271.387 125.285 271.348 cv
125.402 271.309 125.52 271.27 125.637 271.23 cv
125.754 271.191 125.871 271.148 125.988 271.109 cv
126.102 271.066 126.219 271.023 126.332 270.98 cv
126.449 270.938 126.562 270.891 126.68 270.848 cv
126.793 270.801 126.906 270.754 127.023 270.707 cv
127.137 270.66 127.25 270.613 127.363 270.562 cv
127.477 270.516 127.586 270.465 127.699 270.414 cv
127.812 270.363 127.926 270.312 128.035 270.258 cv
128.148 270.207 128.258 270.152 128.371 270.098 cv
128.48 270.043 128.59 269.988 128.699 269.934 cv
128.809 269.879 128.918 269.82 129.027 269.762 cv
129.137 269.707 129.246 269.648 129.355 269.586 cv
129.461 269.527 129.57 269.469 129.676 269.406 cv
129.785 269.344 129.891 269.285 129.996 269.223 cv
130.102 269.156 130.207 269.094 130.316 269.031 cv
130.418 268.965 130.523 268.898 130.629 268.836 cv
130.734 268.77 130.836 268.703 130.938 268.633 cv
131.043 268.566 131.145 268.496 131.246 268.43 cv
131.348 268.359 131.449 268.289 131.551 268.219 cv
131.652 268.148 131.75 268.074 131.852 268.004 cv
131.953 267.93 132.051 267.855 132.148 267.781 cv
132.246 267.707 132.344 267.633 132.445 267.559 cv
132.539 267.484 132.637 267.406 132.734 267.328 cv
132.832 267.254 132.926 267.176 133.02 267.098 cv
133.117 267.016 133.211 266.938 133.305 266.859 cv
133.398 266.777 133.492 266.695 133.582 266.613 cv
133.676 266.535 133.766 266.453 133.859 266.367 cv
133.949 266.285 134.039 266.203 134.129 266.117 cv
134.219 266.031 134.309 265.949 134.398 265.863 cv
134.488 265.777 134.574 265.691 134.66 265.602 cv
134.75 265.516 134.836 265.426 134.922 265.34 cv
135.008 265.25 135.094 265.16 135.176 265.07 cv
135.262 264.98 135.344 264.891 135.426 264.801 cv
135.512 264.707 135.594 264.617 135.676 264.523 cv
135.758 264.43 135.836 264.34 135.918 264.246 cv
135.996 264.152 136.078 264.055 136.156 263.961 cv
136.234 263.867 136.312 263.77 136.387 263.676 cv
136.465 263.578 136.543 263.48 136.617 263.383 cv
136.695 263.285 136.77 263.188 136.844 263.09 cv
136.918 262.992 136.988 262.891 137.062 262.793 cv
137.133 262.691 137.207 262.594 137.277 262.492 cv
137.348 262.391 137.418 262.289 137.488 262.188 cv
137.555 262.086 137.625 261.98 137.691 261.879 cv
137.762 261.777 137.828 261.672 137.895 261.57 cv
137.961 261.465 138.023 261.359 138.09 261.254 cv
138.152 261.148 138.219 261.043 138.281 260.938 cv
138.344 260.832 138.406 260.727 138.465 260.617 cv
138.527 260.512 138.586 260.402 138.648 260.297 cv
138.707 260.188 138.766 260.078 138.824 259.969 cv
138.879 259.859 138.938 259.75 138.992 259.641 cv
139.047 259.531 139.105 259.422 139.16 259.309 cv
139.211 259.199 139.266 259.09 139.32 258.977 cv
139.371 258.863 139.422 258.754 139.473 258.641 cv
139.523 258.527 139.574 258.414 139.621 258.301 cv
139.672 258.188 139.719 258.074 139.766 257.961 cv
139.816 257.848 139.859 257.734 139.906 257.617 cv
139.953 257.504 139.996 257.391 140.039 257.273 cv
140.082 257.16 140.125 257.043 140.168 256.926 cv
140.211 256.812 140.25 256.695 140.289 256.578 cv
140.332 256.461 140.371 256.344 140.406 256.227 cv
140.445 256.109 140.484 255.992 140.52 255.875 cv
140.555 255.758 140.59 255.637 140.625 255.52 cv
140.66 255.402 140.691 255.281 140.727 255.164 cv
140.758 255.043 140.789 254.926 140.82 254.805 cv
140.852 254.688 140.879 254.566 140.91 254.445 cv
140.938 254.328 140.965 254.207 140.992 254.086 cv
141.02 253.965 141.047 253.844 141.07 253.727 cv
141.094 253.605 141.121 253.484 141.141 253.363 cv
141.164 253.242 141.188 253.121 141.211 253 cv
141.23 252.875 141.25 252.754 141.27 252.633 cv
141.289 252.512 141.309 252.391 141.324 252.266 cv
141.344 252.145 141.359 252.023 141.375 251.902 cv
141.391 251.777 141.406 251.656 141.418 251.535 cv
141.43 251.41 141.445 251.289 141.457 251.164 cv
141.469 251.043 141.477 250.918 141.488 250.797 cv
141.496 250.672 141.504 250.551 141.512 250.43 cv
141.523 250.305 141.527 250.18 141.535 250.059 cv
141.539 249.934 141.543 249.812 141.547 249.688 cv
141.551 249.566 141.555 249.441 141.559 249.32 cv
141.559 249.195 141.559 249.074 141.559 248.949 cv
cp
.957488 .836271 0 0 cmyk
@
141.559 178.293 mo
141.559 178.172 141.559 178.047 141.559 177.926 cv
141.555 177.801 141.551 177.68 141.547 177.555 cv
141.543 177.43 141.539 177.309 141.535 177.184 cv
141.527 177.062 141.523 176.938 141.512 176.816 cv
141.504 176.691 141.496 176.57 141.488 176.445 cv
141.477 176.324 141.469 176.199 141.457 176.078 cv
141.445 175.957 141.43 175.832 141.418 175.711 cv
141.406 175.586 141.391 175.465 141.375 175.344 cv
141.359 175.219 141.344 175.098 141.324 174.977 cv
141.309 174.855 141.289 174.73 141.27 174.609 cv
141.25 174.488 141.23 174.367 141.211 174.246 cv
141.188 174.125 141.164 174.004 141.141 173.883 cv
141.121 173.762 141.094 173.641 141.07 173.52 cv
141.047 173.398 141.02 173.277 140.992 173.156 cv
140.965 173.035 140.938 172.918 140.91 172.797 cv
140.879 172.676 140.852 172.559 140.82 172.438 cv
140.789 172.316 140.758 172.199 140.727 172.078 cv
140.691 171.961 140.66 171.844 140.625 171.723 cv
140.59 171.605 140.555 171.488 140.52 171.371 cv
140.484 171.25 140.445 171.133 140.406 171.016 cv
140.371 170.898 140.332 170.781 140.289 170.664 cv
140.25 170.551 140.211 170.434 140.168 170.316 cv
140.125 170.199 140.082 170.086 140.039 169.969 cv
139.996 169.855 139.953 169.738 139.906 169.625 cv
139.859 169.512 139.816 169.395 139.766 169.281 cv
139.719 169.168 139.672 169.055 139.621 168.941 cv
139.574 168.828 139.523 168.715 139.473 168.602 cv
139.422 168.492 139.371 168.379 139.32 168.266 cv
139.266 168.156 139.211 168.043 139.16 167.934 cv
139.105 167.824 139.047 167.711 138.992 167.602 cv
138.938 167.492 138.879 167.383 138.824 167.273 cv
138.766 167.164 138.707 167.055 138.648 166.949 cv
138.586 166.84 138.527 166.734 138.465 166.625 cv
138.406 166.52 138.344 166.41 138.281 166.305 cv
138.219 166.199 138.152 166.094 138.09 165.988 cv
138.023 165.883 137.961 165.777 137.895 165.676 cv
137.828 165.57 137.762 165.469 137.691 165.363 cv
137.625 165.262 137.555 165.16 137.488 165.055 cv
137.418 164.953 137.348 164.852 137.277 164.754 cv
137.207 164.652 137.133 164.551 137.062 164.453 cv
136.988 164.352 136.918 164.254 136.844 164.152 cv
136.77 164.055 136.695 163.957 136.617 163.859 cv
136.543 163.762 136.465 163.664 136.387 163.57 cv
136.312 163.473 136.234 163.379 136.156 163.281 cv
136.078 163.188 135.996 163.094 135.918 163 cv
135.836 162.906 135.758 162.812 135.676 162.719 cv
135.594 162.629 135.512 162.535 135.426 162.445 cv
135.344 162.352 135.262 162.262 135.176 162.172 cv
135.094 162.082 135.008 161.992 134.922 161.906 cv
134.836 161.816 134.75 161.727 134.66 161.641 cv
134.574 161.555 134.488 161.469 134.398 161.383 cv
134.309 161.297 134.219 161.211 134.129 161.125 cv
134.039 161.043 133.949 160.957 133.859 160.875 cv
133.766 160.793 133.676 160.711 133.582 160.629 cv
133.492 160.547 133.398 160.465 133.305 160.387 cv
133.211 160.305 133.117 160.227 133.02 160.148 cv
132.926 160.07 132.832 159.992 132.734 159.914 cv
132.637 159.836 132.539 159.762 132.445 159.684 cv
132.344 159.609 132.246 159.535 132.148 159.461 cv
132.051 159.387 131.953 159.312 131.852 159.242 cv
131.75 159.168 131.652 159.098 131.551 159.027 cv
131.449 158.953 131.348 158.887 131.246 158.816 cv
131.145 158.746 131.043 158.676 130.938 158.609 cv
130.836 158.543 130.734 158.477 130.629 158.41 cv
130.523 158.344 130.418 158.277 130.316 158.215 cv
130.207 158.148 130.102 158.086 129.996 158.023 cv
129.891 157.961 129.785 157.898 129.676 157.836 cv
129.57 157.777 129.461 157.715 129.355 157.656 cv
129.246 157.598 129.137 157.539 129.027 157.48 cv
128.918 157.422 128.809 157.367 128.699 157.309 cv
128.59 157.254 128.48 157.199 128.371 157.145 cv
128.258 157.09 128.148 157.035 128.035 156.984 cv
127.926 156.934 127.812 156.879 127.699 156.828 cv
127.586 156.777 127.477 156.73 127.363 156.68 cv
127.25 156.633 127.137 156.582 127.023 156.535 cv
126.906 156.488 126.793 156.441 126.68 156.398 cv
126.562 156.352 126.449 156.309 126.332 156.262 cv
126.219 156.219 126.102 156.176 125.988 156.137 cv
125.871 156.094 125.754 156.051 125.637 156.012 cv
125.52 155.973 125.402 155.934 125.285 155.895 cv
125.168 155.859 125.051 155.82 124.934 155.785 cv
124.816 155.746 124.699 155.711 124.578 155.68 cv
124.461 155.645 124.344 155.609 124.223 155.578 cv
124.105 155.547 123.984 155.512 123.867 155.484 cv
123.746 155.453 123.625 155.422 123.508 155.395 cv
123.387 155.363 123.266 155.336 123.145 155.309 cv
123.027 155.285 122.906 155.258 122.785 155.23 cv
122.664 155.207 122.543 155.184 122.422 155.16 cv
122.301 155.137 122.18 155.113 122.059 155.094 cv
121.938 155.074 121.816 155.051 121.691 155.031 cv
121.57 155.012 121.449 154.996 121.328 154.977 cv
121.203 154.961 121.082 154.945 120.961 154.93 cv
120.84 154.914 120.715 154.898 120.594 154.887 cv
120.469 154.871 120.348 154.859 120.227 154.848 cv
120.102 154.836 119.98 154.824 119.855 154.816 cv
119.734 154.805 119.609 154.797 119.488 154.789 cv
119.363 154.781 119.242 154.773 119.117 154.77 cv
118.996 154.762 118.871 154.758 118.75 154.754 cv
118.625 154.75 118.5 154.746 118.379 154.746 cv
118.254 154.742 118.133 154.742 118.008 154.742 cv
117.887 154.742 117.762 154.742 117.637 154.746 cv
117.516 154.746 117.391 154.75 117.27 154.754 cv
117.145 154.758 117.023 154.762 116.898 154.77 cv
116.777 154.773 116.652 154.781 116.531 154.789 cv
116.406 154.797 116.285 154.805 116.16 154.816 cv
116.039 154.824 115.914 154.836 115.793 154.848 cv
115.668 154.859 115.547 154.871 115.426 154.887 cv
115.301 154.898 115.18 154.914 115.059 154.93 cv
114.934 154.945 114.812 154.961 114.691 154.977 cv
114.566 154.996 114.445 155.012 114.324 155.031 cv
114.203 155.051 114.082 155.074 113.961 155.094 cv
113.836 155.113 113.715 155.137 113.594 155.16 cv
113.473 155.184 113.352 155.207 113.234 155.23 cv
113.113 155.258 112.992 155.285 112.871 155.309 cv
112.75 155.336 112.629 155.363 112.512 155.395 cv
112.391 155.422 112.27 155.453 112.152 155.484 cv
112.031 155.512 111.914 155.547 111.793 155.578 cv
111.676 155.609 111.555 155.645 111.438 155.68 cv
111.32 155.711 111.203 155.746 111.082 155.785 cv
110.965 155.82 110.848 155.859 110.73 155.895 cv
110.613 155.934 110.496 155.973 110.379 156.012 cv
110.262 156.051 110.148 156.094 110.031 156.137 cv
109.914 156.176 109.801 156.219 109.684 156.262 cv
109.566 156.309 109.453 156.352 109.34 156.398 cv
109.223 156.441 109.109 156.488 108.996 156.535 cv
108.883 156.582 108.77 156.633 108.656 156.68 cv
108.543 156.73 108.43 156.777 108.316 156.828 cv
108.203 156.879 108.094 156.934 107.98 156.984 cv
107.871 157.035 107.758 157.09 107.648 157.145 cv
107.535 157.199 107.426 157.254 107.316 157.309 cv
107.207 157.367 107.098 157.422 106.988 157.48 cv
106.879 157.539 106.77 157.598 106.664 157.656 cv
106.555 157.715 106.445 157.777 106.34 157.836 cv
106.234 157.898 106.125 157.961 106.02 158.023 cv
105.914 158.086 105.809 158.148 105.703 158.215 cv
105.598 158.277 105.492 158.344 105.391 158.41 cv
105.285 158.477 105.18 158.543 105.078 158.609 cv
104.977 158.676 104.871 158.746 104.77 158.816 cv
104.668 158.887 104.566 158.953 104.465 159.027 cv
104.367 159.098 104.266 159.168 104.164 159.242 cv
104.066 159.312 103.965 159.387 103.867 159.461 cv
103.77 159.535 103.672 159.609 103.574 159.684 cv
103.477 159.762 103.379 159.836 103.281 159.914 cv
103.188 159.992 103.09 160.07 102.996 160.148 cv
102.902 160.227 102.809 160.305 102.715 160.387 cv
102.621 160.465 102.527 160.547 102.434 160.629 cv
102.34 160.711 102.25 160.793 102.156 160.875 cv
102.066 160.957 101.977 161.043 101.887 161.125 cv
101.797 161.211 101.707 161.297 101.617 161.383 cv
101.531 161.469 101.441 161.555 101.355 161.641 cv
101.27 161.727 101.18 161.816 101.094 161.906 cv
101.008 161.992 100.926 162.082 100.84 162.172 cv
100.754 162.262 100.672 162.352 100.59 162.445 cv
100.508 162.535 100.422 162.629 100.344 162.719 cv
100.262 162.812 100.18 162.906 100.102 163 cv
100.02 163.094 99.941 163.188 99.863 163.281 cv
99.781 163.379 99.707 163.473 99.629 163.57 cv
99.551 163.664 99.477 163.762 99.398 163.859 cv
99.324 163.957 99.25 164.055 99.176 164.152 cv
99.102 164.254 99.027 164.352 98.953 164.453 cv
98.883 164.551 98.812 164.652 98.738 164.754 cv
98.668 164.852 98.598 164.953 98.531 165.055 cv
98.461 165.16 98.391 165.262 98.324 165.363 cv
98.258 165.469 98.188 165.57 98.125 165.676 cv
98.059 165.777 97.992 165.883 97.926 165.988 cv
97.863 166.094 97.801 166.199 97.738 166.305 cv
97.676 166.41 97.613 166.52 97.551 166.625 cv
97.488 166.734 97.43 166.84 97.371 166.949 cv
97.312 167.055 97.254 167.164 97.195 167.273 cv
97.137 167.383 97.078 167.492 97.023 167.602 cv
96.969 167.711 96.914 167.824 96.859 167.934 cv
96.805 168.043 96.75 168.156 96.699 168.266 cv
96.645 168.379 96.594 168.492 96.543 168.602 cv
96.492 168.715 96.441 168.828 96.395 168.941 cv
96.344 169.055 96.297 169.168 96.25 169.281 cv
96.203 169.395 96.156 169.512 96.109 169.625 cv
96.066 169.738 96.02 169.855 95.977 169.969 cv
95.934 170.086 95.891 170.199 95.848 170.316 cv
95.809 170.434 95.766 170.551 95.727 170.664 cv
95.688 170.781 95.648 170.898 95.609 171.016 cv
95.57 171.133 95.535 171.25 95.5 171.371 cv
95.461 171.488 95.426 171.605 95.391 171.723 cv
95.359 171.844 95.324 171.961 95.293 172.078 cv
95.258 172.199 95.227 172.316 95.195 172.438 cv
95.168 172.559 95.137 172.676 95.109 172.797 cv
95.078 172.918 95.051 173.035 95.023 173.156 cv
94.996 173.277 94.973 173.398 94.945 173.52 cv
94.922 173.641 94.898 173.762 94.875 173.883 cv
94.852 174.004 94.828 174.125 94.809 174.246 cv
94.785 174.367 94.766 174.488 94.746 174.609 cv
94.727 174.73 94.711 174.855 94.691 174.977 cv
94.676 175.098 94.656 175.219 94.645 175.344 cv
94.629 175.465 94.613 175.586 94.598 175.711 cv
94.586 175.832 94.574 175.957 94.562 176.078 cv
94.551 176.199 94.539 176.324 94.531 176.445 cv
94.52 176.57 94.512 176.691 94.504 176.816 cv
94.496 176.938 94.488 177.062 94.484 177.184 cv
94.477 177.309 94.473 177.43 94.469 177.555 cv
94.465 177.68 94.461 177.801 94.461 177.926 cv
94.457 178.047 94.457 178.172 94.457 178.293 cv
94.457 178.418 94.457 178.543 94.461 178.664 cv
94.461 178.789 94.465 178.91 94.469 179.035 cv
94.473 179.156 94.477 179.281 94.484 179.402 cv
94.488 179.527 94.496 179.648 94.504 179.773 cv
94.512 179.895 94.52 180.02 94.531 180.141 cv
94.539 180.266 94.551 180.387 94.562 180.512 cv
94.574 180.633 94.586 180.758 94.598 180.879 cv
94.613 181 94.629 181.125 94.645 181.246 cv
94.656 181.367 94.676 181.492 94.691 181.613 cv
94.711 181.734 94.727 181.855 94.746 181.98 cv
94.766 182.102 94.785 182.223 94.809 182.344 cv
94.828 182.465 94.852 182.586 94.875 182.707 cv
94.898 182.828 94.922 182.949 94.945 183.07 cv
94.973 183.191 94.996 183.312 95.023 183.434 cv
95.051 183.551 95.078 183.672 95.109 183.793 cv
95.137 183.914 95.168 184.031 95.195 184.152 cv
95.227 184.27 95.258 184.391 95.293 184.508 cv
95.324 184.629 95.359 184.746 95.391 184.863 cv
95.426 184.984 95.461 185.102 95.5 185.219 cv
95.535 185.336 95.57 185.453 95.609 185.574 cv
95.648 185.691 95.688 185.805 95.727 185.922 cv
95.766 186.039 95.809 186.156 95.848 186.273 cv
95.891 186.387 95.934 186.504 95.977 186.621 cv
96.02 186.734 96.066 186.852 96.109 186.965 cv
96.156 187.078 96.203 187.191 96.25 187.309 cv
96.297 187.422 96.344 187.535 96.395 187.648 cv
96.441 187.762 96.492 187.875 96.543 187.984 cv
96.594 188.098 96.645 188.211 96.699 188.32 cv
96.75 188.434 96.805 188.543 96.859 188.656 cv
96.914 188.766 96.969 188.875 97.023 188.988 cv
97.078 189.098 97.137 189.207 97.195 189.316 cv
97.254 189.426 97.312 189.531 97.371 189.641 cv
97.43 189.75 97.488 189.855 97.551 189.965 cv
97.613 190.07 97.676 190.176 97.738 190.281 cv
97.801 190.391 97.863 190.496 97.926 190.602 cv
97.992 190.707 98.059 190.809 98.125 190.914 cv
98.188 191.02 98.258 191.121 98.324 191.227 cv
98.391 191.328 98.461 191.43 98.531 191.531 cv
98.598 191.633 98.668 191.734 98.738 191.836 cv
98.812 191.938 98.883 192.039 98.953 192.137 cv
99.027 192.238 99.102 192.336 99.176 192.434 cv
99.25 192.535 99.324 192.633 99.398 192.73 cv
99.477 192.828 99.551 192.922 99.629 193.02 cv
99.707 193.117 99.781 193.211 99.863 193.309 cv
99.941 193.402 100.02 193.496 100.102 193.59 cv
100.18 193.684 100.262 193.777 100.344 193.871 cv
100.422 193.961 100.508 194.055 100.59 194.145 cv
100.672 194.234 100.754 194.328 100.84 194.418 cv
100.926 194.508 101.008 194.598 101.094 194.684 cv
101.18 194.773 101.27 194.859 101.355 194.949 cv
101.441 195.035 101.531 195.121 101.617 195.207 cv
101.707 195.293 101.797 195.379 101.887 195.461 cv
101.977 195.547 102.066 195.633 102.156 195.715 cv
102.25 195.797 102.34 195.879 102.434 195.961 cv
102.527 196.043 102.621 196.125 102.715 196.203 cv
102.809 196.285 102.902 196.363 102.996 196.441 cv
103.09 196.52 103.188 196.598 103.281 196.676 cv
103.379 196.75 103.477 196.828 103.574 196.902 cv
103.672 196.98 103.77 197.055 103.867 197.129 cv
103.965 197.203 104.066 197.277 104.164 197.348 cv
104.266 197.422 104.367 197.492 104.465 197.562 cv
104.566 197.633 104.668 197.703 104.77 197.773 cv
104.871 197.844 104.977 197.91 105.078 197.98 cv
105.18 198.047 105.285 198.113 105.391 198.18 cv
105.492 198.246 105.598 198.312 105.703 198.375 cv
105.809 198.441 105.914 198.504 106.02 198.566 cv
106.125 198.629 106.234 198.691 106.34 198.754 cv
106.445 198.812 106.555 198.875 106.664 198.934 cv
106.77 198.992 106.879 199.051 106.988 199.109 cv
107.098 199.168 107.207 199.223 107.316 199.277 cv
107.426 199.336 107.535 199.391 107.648 199.445 cv
107.758 199.5 107.871 199.551 107.98 199.605 cv
108.094 199.656 108.203 199.707 108.316 199.758 cv
108.43 199.809 108.543 199.859 108.656 199.91 cv
108.77 199.957 108.883 200.008 108.996 200.055 cv
109.109 200.102 109.223 200.148 109.34 200.191 cv
109.453 200.238 109.566 200.281 109.684 200.324 cv
109.801 200.371 109.914 200.41 110.031 200.453 cv
110.148 200.496 110.262 200.535 110.379 200.578 cv
110.496 200.617 110.613 200.656 110.73 200.691 cv
110.848 200.73 110.965 200.77 111.082 200.805 cv
111.203 200.84 111.32 200.875 111.438 200.91 cv
111.555 200.945 111.676 200.98 111.793 201.012 cv
111.914 201.043 112.031 201.074 112.152 201.105 cv
112.27 201.137 112.391 201.168 112.512 201.195 cv
112.629 201.223 112.75 201.25 112.871 201.277 cv
112.992 201.305 113.113 201.332 113.234 201.355 cv
113.352 201.383 113.473 201.406 113.594 201.43 cv
113.715 201.453 113.836 201.473 113.961 201.496 cv
114.082 201.516 114.203 201.535 114.324 201.555 cv
114.445 201.574 114.566 201.594 114.691 201.609 cv
114.812 201.629 114.934 201.645 115.059 201.66 cv
115.18 201.676 115.301 201.691 115.426 201.703 cv
115.547 201.719 115.668 201.73 115.793 201.742 cv
115.914 201.754 116.039 201.766 116.16 201.773 cv
116.285 201.781 116.406 201.793 116.531 201.801 cv
116.652 201.809 116.777 201.812 116.898 201.82 cv
117.023 201.824 117.145 201.832 117.27 201.836 cv
117.391 201.84 117.516 201.84 117.637 201.844 cv
117.762 201.844 117.887 201.848 118.008 201.848 cv
118.133 201.848 118.254 201.844 118.379 201.844 cv
118.5 201.84 118.625 201.84 118.75 201.836 cv
118.871 201.832 118.996 201.824 119.117 201.82 cv
119.242 201.812 119.363 201.809 119.488 201.801 cv
119.609 201.793 119.734 201.781 119.855 201.773 cv
119.98 201.766 120.102 201.754 120.227 201.742 cv
120.348 201.73 120.469 201.719 120.594 201.703 cv
120.715 201.691 120.84 201.676 120.961 201.66 cv
121.082 201.645 121.203 201.629 121.328 201.609 cv
121.449 201.594 121.57 201.574 121.691 201.555 cv
121.816 201.535 121.938 201.516 122.059 201.496 cv
122.18 201.473 122.301 201.453 122.422 201.43 cv
122.543 201.406 122.664 201.383 122.785 201.355 cv
122.906 201.332 123.027 201.305 123.145 201.277 cv
123.266 201.25 123.387 201.223 123.508 201.195 cv
123.625 201.168 123.746 201.137 123.867 201.105 cv
123.984 201.074 124.105 201.043 124.223 201.012 cv
124.344 200.98 124.461 200.945 124.578 200.91 cv
124.699 200.875 124.816 200.84 124.934 200.805 cv
125.051 200.77 125.168 200.73 125.285 200.691 cv
125.402 200.656 125.52 200.617 125.637 200.578 cv
125.754 200.535 125.871 200.496 125.988 200.453 cv
126.102 200.41 126.219 200.371 126.332 200.324 cv
126.449 200.281 126.562 200.238 126.68 200.191 cv
126.793 200.148 126.906 200.102 127.023 200.055 cv
127.137 200.008 127.25 199.957 127.363 199.91 cv
127.477 199.859 127.586 199.809 127.699 199.758 cv
127.812 199.707 127.926 199.656 128.035 199.605 cv
128.148 199.551 128.258 199.5 128.371 199.445 cv
128.48 199.391 128.59 199.336 128.699 199.277 cv
128.809 199.223 128.918 199.168 129.027 199.109 cv
129.137 199.051 129.246 198.992 129.355 198.934 cv
129.461 198.875 129.57 198.812 129.676 198.754 cv
129.785 198.691 129.891 198.629 129.996 198.566 cv
130.102 198.504 130.207 198.441 130.316 198.375 cv
130.418 198.312 130.523 198.246 130.629 198.18 cv
130.734 198.113 130.836 198.047 130.938 197.98 cv
131.043 197.91 131.145 197.844 131.246 197.773 cv
131.348 197.703 131.449 197.633 131.551 197.562 cv
131.652 197.492 131.75 197.422 131.852 197.348 cv
131.953 197.277 132.051 197.203 132.148 197.129 cv
132.246 197.055 132.344 196.98 132.445 196.902 cv
132.539 196.828 132.637 196.75 132.734 196.676 cv
132.832 196.598 132.926 196.52 133.02 196.441 cv
133.117 196.363 133.211 196.285 133.305 196.203 cv
133.398 196.125 133.492 196.043 133.582 195.961 cv
133.676 195.879 133.766 195.797 133.859 195.715 cv
133.949 195.633 134.039 195.547 134.129 195.461 cv
134.219 195.379 134.309 195.293 134.398 195.207 cv
134.488 195.121 134.574 195.035 134.66 194.949 cv
134.75 194.859 134.836 194.773 134.922 194.684 cv
135.008 194.598 135.094 194.508 135.176 194.418 cv
135.262 194.328 135.344 194.234 135.426 194.145 cv
135.512 194.055 135.594 193.961 135.676 193.871 cv
135.758 193.777 135.836 193.684 135.918 193.59 cv
135.996 193.496 136.078 193.402 136.156 193.309 cv
136.234 193.211 136.312 193.117 136.387 193.02 cv
136.465 192.922 136.543 192.828 136.617 192.73 cv
136.695 192.633 136.77 192.535 136.844 192.434 cv
136.918 192.336 136.988 192.238 137.062 192.137 cv
137.133 192.039 137.207 191.938 137.277 191.836 cv
137.348 191.734 137.418 191.633 137.488 191.531 cv
137.555 191.43 137.625 191.328 137.691 191.227 cv
137.762 191.121 137.828 191.02 137.895 190.914 cv
137.961 190.809 138.023 190.707 138.09 190.602 cv
138.152 190.496 138.219 190.391 138.281 190.281 cv
138.344 190.176 138.406 190.07 138.465 189.965 cv
138.527 189.855 138.586 189.75 138.648 189.641 cv
138.707 189.531 138.766 189.426 138.824 189.316 cv
138.879 189.207 138.938 189.098 138.992 188.988 cv
139.047 188.875 139.105 188.766 139.16 188.656 cv
139.211 188.543 139.266 188.434 139.32 188.32 cv
139.371 188.211 139.422 188.098 139.473 187.984 cv
139.523 187.875 139.574 187.762 139.621 187.648 cv
139.672 187.535 139.719 187.422 139.766 187.309 cv
139.816 187.191 139.859 187.078 139.906 186.965 cv
139.953 186.852 139.996 186.734 140.039 186.621 cv
140.082 186.504 140.125 186.387 140.168 186.273 cv
140.211 186.156 140.25 186.039 140.289 185.922 cv
140.332 185.805 140.371 185.691 140.406 185.574 cv
140.445 185.453 140.484 185.336 140.52 185.219 cv
140.555 185.102 140.59 184.984 140.625 184.863 cv
140.66 184.746 140.691 184.629 140.727 184.508 cv
140.758 184.391 140.789 184.27 140.82 184.152 cv
140.852 184.031 140.879 183.914 140.91 183.793 cv
140.938 183.672 140.965 183.551 140.992 183.434 cv
141.02 183.312 141.047 183.191 141.07 183.07 cv
141.094 182.949 141.121 182.828 141.141 182.707 cv
141.164 182.586 141.188 182.465 141.211 182.344 cv
141.23 182.223 141.25 182.102 141.27 181.98 cv
141.289 181.855 141.309 181.734 141.324 181.613 cv
141.344 181.492 141.359 181.367 141.375 181.246 cv
141.391 181.125 141.406 181 141.418 180.879 cv
141.43 180.758 141.445 180.633 141.457 180.512 cv
141.469 180.387 141.477 180.266 141.488 180.141 cv
141.496 180.02 141.504 179.895 141.512 179.773 cv
141.523 179.648 141.527 179.527 141.535 179.402 cv
141.539 179.281 141.543 179.156 141.547 179.035 cv
141.551 178.91 141.555 178.789 141.559 178.664 cv
141.559 178.543 141.559 178.418 141.559 178.293 cv
cp
@
141.559 107.641 mo
141.559 107.516 141.559 107.395 141.559 107.27 cv
141.555 107.148 141.551 107.023 141.547 106.902 cv
141.543 106.777 141.539 106.652 141.535 106.531 cv
141.527 106.406 141.523 106.285 141.512 106.16 cv
141.504 106.039 141.496 105.914 141.488 105.793 cv
141.477 105.668 141.469 105.547 141.457 105.422 cv
141.445 105.301 141.43 105.176 141.418 105.055 cv
141.406 104.934 141.391 104.812 141.375 104.688 cv
141.359 104.566 141.344 104.445 141.324 104.32 cv
141.309 104.199 141.289 104.078 141.27 103.957 cv
141.25 103.832 141.23 103.711 141.211 103.59 cv
141.188 103.469 141.164 103.348 141.141 103.227 cv
141.121 103.105 141.094 102.984 141.07 102.863 cv
141.047 102.742 141.02 102.621 140.992 102.504 cv
140.965 102.383 140.938 102.262 140.91 102.141 cv
140.879 102.023 140.852 101.902 140.82 101.781 cv
140.789 101.664 140.758 101.543 140.727 101.426 cv
140.691 101.309 140.66 101.188 140.625 101.07 cv
140.59 100.949 140.555 100.832 140.52 100.715 cv
140.484 100.598 140.445 100.48 140.406 100.363 cv
140.371 100.246 140.332 100.129 140.289 100.012 cv
140.25 99.895 140.211 99.777 140.168 99.66 cv
140.125 99.547 140.082 99.43 140.039 99.316 cv
139.996 99.199 139.953 99.086 139.906 98.969 cv
139.859 98.855 139.816 98.742 139.766 98.629 cv
139.719 98.516 139.672 98.398 139.621 98.285 cv
139.574 98.172 139.523 98.062 139.473 97.949 cv
139.422 97.836 139.371 97.723 139.32 97.613 cv
139.266 97.5 139.211 97.391 139.16 97.277 cv
139.105 97.168 139.047 97.059 138.992 96.949 cv
138.938 96.836 138.879 96.73 138.824 96.621 cv
138.766 96.512 138.707 96.402 138.648 96.293 cv
138.586 96.188 138.527 96.078 138.465 95.973 cv
138.406 95.863 138.344 95.758 138.281 95.652 cv
138.219 95.543 138.152 95.441 138.09 95.336 cv
138.023 95.23 137.961 95.125 137.895 95.02 cv
137.828 94.918 137.762 94.812 137.691 94.711 cv
137.625 94.605 137.555 94.504 137.488 94.402 cv
137.418 94.301 137.348 94.199 137.277 94.098 cv
137.207 93.996 137.133 93.898 137.062 93.797 cv
136.988 93.695 136.918 93.598 136.844 93.5 cv
136.77 93.402 136.695 93.301 136.617 93.203 cv
136.543 93.109 136.465 93.012 136.387 92.914 cv
136.312 92.82 136.234 92.723 136.156 92.629 cv
136.078 92.531 135.996 92.438 135.918 92.344 cv
135.836 92.25 135.758 92.156 135.676 92.066 cv
135.594 91.973 135.512 91.879 135.426 91.789 cv
135.344 91.699 135.262 91.609 135.176 91.52 cv
135.094 91.426 135.008 91.34 134.922 91.25 cv
134.836 91.16 134.75 91.074 134.66 90.988 cv
134.574 90.898 134.488 90.812 134.398 90.727 cv
134.309 90.641 134.219 90.555 134.129 90.473 cv
134.039 90.387 133.949 90.305 133.859 90.223 cv
133.766 90.137 133.676 90.055 133.582 89.973 cv
133.492 89.891 133.398 89.812 133.305 89.73 cv
133.211 89.652 133.117 89.57 133.02 89.492 cv
132.926 89.414 132.832 89.336 132.734 89.258 cv
132.637 89.184 132.539 89.105 132.445 89.031 cv
132.344 88.953 132.246 88.879 132.148 88.809 cv
132.051 88.73 131.953 88.66 131.852 88.586 cv
131.75 88.516 131.652 88.441 131.551 88.371 cv
131.449 88.301 131.348 88.23 131.246 88.16 cv
131.145 88.09 131.043 88.023 130.938 87.957 cv
130.836 87.887 130.734 87.82 130.629 87.754 cv
130.523 87.688 130.418 87.625 130.316 87.559 cv
130.207 87.496 130.102 87.43 129.996 87.367 cv
129.891 87.305 129.785 87.242 129.676 87.184 cv
129.57 87.121 129.461 87.062 129.355 87 cv
129.246 86.941 129.137 86.883 129.027 86.824 cv
128.918 86.77 128.809 86.711 128.699 86.656 cv
128.59 86.602 128.48 86.543 128.371 86.488 cv
128.258 86.438 128.148 86.383 128.035 86.328 cv
127.926 86.277 127.812 86.227 127.699 86.176 cv
127.586 86.125 127.477 86.074 127.363 86.027 cv
127.25 85.977 127.137 85.93 127.023 85.883 cv
126.906 85.832 126.793 85.789 126.68 85.742 cv
126.562 85.695 126.449 85.652 126.332 85.609 cv
126.219 85.566 126.102 85.523 125.988 85.48 cv
125.871 85.438 125.754 85.398 125.637 85.359 cv
125.52 85.32 125.402 85.281 125.285 85.242 cv
125.168 85.203 125.051 85.164 124.934 85.129 cv
124.816 85.094 124.699 85.059 124.578 85.023 cv
124.461 84.988 124.344 84.957 124.223 84.922 cv
124.105 84.891 123.984 84.859 123.867 84.828 cv
123.746 84.797 123.625 84.77 123.508 84.738 cv
123.387 84.711 123.266 84.684 123.145 84.656 cv
123.027 84.629 122.906 84.602 122.785 84.578 cv
122.664 84.551 122.543 84.527 122.422 84.504 cv
122.301 84.484 122.18 84.461 122.059 84.438 cv
121.938 84.418 121.816 84.398 121.691 84.379 cv
121.57 84.359 121.449 84.34 121.328 84.324 cv
121.203 84.305 121.082 84.289 120.961 84.273 cv
120.84 84.258 120.715 84.246 120.594 84.23 cv
120.469 84.215 120.348 84.203 120.227 84.191 cv
120.102 84.184 119.98 84.172 119.855 84.16 cv
119.734 84.152 119.609 84.145 119.488 84.133 cv
119.363 84.129 119.242 84.121 119.117 84.113 cv
118.996 84.109 118.871 84.105 118.75 84.102 cv
118.625 84.098 118.5 84.094 118.379 84.09 cv
118.254 84.09 118.133 84.09 118.008 84.09 cv
117.887 84.09 117.762 84.09 117.637 84.09 cv
117.516 84.094 117.391 84.098 117.27 84.102 cv
117.145 84.105 117.023 84.109 116.898 84.113 cv
116.777 84.121 116.652 84.129 116.531 84.133 cv
116.406 84.145 116.285 84.152 116.16 84.16 cv
116.039 84.172 115.914 84.184 115.793 84.191 cv
115.668 84.203 115.547 84.215 115.426 84.23 cv
115.301 84.246 115.18 84.258 115.059 84.273 cv
114.934 84.289 114.812 84.305 114.691 84.324 cv
114.566 84.34 114.445 84.359 114.324 84.379 cv
114.203 84.398 114.082 84.418 113.961 84.438 cv
113.836 84.461 113.715 84.484 113.594 84.504 cv
113.473 84.527 113.352 84.551 113.234 84.578 cv
113.113 84.602 112.992 84.629 112.871 84.656 cv
112.75 84.684 112.629 84.711 112.512 84.738 cv
112.391 84.77 112.27 84.797 112.152 84.828 cv
112.031 84.859 111.914 84.891 111.793 84.922 cv
111.676 84.957 111.555 84.988 111.438 85.023 cv
111.32 85.059 111.203 85.094 111.082 85.129 cv
110.965 85.164 110.848 85.203 110.73 85.242 cv
110.613 85.281 110.496 85.32 110.379 85.359 cv
110.262 85.398 110.148 85.438 110.031 85.48 cv
109.914 85.523 109.801 85.566 109.684 85.609 cv
109.566 85.652 109.453 85.695 109.34 85.742 cv
109.223 85.789 109.109 85.832 108.996 85.883 cv
108.883 85.93 108.77 85.977 108.656 86.027 cv
108.543 86.074 108.43 86.125 108.316 86.176 cv
108.203 86.227 108.094 86.277 107.98 86.328 cv
107.871 86.383 107.758 86.438 107.648 86.488 cv
107.535 86.543 107.426 86.602 107.316 86.656 cv
107.207 86.711 107.098 86.77 106.988 86.824 cv
106.879 86.883 106.77 86.941 106.664 87 cv
106.555 87.062 106.445 87.121 106.34 87.184 cv
106.234 87.242 106.125 87.305 106.02 87.367 cv
105.914 87.43 105.809 87.496 105.703 87.559 cv
105.598 87.625 105.492 87.688 105.391 87.754 cv
105.285 87.82 105.18 87.887 105.078 87.957 cv
104.977 88.023 104.871 88.09 104.77 88.16 cv
104.668 88.23 104.566 88.301 104.465 88.371 cv
104.367 88.441 104.266 88.516 104.164 88.586 cv
104.066 88.66 103.965 88.73 103.867 88.809 cv
103.77 88.879 103.672 88.953 103.574 89.031 cv
103.477 89.105 103.379 89.184 103.281 89.258 cv
103.188 89.336 103.09 89.414 102.996 89.492 cv
102.902 89.57 102.809 89.652 102.715 89.73 cv
102.621 89.812 102.527 89.891 102.434 89.973 cv
102.34 90.055 102.25 90.137 102.156 90.223 cv
102.066 90.305 101.977 90.387 101.887 90.473 cv
101.797 90.555 101.707 90.641 101.617 90.727 cv
101.531 90.812 101.441 90.898 101.355 90.988 cv
101.27 91.074 101.18 91.16 101.094 91.25 cv
101.008 91.34 100.926 91.426 100.84 91.52 cv
100.754 91.609 100.672 91.699 100.59 91.789 cv
100.508 91.879 100.422 91.973 100.344 92.066 cv
100.262 92.156 100.18 92.25 100.102 92.344 cv
100.02 92.438 99.941 92.531 99.863 92.629 cv
99.781 92.723 99.707 92.82 99.629 92.914 cv
99.551 93.012 99.477 93.109 99.398 93.203 cv
99.324 93.301 99.25 93.402 99.176 93.5 cv
99.102 93.598 99.027 93.695 98.953 93.797 cv
98.883 93.898 98.812 93.996 98.738 94.098 cv
98.668 94.199 98.598 94.301 98.531 94.402 cv
98.461 94.504 98.391 94.605 98.324 94.711 cv
98.258 94.812 98.188 94.918 98.125 95.02 cv
98.059 95.125 97.992 95.23 97.926 95.336 cv
97.863 95.441 97.801 95.543 97.738 95.652 cv
97.676 95.758 97.613 95.863 97.551 95.973 cv
97.488 96.078 97.43 96.188 97.371 96.293 cv
97.312 96.402 97.254 96.512 97.195 96.621 cv
97.137 96.73 97.078 96.836 97.023 96.949 cv
96.969 97.059 96.914 97.168 96.859 97.277 cv
96.805 97.391 96.75 97.5 96.699 97.613 cv
96.645 97.723 96.594 97.836 96.543 97.949 cv
96.492 98.062 96.441 98.172 96.395 98.285 cv
96.344 98.398 96.297 98.516 96.25 98.629 cv
96.203 98.742 96.156 98.855 96.109 98.969 cv
96.066 99.086 96.02 99.199 95.977 99.316 cv
95.934 99.43 95.891 99.547 95.848 99.66 cv
95.809 99.777 95.766 99.895 95.727 100.012 cv
95.688 100.129 95.648 100.246 95.609 100.363 cv
95.57 100.48 95.535 100.598 95.5 100.715 cv
95.461 100.832 95.426 100.949 95.391 101.07 cv
95.359 101.188 95.324 101.309 95.293 101.426 cv
95.258 101.543 95.227 101.664 95.195 101.781 cv
95.168 101.902 95.137 102.023 95.109 102.141 cv
95.078 102.262 95.051 102.383 95.023 102.504 cv
94.996 102.621 94.973 102.742 94.945 102.863 cv
94.922 102.984 94.898 103.105 94.875 103.227 cv
94.852 103.348 94.828 103.469 94.809 103.59 cv
94.785 103.711 94.766 103.832 94.746 103.957 cv
94.727 104.078 94.711 104.199 94.691 104.32 cv
94.676 104.445 94.656 104.566 94.645 104.688 cv
94.629 104.812 94.613 104.934 94.598 105.055 cv
94.586 105.176 94.574 105.301 94.562 105.422 cv
94.551 105.547 94.539 105.668 94.531 105.793 cv
94.52 105.914 94.512 106.039 94.504 106.16 cv
94.496 106.285 94.488 106.406 94.484 106.531 cv
94.477 106.652 94.473 106.777 94.469 106.902 cv
94.465 107.023 94.461 107.148 94.461 107.27 cv
94.457 107.395 94.457 107.516 94.457 107.641 cv
94.457 107.766 94.457 107.887 94.461 108.008 cv
94.461 108.133 94.465 108.258 94.469 108.379 cv
94.473 108.504 94.477 108.625 94.484 108.75 cv
94.488 108.871 94.496 108.996 94.504 109.117 cv
94.512 109.242 94.52 109.363 94.531 109.488 cv
94.539 109.609 94.551 109.734 94.562 109.855 cv
94.574 109.98 94.586 110.102 94.598 110.227 cv
94.613 110.348 94.629 110.469 94.645 110.59 cv
94.656 110.715 94.676 110.836 94.691 110.957 cv
94.711 111.082 94.727 111.203 94.746 111.324 cv
94.766 111.445 94.785 111.566 94.809 111.688 cv
94.828 111.812 94.852 111.934 94.875 112.051 cv
94.898 112.176 94.922 112.293 94.945 112.414 cv
94.973 112.535 94.996 112.656 95.023 112.777 cv
95.051 112.898 95.078 113.02 95.109 113.137 cv
95.137 113.258 95.168 113.379 95.195 113.496 cv
95.227 113.617 95.258 113.734 95.293 113.855 cv
95.324 113.973 95.359 114.094 95.391 114.211 cv
95.426 114.328 95.461 114.445 95.5 114.566 cv
95.535 114.684 95.57 114.801 95.609 114.918 cv
95.648 115.035 95.688 115.152 95.727 115.27 cv
95.766 115.387 95.809 115.5 95.848 115.617 cv
95.891 115.734 95.934 115.848 95.977 115.965 cv
96.02 116.082 96.066 116.195 96.109 116.309 cv
96.156 116.426 96.203 116.539 96.25 116.652 cv
96.297 116.766 96.344 116.879 96.395 116.992 cv
96.441 117.105 96.492 117.219 96.543 117.332 cv
96.594 117.445 96.645 117.555 96.699 117.668 cv
96.75 117.781 96.805 117.891 96.859 118 cv
96.914 118.113 96.969 118.223 97.023 118.332 cv
97.078 118.441 97.137 118.551 97.195 118.66 cv
97.254 118.77 97.312 118.879 97.371 118.984 cv
97.43 119.094 97.488 119.203 97.551 119.309 cv
97.613 119.414 97.676 119.523 97.738 119.629 cv
97.801 119.734 97.863 119.84 97.926 119.945 cv
97.992 120.051 98.059 120.156 98.125 120.258 cv
98.188 120.363 98.258 120.469 98.324 120.57 cv
98.391 120.672 98.461 120.777 98.531 120.879 cv
98.598 120.98 98.668 121.082 98.738 121.184 cv
98.812 121.281 98.883 121.383 98.953 121.484 cv
99.027 121.582 99.102 121.684 99.176 121.781 cv
99.25 121.879 99.324 121.977 99.398 122.074 cv
99.477 122.172 99.551 122.27 99.629 122.367 cv
99.707 122.461 99.781 122.559 99.863 122.652 cv
99.941 122.746 100.02 122.84 100.102 122.934 cv
100.18 123.027 100.262 123.121 100.344 123.215 cv
100.422 123.309 100.508 123.398 100.59 123.492 cv
100.672 123.582 100.754 123.672 100.84 123.762 cv
100.926 123.852 101.008 123.941 101.094 124.031 cv
101.18 124.117 101.27 124.207 101.355 124.293 cv
101.441 124.379 101.531 124.469 101.617 124.555 cv
101.707 124.641 101.797 124.723 101.887 124.809 cv
101.977 124.895 102.066 124.977 102.156 125.059 cv
102.25 125.141 102.34 125.227 102.434 125.305 cv
102.527 125.387 102.621 125.469 102.715 125.547 cv
102.809 125.629 102.902 125.707 102.996 125.785 cv
103.09 125.867 103.188 125.941 103.281 126.02 cv
103.379 126.098 103.477 126.172 103.574 126.25 cv
103.672 126.324 103.77 126.398 103.867 126.473 cv
103.965 126.547 104.066 126.621 104.164 126.695 cv
104.266 126.766 104.367 126.836 104.465 126.91 cv
104.566 126.98 104.668 127.051 104.77 127.117 cv
104.871 127.188 104.977 127.258 105.078 127.324 cv
105.18 127.391 105.285 127.461 105.391 127.523 cv
105.492 127.59 105.598 127.656 105.703 127.723 cv
105.809 127.785 105.914 127.848 106.02 127.91 cv
106.125 127.973 106.234 128.035 106.34 128.098 cv
106.445 128.16 106.555 128.219 106.664 128.277 cv
106.77 128.336 106.879 128.395 106.988 128.453 cv
107.098 128.512 107.207 128.57 107.316 128.625 cv
107.426 128.68 107.535 128.734 107.648 128.789 cv
107.758 128.844 107.871 128.898 107.98 128.949 cv
108.094 129.004 108.203 129.055 108.316 129.105 cv
108.43 129.156 108.543 129.207 108.656 129.254 cv
108.77 129.305 108.883 129.352 108.996 129.398 cv
109.109 129.445 109.223 129.492 109.34 129.539 cv
109.453 129.582 109.566 129.629 109.684 129.672 cv
109.801 129.715 109.914 129.758 110.031 129.801 cv
110.148 129.84 110.262 129.883 110.379 129.922 cv
110.496 129.961 110.613 130 110.73 130.039 cv
110.848 130.078 110.965 130.113 111.082 130.148 cv
111.203 130.188 111.32 130.223 111.438 130.258 cv
111.555 130.289 111.676 130.324 111.793 130.355 cv
111.914 130.391 112.031 130.422 112.152 130.453 cv
112.27 130.48 112.391 130.512 112.512 130.539 cv
112.629 130.57 112.75 130.598 112.871 130.625 cv
112.992 130.652 113.113 130.676 113.234 130.703 cv
113.352 130.727 113.473 130.75 113.594 130.773 cv
113.715 130.797 113.836 130.82 113.961 130.84 cv
114.082 130.863 114.203 130.883 114.324 130.902 cv
114.445 130.922 114.566 130.938 114.691 130.957 cv
114.812 130.973 114.934 130.992 115.059 131.004 cv
115.18 131.02 115.301 131.035 115.426 131.051 cv
115.547 131.062 115.668 131.074 115.793 131.086 cv
115.914 131.098 116.039 131.109 116.16 131.117 cv
116.285 131.129 116.406 131.137 116.531 131.145 cv
116.652 131.152 116.777 131.16 116.898 131.164 cv
117.023 131.172 117.145 131.176 117.27 131.18 cv
117.391 131.184 117.516 131.188 117.637 131.188 cv
117.762 131.191 117.887 131.191 118.008 131.191 cv
118.133 131.191 118.254 131.191 118.379 131.188 cv
118.5 131.188 118.625 131.184 118.75 131.18 cv
118.871 131.176 118.996 131.172 119.117 131.164 cv
119.242 131.16 119.363 131.152 119.488 131.145 cv
119.609 131.137 119.734 131.129 119.855 131.117 cv
119.98 131.109 120.102 131.098 120.227 131.086 cv
120.348 131.074 120.469 131.062 120.594 131.051 cv
120.715 131.035 120.84 131.02 120.961 131.004 cv
121.082 130.992 121.203 130.973 121.328 130.957 cv
121.449 130.938 121.57 130.922 121.691 130.902 cv
121.816 130.883 121.938 130.863 122.059 130.84 cv
122.18 130.82 122.301 130.797 122.422 130.773 cv
122.543 130.75 122.664 130.727 122.785 130.703 cv
122.906 130.676 123.027 130.652 123.145 130.625 cv
123.266 130.598 123.387 130.57 123.508 130.539 cv
123.625 130.512 123.746 130.48 123.867 130.453 cv
123.984 130.422 124.105 130.391 124.223 130.355 cv
124.344 130.324 124.461 130.289 124.578 130.258 cv
124.699 130.223 124.816 130.188 124.934 130.148 cv
125.051 130.113 125.168 130.078 125.285 130.039 cv
125.402 130 125.52 129.961 125.637 129.922 cv
125.754 129.883 125.871 129.84 125.988 129.801 cv
126.102 129.758 126.219 129.715 126.332 129.672 cv
126.449 129.629 126.562 129.582 126.68 129.539 cv
126.793 129.492 126.906 129.445 127.023 129.398 cv
127.137 129.352 127.25 129.305 127.363 129.254 cv
127.477 129.207 127.586 129.156 127.699 129.105 cv
127.812 129.055 127.926 129.004 128.035 128.949 cv
128.148 128.898 128.258 128.844 128.371 128.789 cv
128.48 128.734 128.59 128.68 128.699 128.625 cv
128.809 128.57 128.918 128.512 129.027 128.453 cv
129.137 128.395 129.246 128.336 129.355 128.277 cv
129.461 128.219 129.57 128.16 129.676 128.098 cv
129.785 128.035 129.891 127.973 129.996 127.91 cv
130.102 127.848 130.207 127.785 130.316 127.723 cv
130.418 127.656 130.523 127.59 130.629 127.523 cv
130.734 127.461 130.836 127.391 130.938 127.324 cv
131.043 127.258 131.145 127.188 131.246 127.117 cv
131.348 127.051 131.449 126.98 131.551 126.91 cv
131.652 126.836 131.75 126.766 131.852 126.695 cv
131.953 126.621 132.051 126.547 132.148 126.473 cv
132.246 126.398 132.344 126.324 132.445 126.25 cv
132.539 126.172 132.637 126.098 132.734 126.02 cv
132.832 125.941 132.926 125.867 133.02 125.785 cv
133.117 125.707 133.211 125.629 133.305 125.547 cv
133.398 125.469 133.492 125.387 133.582 125.305 cv
133.676 125.227 133.766 125.141 133.859 125.059 cv
133.949 124.977 134.039 124.895 134.129 124.809 cv
134.219 124.723 134.309 124.641 134.398 124.555 cv
134.488 124.469 134.574 124.379 134.66 124.293 cv
134.75 124.207 134.836 124.117 134.922 124.031 cv
135.008 123.941 135.094 123.852 135.176 123.762 cv
135.262 123.672 135.344 123.582 135.426 123.492 cv
135.512 123.398 135.594 123.309 135.676 123.215 cv
135.758 123.121 135.836 123.027 135.918 122.934 cv
135.996 122.84 136.078 122.746 136.156 122.652 cv
136.234 122.559 136.312 122.461 136.387 122.367 cv
136.465 122.27 136.543 122.172 136.617 122.074 cv
136.695 121.977 136.77 121.879 136.844 121.781 cv
136.918 121.684 136.988 121.582 137.062 121.484 cv
137.133 121.383 137.207 121.281 137.277 121.184 cv
137.348 121.082 137.418 120.98 137.488 120.879 cv
137.555 120.777 137.625 120.672 137.691 120.57 cv
137.762 120.469 137.828 120.363 137.895 120.258 cv
137.961 120.156 138.023 120.051 138.09 119.945 cv
138.152 119.84 138.219 119.734 138.281 119.629 cv
138.344 119.523 138.406 119.414 138.465 119.309 cv
138.527 119.203 138.586 119.094 138.648 118.984 cv
138.707 118.879 138.766 118.77 138.824 118.66 cv
138.879 118.551 138.938 118.441 138.992 118.332 cv
139.047 118.223 139.105 118.113 139.16 118 cv
139.211 117.891 139.266 117.781 139.32 117.668 cv
139.371 117.555 139.422 117.445 139.473 117.332 cv
139.523 117.219 139.574 117.105 139.621 116.992 cv
139.672 116.879 139.719 116.766 139.766 116.652 cv
139.816 116.539 139.859 116.426 139.906 116.309 cv
139.953 116.195 139.996 116.082 140.039 115.965 cv
140.082 115.848 140.125 115.734 140.168 115.617 cv
140.211 115.5 140.25 115.387 140.289 115.27 cv
140.332 115.152 140.371 115.035 140.406 114.918 cv
140.445 114.801 140.484 114.684 140.52 114.566 cv
140.555 114.445 140.59 114.328 140.625 114.211 cv
140.66 114.094 140.691 113.973 140.727 113.855 cv
140.758 113.734 140.789 113.617 140.82 113.496 cv
140.852 113.379 140.879 113.258 140.91 113.137 cv
140.938 113.02 140.965 112.898 140.992 112.777 cv
141.02 112.656 141.047 112.535 141.07 112.414 cv
141.094 112.293 141.121 112.176 141.141 112.051 cv
141.164 111.934 141.188 111.812 141.211 111.688 cv
141.23 111.566 141.25 111.445 141.27 111.324 cv
141.289 111.203 141.309 111.082 141.324 110.957 cv
141.344 110.836 141.359 110.715 141.375 110.59 cv
141.391 110.469 141.406 110.348 141.418 110.227 cv
141.43 110.102 141.445 109.98 141.457 109.855 cv
141.469 109.734 141.477 109.609 141.488 109.488 cv
141.496 109.363 141.504 109.242 141.512 109.117 cv
141.523 108.996 141.527 108.871 141.535 108.75 cv
141.539 108.625 141.543 108.504 141.547 108.379 cv
141.551 108.258 141.555 108.133 141.559 108.008 cv
141.559 107.887 141.559 107.766 141.559 107.641 cv
cp
@
141.559 36.984 mo
141.559 36.863 141.559 36.738 141.559 36.617 cv
141.555 36.492 141.551 36.367 141.547 36.246 cv
141.543 36.121 141.539 36 141.535 35.875 cv
141.527 35.754 141.523 35.629 141.512 35.508 cv
141.504 35.383 141.496 35.262 141.488 35.137 cv
141.477 35.016 141.469 34.891 141.457 34.77 cv
141.445 34.648 141.43 34.523 141.418 34.402 cv
141.406 34.277 141.391 34.156 141.375 34.035 cv
141.359 33.91 141.344 33.789 141.324 33.668 cv
141.309 33.543 141.289 33.422 141.27 33.301 cv
141.25 33.18 141.23 33.059 141.211 32.938 cv
141.188 32.816 141.164 32.695 141.141 32.574 cv
141.121 32.453 141.094 32.332 141.07 32.211 cv
141.047 32.09 141.02 31.969 140.992 31.848 cv
140.965 31.727 140.938 31.609 140.91 31.488 cv
140.879 31.367 140.852 31.246 140.82 31.129 cv
140.789 31.008 140.758 30.891 140.727 30.77 cv
140.691 30.652 140.66 30.535 140.625 30.414 cv
140.59 30.297 140.555 30.18 140.52 30.062 cv
140.484 29.941 140.445 29.824 140.406 29.707 cv
140.371 29.59 140.332 29.473 140.289 29.355 cv
140.25 29.238 140.211 29.125 140.168 29.008 cv
140.125 28.891 140.082 28.777 140.039 28.66 cv
139.996 28.547 139.953 28.43 139.906 28.316 cv
139.859 28.199 139.816 28.086 139.766 27.973 cv
139.719 27.859 139.672 27.746 139.621 27.633 cv
139.574 27.52 139.523 27.406 139.473 27.293 cv
139.422 27.184 139.371 27.07 139.32 26.957 cv
139.266 26.844 139.211 26.734 139.16 26.625 cv
139.105 26.516 139.047 26.402 138.992 26.293 cv
138.938 26.184 138.879 26.074 138.824 25.965 cv
138.766 25.855 138.707 25.746 138.648 25.641 cv
138.586 25.531 138.527 25.422 138.465 25.316 cv
138.406 25.211 138.344 25.102 138.281 24.996 cv
138.219 24.891 138.152 24.785 138.09 24.68 cv
138.023 24.574 137.961 24.469 137.895 24.367 cv
137.828 24.262 137.762 24.16 137.691 24.055 cv
137.625 23.953 137.555 23.852 137.488 23.746 cv
137.418 23.645 137.348 23.543 137.277 23.445 cv
137.207 23.344 137.133 23.242 137.062 23.145 cv
136.988 23.043 136.918 22.945 136.844 22.844 cv
136.77 22.746 136.695 22.648 136.617 22.551 cv
136.543 22.453 136.465 22.355 136.387 22.258 cv
136.312 22.164 136.234 22.07 136.156 21.973 cv
136.078 21.879 135.996 21.785 135.918 21.691 cv
135.836 21.598 135.758 21.504 135.676 21.41 cv
135.594 21.316 135.512 21.227 135.426 21.133 cv
135.344 21.043 135.262 20.953 135.176 20.863 cv
135.094 20.773 135.008 20.684 134.922 20.594 cv
134.836 20.508 134.75 20.418 134.66 20.332 cv
134.574 20.246 134.488 20.16 134.398 20.074 cv
134.309 19.988 134.219 19.902 134.129 19.816 cv
134.039 19.734 133.949 19.648 133.859 19.566 cv
133.766 19.484 133.676 19.402 133.582 19.32 cv
133.492 19.238 133.398 19.156 133.305 19.078 cv
133.211 18.996 133.117 18.918 133.02 18.84 cv
132.926 18.758 132.832 18.684 132.734 18.605 cv
132.637 18.527 132.539 18.453 132.445 18.375 cv
132.344 18.301 132.246 18.227 132.148 18.152 cv
132.051 18.078 131.953 18.004 131.852 17.934 cv
131.75 17.859 131.652 17.789 131.551 17.715 cv
131.449 17.645 131.348 17.574 131.246 17.508 cv
131.145 17.438 131.043 17.367 130.938 17.301 cv
130.836 17.234 130.734 17.168 130.629 17.102 cv
130.523 17.035 130.418 16.969 130.316 16.906 cv
130.207 16.84 130.102 16.777 129.996 16.715 cv
129.891 16.652 129.785 16.59 129.676 16.527 cv
129.57 16.465 129.461 16.406 129.355 16.348 cv
129.246 16.289 129.137 16.23 129.027 16.172 cv
128.918 16.113 128.809 16.059 128.699 16 cv
128.59 15.945 128.48 15.891 128.371 15.836 cv
128.258 15.781 128.148 15.727 128.035 15.676 cv
127.926 15.621 127.812 15.57 127.699 15.52 cv
127.586 15.469 127.477 15.418 127.363 15.371 cv
127.25 15.32 127.137 15.273 127.023 15.227 cv
126.906 15.18 126.793 15.133 126.68 15.086 cv
126.562 15.043 126.449 14.996 126.332 14.953 cv
126.219 14.91 126.102 14.867 125.988 14.828 cv
125.871 14.785 125.754 14.742 125.637 14.703 cv
125.52 14.664 125.402 14.625 125.285 14.586 cv
125.168 14.547 125.051 14.512 124.934 14.477 cv
124.816 14.438 124.699 14.402 124.578 14.367 cv
124.461 14.336 124.344 14.301 124.223 14.27 cv
124.105 14.234 123.984 14.203 123.867 14.172 cv
123.746 14.145 123.625 14.113 123.508 14.086 cv
123.387 14.055 123.266 14.027 123.145 14 cv
123.027 13.977 122.906 13.949 122.785 13.922 cv
122.664 13.898 122.543 13.875 122.422 13.852 cv
122.301 13.828 122.18 13.805 122.059 13.785 cv
121.938 13.766 121.816 13.742 121.691 13.723 cv
121.57 13.703 121.449 13.688 121.328 13.668 cv
121.203 13.652 121.082 13.633 120.961 13.621 cv
120.84 13.605 120.715 13.59 120.594 13.578 cv
120.469 13.562 120.348 13.551 120.227 13.539 cv
120.102 13.527 119.98 13.516 119.855 13.508 cv
119.734 13.496 119.609 13.488 119.488 13.48 cv
119.363 13.473 119.242 13.465 119.117 13.461 cv
118.996 13.453 118.871 13.449 118.75 13.445 cv
118.625 13.441 118.5 13.438 118.379 13.438 cv
118.254 13.434 118.133 13.434 118.008 13.434 cv
117.887 13.434 117.762 13.434 117.637 13.438 cv
117.516 13.438 117.391 13.441 117.27 13.445 cv
117.145 13.449 117.023 13.453 116.898 13.461 cv
116.777 13.465 116.652 13.473 116.531 13.48 cv
116.406 13.488 116.285 13.496 116.16 13.508 cv
116.039 13.516 115.914 13.527 115.793 13.539 cv
115.668 13.551 115.547 13.562 115.426 13.578 cv
115.301 13.59 115.18 13.605 115.059 13.621 cv
114.934 13.633 114.812 13.652 114.691 13.668 cv
114.566 13.688 114.445 13.703 114.324 13.723 cv
114.203 13.742 114.082 13.766 113.961 13.785 cv
113.836 13.805 113.715 13.828 113.594 13.852 cv
113.473 13.875 113.352 13.898 113.234 13.922 cv
113.113 13.949 112.992 13.977 112.871 14 cv
112.75 14.027 112.629 14.055 112.512 14.086 cv
112.391 14.113 112.27 14.145 112.152 14.172 cv
112.031 14.203 111.914 14.234 111.793 14.27 cv
111.676 14.301 111.555 14.336 111.438 14.367 cv
111.32 14.402 111.203 14.438 111.082 14.477 cv
110.965 14.512 110.848 14.547 110.73 14.586 cv
110.613 14.625 110.496 14.664 110.379 14.703 cv
110.262 14.742 110.148 14.785 110.031 14.828 cv
109.914 14.867 109.801 14.91 109.684 14.953 cv
109.566 14.996 109.453 15.043 109.34 15.086 cv
109.223 15.133 109.109 15.18 108.996 15.227 cv
108.883 15.273 108.77 15.32 108.656 15.371 cv
108.543 15.418 108.43 15.469 108.316 15.52 cv
108.203 15.57 108.094 15.621 107.98 15.676 cv
107.871 15.727 107.758 15.781 107.648 15.836 cv
107.535 15.891 107.426 15.945 107.316 16 cv
107.207 16.059 107.098 16.113 106.988 16.172 cv
106.879 16.23 106.77 16.289 106.664 16.348 cv
106.555 16.406 106.445 16.465 106.34 16.527 cv
106.234 16.59 106.125 16.652 106.02 16.715 cv
105.914 16.777 105.809 16.84 105.703 16.906 cv
105.598 16.969 105.492 17.035 105.391 17.102 cv
105.285 17.168 105.18 17.234 105.078 17.301 cv
104.977 17.367 104.871 17.438 104.77 17.508 cv
104.668 17.574 104.566 17.645 104.465 17.715 cv
104.367 17.789 104.266 17.859 104.164 17.934 cv
104.066 18.004 103.965 18.078 103.867 18.152 cv
103.77 18.227 103.672 18.301 103.574 18.375 cv
103.477 18.453 103.379 18.527 103.281 18.605 cv
103.188 18.684 103.09 18.758 102.996 18.84 cv
102.902 18.918 102.809 18.996 102.715 19.078 cv
102.621 19.156 102.527 19.238 102.434 19.32 cv
102.34 19.402 102.25 19.484 102.156 19.566 cv
102.066 19.648 101.977 19.734 101.887 19.816 cv
101.797 19.902 101.707 19.988 101.617 20.074 cv
101.531 20.16 101.441 20.246 101.355 20.332 cv
101.27 20.418 101.18 20.508 101.094 20.594 cv
101.008 20.684 100.926 20.773 100.84 20.863 cv
100.754 20.953 100.672 21.043 100.59 21.133 cv
100.508 21.227 100.422 21.316 100.344 21.41 cv
100.262 21.504 100.18 21.598 100.102 21.691 cv
100.02 21.785 99.941 21.879 99.863 21.973 cv
99.781 22.07 99.707 22.164 99.629 22.258 cv
99.551 22.355 99.477 22.453 99.398 22.551 cv
99.324 22.648 99.25 22.746 99.176 22.844 cv
99.102 22.945 99.027 23.043 98.953 23.145 cv
98.883 23.242 98.812 23.344 98.738 23.445 cv
98.668 23.543 98.598 23.645 98.531 23.746 cv
98.461 23.852 98.391 23.953 98.324 24.055 cv
98.258 24.16 98.188 24.262 98.125 24.367 cv
98.059 24.469 97.992 24.574 97.926 24.68 cv
97.863 24.785 97.801 24.891 97.738 24.996 cv
97.676 25.102 97.613 25.211 97.551 25.316 cv
97.488 25.422 97.43 25.531 97.371 25.641 cv
97.312 25.746 97.254 25.855 97.195 25.965 cv
97.137 26.074 97.078 26.184 97.023 26.293 cv
96.969 26.402 96.914 26.516 96.859 26.625 cv
96.805 26.734 96.75 26.844 96.699 26.957 cv
96.645 27.07 96.594 27.184 96.543 27.293 cv
96.492 27.406 96.441 27.52 96.395 27.633 cv
96.344 27.746 96.297 27.859 96.25 27.973 cv
96.203 28.086 96.156 28.199 96.109 28.316 cv
96.066 28.43 96.02 28.547 95.977 28.66 cv
95.934 28.777 95.891 28.891 95.848 29.008 cv
95.809 29.125 95.766 29.238 95.727 29.355 cv
95.688 29.473 95.648 29.59 95.609 29.707 cv
95.57 29.824 95.535 29.941 95.5 30.062 cv
95.461 30.18 95.426 30.297 95.391 30.414 cv
95.359 30.535 95.324 30.652 95.293 30.77 cv
95.258 30.891 95.227 31.008 95.195 31.129 cv
95.168 31.246 95.137 31.367 95.109 31.488 cv
95.078 31.609 95.051 31.727 95.023 31.848 cv
94.996 31.969 94.973 32.09 94.945 32.211 cv
94.922 32.332 94.898 32.453 94.875 32.574 cv
94.852 32.695 94.828 32.816 94.809 32.938 cv
94.785 33.059 94.766 33.18 94.746 33.301 cv
94.727 33.422 94.711 33.543 94.691 33.668 cv
94.676 33.789 94.656 33.91 94.645 34.035 cv
94.629 34.156 94.613 34.277 94.598 34.402 cv
94.586 34.523 94.574 34.648 94.562 34.77 cv
94.551 34.891 94.539 35.016 94.531 35.137 cv
94.52 35.262 94.512 35.383 94.504 35.508 cv
94.496 35.629 94.488 35.754 94.484 35.875 cv
94.477 36 94.473 36.121 94.469 36.246 cv
94.465 36.367 94.461 36.492 94.461 36.617 cv
94.457 36.738 94.457 36.863 94.457 36.984 cv
94.457 37.109 94.457 37.23 94.461 37.355 cv
94.461 37.48 94.465 37.602 94.469 37.727 cv
94.473 37.848 94.477 37.973 94.484 38.094 cv
94.488 38.219 94.496 38.34 94.504 38.465 cv
94.512 38.586 94.52 38.711 94.531 38.832 cv
94.539 38.957 94.551 39.078 94.562 39.203 cv
94.574 39.324 94.586 39.449 94.598 39.57 cv
94.613 39.691 94.629 39.816 94.645 39.938 cv
94.656 40.059 94.676 40.184 94.691 40.305 cv
94.711 40.426 94.727 40.547 94.746 40.668 cv
94.766 40.793 94.785 40.914 94.809 41.035 cv
94.828 41.156 94.852 41.277 94.875 41.398 cv
94.898 41.52 94.922 41.641 94.945 41.762 cv
94.973 41.883 94.996 42.004 95.023 42.121 cv
95.051 42.242 95.078 42.363 95.109 42.484 cv
95.137 42.605 95.168 42.723 95.195 42.844 cv
95.227 42.961 95.258 43.082 95.293 43.199 cv
95.324 43.32 95.359 43.438 95.391 43.555 cv
95.426 43.676 95.461 43.793 95.5 43.91 cv
95.535 44.027 95.57 44.145 95.609 44.266 cv
95.648 44.379 95.688 44.496 95.727 44.613 cv
95.766 44.73 95.809 44.848 95.848 44.965 cv
95.891 45.078 95.934 45.195 95.977 45.312 cv
96.02 45.426 96.066 45.539 96.109 45.656 cv
96.156 45.77 96.203 45.883 96.25 46 cv
96.297 46.113 96.344 46.227 96.395 46.34 cv
96.441 46.453 96.492 46.566 96.543 46.676 cv
96.594 46.789 96.645 46.902 96.699 47.016 cv
96.75 47.125 96.805 47.234 96.859 47.348 cv
96.914 47.457 96.969 47.566 97.023 47.676 cv
97.078 47.789 97.137 47.898 97.195 48.004 cv
97.254 48.113 97.312 48.223 97.371 48.332 cv
97.43 48.441 97.488 48.547 97.551 48.656 cv
97.613 48.762 97.676 48.867 97.738 48.973 cv
97.801 49.082 97.863 49.188 97.926 49.289 cv
97.992 49.398 98.059 49.5 98.125 49.605 cv
98.188 49.707 98.258 49.812 98.324 49.914 cv
98.391 50.02 98.461 50.121 98.531 50.223 cv
98.598 50.324 98.668 50.426 98.738 50.527 cv
98.812 50.629 98.883 50.73 98.953 50.828 cv
99.027 50.93 99.102 51.027 99.176 51.125 cv
99.25 51.227 99.324 51.324 99.398 51.422 cv
99.477 51.52 99.551 51.613 99.629 51.711 cv
99.707 51.809 99.781 51.902 99.863 51.996 cv
99.941 52.094 100.02 52.188 100.102 52.281 cv
100.18 52.375 100.262 52.469 100.344 52.562 cv
100.422 52.652 100.508 52.746 100.59 52.836 cv
100.672 52.926 100.754 53.02 100.84 53.109 cv
100.926 53.199 101.008 53.285 101.094 53.375 cv
101.18 53.465 101.27 53.551 101.355 53.641 cv
101.441 53.727 101.531 53.812 101.617 53.898 cv
101.707 53.984 101.797 54.07 101.887 54.152 cv
101.977 54.238 102.066 54.32 102.156 54.406 cv
102.25 54.488 102.34 54.57 102.434 54.652 cv
102.527 54.734 102.621 54.812 102.715 54.895 cv
102.809 54.977 102.902 55.055 102.996 55.133 cv
103.09 55.211 103.188 55.289 103.281 55.367 cv
103.379 55.441 103.477 55.52 103.574 55.594 cv
103.672 55.672 103.77 55.746 103.867 55.82 cv
103.965 55.895 104.066 55.965 104.164 56.039 cv
104.266 56.113 104.367 56.184 104.465 56.254 cv
104.566 56.324 104.668 56.395 104.77 56.465 cv
104.871 56.535 104.977 56.602 105.078 56.668 cv
105.18 56.738 105.285 56.805 105.391 56.871 cv
105.492 56.938 105.598 57 105.703 57.066 cv
105.809 57.129 105.914 57.195 106.02 57.258 cv
106.125 57.32 106.234 57.383 106.34 57.441 cv
106.445 57.504 106.555 57.566 106.664 57.625 cv
106.77 57.684 106.879 57.742 106.988 57.801 cv
107.098 57.855 107.207 57.914 107.316 57.969 cv
107.426 58.027 107.535 58.082 107.648 58.137 cv
107.758 58.191 107.871 58.242 107.98 58.297 cv
108.094 58.348 108.203 58.398 108.316 58.449 cv
108.43 58.5 108.543 58.551 108.656 58.602 cv
108.77 58.648 108.883 58.695 108.996 58.746 cv
109.109 58.793 109.223 58.836 109.34 58.883 cv
109.453 58.93 109.566 58.973 109.684 59.016 cv
109.801 59.059 109.914 59.102 110.031 59.145 cv
110.148 59.188 110.262 59.227 110.379 59.27 cv
110.496 59.309 110.613 59.344 110.73 59.383 cv
110.848 59.422 110.965 59.461 111.082 59.496 cv
111.203 59.531 111.32 59.566 111.438 59.602 cv
111.555 59.637 111.676 59.668 111.793 59.703 cv
111.914 59.734 112.031 59.766 112.152 59.797 cv
112.27 59.828 112.391 59.859 112.512 59.887 cv
112.629 59.914 112.75 59.941 112.871 59.969 cv
112.992 59.996 113.113 60.023 113.234 60.047 cv
113.352 60.074 113.473 60.098 113.594 60.121 cv
113.715 60.145 113.836 60.164 113.961 60.188 cv
114.082 60.207 114.203 60.227 114.324 60.246 cv
114.445 60.266 114.566 60.285 114.691 60.301 cv
114.812 60.32 114.934 60.336 115.059 60.352 cv
115.18 60.367 115.301 60.383 115.426 60.395 cv
115.547 60.41 115.668 60.422 115.793 60.434 cv
115.914 60.445 116.039 60.453 116.16 60.465 cv
116.285 60.473 116.406 60.484 116.531 60.492 cv
116.652 60.5 116.777 60.504 116.898 60.512 cv
117.023 60.516 117.145 60.523 117.27 60.527 cv
117.391 60.531 117.516 60.531 117.637 60.535 cv
117.762 60.535 117.887 60.535 118.008 60.535 cv
118.133 60.535 118.254 60.535 118.379 60.535 cv
118.5 60.531 118.625 60.531 118.75 60.527 cv
118.871 60.523 118.996 60.516 119.117 60.512 cv
119.242 60.504 119.363 60.5 119.488 60.492 cv
119.609 60.484 119.734 60.473 119.855 60.465 cv
119.98 60.453 120.102 60.445 120.227 60.434 cv
120.348 60.422 120.469 60.41 120.594 60.395 cv
120.715 60.383 120.84 60.367 120.961 60.352 cv
121.082 60.336 121.203 60.32 121.328 60.301 cv
121.449 60.285 121.57 60.266 121.691 60.246 cv
121.816 60.227 121.938 60.207 122.059 60.188 cv
122.18 60.164 122.301 60.145 122.422 60.121 cv
122.543 60.098 122.664 60.074 122.785 60.047 cv
122.906 60.023 123.027 59.996 123.145 59.969 cv
123.266 59.941 123.387 59.914 123.508 59.887 cv
123.625 59.859 123.746 59.828 123.867 59.797 cv
123.984 59.766 124.105 59.734 124.223 59.703 cv
124.344 59.668 124.461 59.637 124.578 59.602 cv
124.699 59.566 124.816 59.531 124.934 59.496 cv
125.051 59.461 125.168 59.422 125.285 59.383 cv
125.402 59.344 125.52 59.309 125.637 59.27 cv
125.754 59.227 125.871 59.188 125.988 59.145 cv
126.102 59.102 126.219 59.059 126.332 59.016 cv
126.449 58.973 126.562 58.93 126.68 58.883 cv
126.793 58.836 126.906 58.793 127.023 58.746 cv
127.137 58.695 127.25 58.648 127.363 58.602 cv
127.477 58.551 127.586 58.5 127.699 58.449 cv
127.812 58.398 127.926 58.348 128.035 58.297 cv
128.148 58.242 128.258 58.191 128.371 58.137 cv
128.48 58.082 128.59 58.027 128.699 57.969 cv
128.809 57.914 128.918 57.855 129.027 57.801 cv
129.137 57.742 129.246 57.684 129.355 57.625 cv
129.461 57.566 129.57 57.504 129.676 57.441 cv
129.785 57.383 129.891 57.32 129.996 57.258 cv
130.102 57.195 130.207 57.129 130.316 57.066 cv
130.418 57 130.523 56.938 130.629 56.871 cv
130.734 56.805 130.836 56.738 130.938 56.668 cv
131.043 56.602 131.145 56.535 131.246 56.465 cv
131.348 56.395 131.449 56.324 131.551 56.254 cv
131.652 56.184 131.75 56.113 131.852 56.039 cv
131.953 55.965 132.051 55.895 132.148 55.82 cv
132.246 55.746 132.344 55.672 132.445 55.594 cv
132.539 55.52 132.637 55.441 132.734 55.367 cv
132.832 55.289 132.926 55.211 133.02 55.133 cv
133.117 55.055 133.211 54.977 133.305 54.895 cv
133.398 54.812 133.492 54.734 133.582 54.652 cv
133.676 54.57 133.766 54.488 133.859 54.406 cv
133.949 54.32 134.039 54.238 134.129 54.152 cv
134.219 54.07 134.309 53.984 134.398 53.898 cv
134.488 53.812 134.574 53.727 134.66 53.641 cv
134.75 53.551 134.836 53.465 134.922 53.375 cv
135.008 53.285 135.094 53.199 135.176 53.109 cv
135.262 53.02 135.344 52.926 135.426 52.836 cv
135.512 52.746 135.594 52.652 135.676 52.562 cv
135.758 52.469 135.836 52.375 135.918 52.281 cv
135.996 52.188 136.078 52.094 136.156 51.996 cv
136.234 51.902 136.312 51.809 136.387 51.711 cv
136.465 51.613 136.543 51.52 136.617 51.422 cv
136.695 51.324 136.77 51.227 136.844 51.125 cv
136.918 51.027 136.988 50.93 137.062 50.828 cv
137.133 50.73 137.207 50.629 137.277 50.527 cv
137.348 50.426 137.418 50.324 137.488 50.223 cv
137.555 50.121 137.625 50.02 137.691 49.914 cv
137.762 49.812 137.828 49.707 137.895 49.605 cv
137.961 49.5 138.023 49.398 138.09 49.289 cv
138.152 49.188 138.219 49.082 138.281 48.973 cv
138.344 48.867 138.406 48.762 138.465 48.656 cv
138.527 48.547 138.586 48.441 138.648 48.332 cv
138.707 48.223 138.766 48.113 138.824 48.004 cv
138.879 47.898 138.938 47.789 138.992 47.676 cv
139.047 47.566 139.105 47.457 139.16 47.348 cv
139.211 47.234 139.266 47.125 139.32 47.016 cv
139.371 46.902 139.422 46.789 139.473 46.676 cv
139.523 46.566 139.574 46.453 139.621 46.34 cv
139.672 46.227 139.719 46.113 139.766 46 cv
139.816 45.883 139.859 45.77 139.906 45.656 cv
139.953 45.539 139.996 45.426 140.039 45.312 cv
140.082 45.195 140.125 45.078 140.168 44.965 cv
140.211 44.848 140.25 44.73 140.289 44.613 cv
140.332 44.496 140.371 44.379 140.406 44.266 cv
140.445 44.145 140.484 44.027 140.52 43.91 cv
140.555 43.793 140.59 43.676 140.625 43.555 cv
140.66 43.438 140.691 43.32 140.727 43.199 cv
140.758 43.082 140.789 42.961 140.82 42.844 cv
140.852 42.723 140.879 42.605 140.91 42.484 cv
140.938 42.363 140.965 42.242 140.992 42.121 cv
141.02 42.004 141.047 41.883 141.07 41.762 cv
141.094 41.641 141.121 41.52 141.141 41.398 cv
141.164 41.277 141.188 41.156 141.211 41.035 cv
141.23 40.914 141.25 40.793 141.27 40.668 cv
141.289 40.547 141.309 40.426 141.324 40.305 cv
141.344 40.184 141.359 40.059 141.375 39.938 cv
141.391 39.816 141.406 39.691 141.418 39.57 cv
141.43 39.449 141.445 39.324 141.457 39.203 cv
141.469 39.078 141.477 38.957 141.488 38.832 cv
141.496 38.711 141.504 38.586 141.512 38.465 cv
141.523 38.34 141.527 38.219 141.535 38.094 cv
141.539 37.973 141.543 37.848 141.547 37.727 cv
141.551 37.602 141.555 37.48 141.559 37.355 cv
141.559 37.23 141.559 37.109 141.559 36.984 cv
cp
@
235.766 178.293 mo
235.766 178.172 235.766 178.047 235.762 177.926 cv
235.762 177.801 235.758 177.68 235.754 177.555 cv
235.75 177.43 235.746 177.309 235.738 177.184 cv
235.734 177.062 235.727 176.938 235.719 176.816 cv
235.711 176.691 235.703 176.57 235.695 176.445 cv
235.684 176.324 235.672 176.199 235.66 176.078 cv
235.648 175.957 235.637 175.832 235.625 175.711 cv
235.609 175.586 235.594 175.465 235.582 175.344 cv
235.566 175.219 235.547 175.098 235.531 174.977 cv
235.512 174.855 235.496 174.73 235.477 174.609 cv
235.457 174.488 235.438 174.367 235.414 174.246 cv
235.395 174.125 235.371 174.004 235.348 173.883 cv
235.324 173.762 235.301 173.641 235.277 173.52 cv
235.25 173.398 235.227 173.277 235.199 173.156 cv
235.172 173.035 235.145 172.918 235.117 172.797 cv
235.086 172.676 235.055 172.559 235.027 172.438 cv
234.996 172.316 234.965 172.199 234.93 172.078 cv
234.898 171.961 234.867 171.844 234.832 171.723 cv
234.797 171.605 234.762 171.488 234.723 171.371 cv
234.688 171.25 234.652 171.133 234.613 171.016 cv
234.574 170.898 234.535 170.781 234.496 170.664 cv
234.457 170.551 234.414 170.434 234.375 170.316 cv
234.332 170.199 234.289 170.086 234.246 169.969 cv
234.203 169.855 234.156 169.738 234.113 169.625 cv
234.066 169.512 234.02 169.395 233.973 169.281 cv
233.926 169.168 233.879 169.055 233.828 168.941 cv
233.781 168.828 233.73 168.715 233.68 168.602 cv
233.629 168.492 233.578 168.379 233.523 168.266 cv
233.473 168.156 233.418 168.043 233.363 167.934 cv
233.309 167.824 233.254 167.711 233.199 167.602 cv
233.145 167.492 233.086 167.383 233.027 167.273 cv
232.969 167.164 232.914 167.055 232.852 166.949 cv
232.793 166.84 232.734 166.734 232.672 166.625 cv
232.609 166.52 232.547 166.41 232.488 166.305 cv
232.422 166.199 232.359 166.094 232.297 165.988 cv
232.23 165.883 232.164 165.777 232.098 165.676 cv
232.035 165.57 231.965 165.469 231.898 165.363 cv
231.832 165.262 231.762 165.16 231.695 165.055 cv
231.625 164.953 231.555 164.852 231.484 164.754 cv
231.414 164.652 231.34 164.551 231.27 164.453 cv
231.195 164.352 231.121 164.254 231.047 164.152 cv
230.973 164.055 230.898 163.957 230.824 163.859 cv
230.75 163.762 230.672 163.664 230.594 163.57 cv
230.516 163.473 230.441 163.379 230.363 163.281 cv
230.281 163.188 230.203 163.094 230.125 163 cv
230.043 162.906 229.961 162.812 229.879 162.719 cv
229.801 162.629 229.715 162.535 229.633 162.445 cv
229.551 162.352 229.469 162.262 229.383 162.172 cv
229.297 162.082 229.215 161.992 229.129 161.906 cv
229.043 161.816 228.957 161.727 228.867 161.641 cv
228.781 161.555 228.691 161.469 228.605 161.383 cv
228.516 161.297 228.426 161.211 228.336 161.125 cv
228.246 161.043 228.156 160.957 228.066 160.875 cv
227.973 160.793 227.883 160.711 227.789 160.629 cv
227.695 160.547 227.602 160.465 227.508 160.387 cv
227.418 160.305 227.32 160.227 227.227 160.148 cv
227.133 160.07 227.035 159.992 226.941 159.914 cv
226.844 159.836 226.746 159.762 226.648 159.684 cv
226.551 159.609 226.453 159.535 226.355 159.461 cv
226.258 159.387 226.156 159.312 226.059 159.242 cv
225.957 159.168 225.859 159.098 225.758 159.027 cv
225.656 158.953 225.555 158.887 225.453 158.816 cv
225.352 158.746 225.246 158.676 225.145 158.609 cv
225.043 158.543 224.938 158.477 224.832 158.41 cv
224.73 158.344 224.625 158.277 224.52 158.215 cv
224.414 158.148 224.309 158.086 224.203 158.023 cv
224.098 157.961 223.992 157.898 223.883 157.836 cv
223.777 157.777 223.668 157.715 223.559 157.656 cv
223.453 157.598 223.344 157.539 223.234 157.48 cv
223.125 157.422 223.016 157.367 222.906 157.309 cv
222.797 157.254 222.688 157.199 222.574 157.145 cv
222.465 157.09 222.352 157.035 222.242 156.984 cv
222.129 156.934 222.02 156.879 221.906 156.828 cv
221.793 156.777 221.68 156.73 221.566 156.68 cv
221.453 156.633 221.34 156.582 221.227 156.535 cv
221.113 156.488 221 156.441 220.883 156.398 cv
220.77 156.352 220.656 156.309 220.539 156.262 cv
220.422 156.219 220.309 156.176 220.191 156.137 cv
220.078 156.094 219.961 156.051 219.844 156.012 cv
219.727 155.973 219.609 155.934 219.492 155.895 cv
219.375 155.859 219.258 155.82 219.141 155.785 cv
219.023 155.746 218.902 155.711 218.785 155.68 cv
218.668 155.645 218.547 155.609 218.43 155.578 cv
218.309 155.547 218.191 155.512 218.07 155.484 cv
217.953 155.453 217.832 155.422 217.711 155.395 cv
217.594 155.363 217.473 155.336 217.352 155.309 cv
217.23 155.285 217.113 155.258 216.992 155.23 cv
216.871 155.207 216.75 155.184 216.629 155.16 cv
216.508 155.137 216.387 155.113 216.262 155.094 cv
216.141 155.074 216.02 155.051 215.898 155.031 cv
215.777 155.012 215.656 154.996 215.531 154.977 cv
215.41 154.961 215.289 154.945 215.168 154.93 cv
215.043 154.914 214.922 154.898 214.797 154.887 cv
214.676 154.871 214.555 154.859 214.43 154.848 cv
214.309 154.836 214.184 154.824 214.062 154.816 cv
213.941 154.805 213.816 154.797 213.695 154.789 cv
213.57 154.781 213.449 154.773 213.324 154.77 cv
213.199 154.762 213.078 154.758 212.953 154.754 cv
212.832 154.75 212.707 154.746 212.586 154.746 cv
212.461 154.742 212.336 154.742 212.215 154.742 cv
212.09 154.742 211.969 154.742 211.844 154.746 cv
211.723 154.746 211.598 154.75 211.473 154.754 cv
211.352 154.758 211.227 154.762 211.105 154.77 cv
210.98 154.773 210.859 154.781 210.734 154.789 cv
210.613 154.797 210.488 154.805 210.367 154.816 cv
210.242 154.824 210.121 154.836 210 154.848 cv
209.875 154.859 209.754 154.871 209.629 154.887 cv
209.508 154.898 209.387 154.914 209.262 154.93 cv
209.141 154.945 209.02 154.961 208.898 154.977 cv
208.773 154.996 208.652 155.012 208.531 155.031 cv
208.41 155.051 208.285 155.074 208.164 155.094 cv
208.043 155.113 207.922 155.137 207.801 155.16 cv
207.68 155.184 207.559 155.207 207.438 155.23 cv
207.316 155.258 207.199 155.285 207.078 155.309 cv
206.957 155.336 206.836 155.363 206.715 155.395 cv
206.598 155.422 206.477 155.453 206.359 155.484 cv
206.238 155.512 206.117 155.547 206 155.578 cv
205.879 155.609 205.762 155.645 205.645 155.68 cv
205.527 155.711 205.406 155.746 205.289 155.785 cv
205.172 155.82 205.055 155.859 204.938 155.895 cv
204.82 155.934 204.703 155.973 204.586 156.012 cv
204.469 156.051 204.352 156.094 204.238 156.137 cv
204.121 156.176 204.004 156.219 203.891 156.262 cv
203.773 156.309 203.66 156.352 203.543 156.398 cv
203.43 156.441 203.316 156.488 203.203 156.535 cv
203.086 156.582 202.973 156.633 202.863 156.68 cv
202.746 156.73 202.637 156.777 202.523 156.828 cv
202.41 156.879 202.297 156.934 202.188 156.984 cv
202.074 157.035 201.965 157.09 201.852 157.145 cv
201.742 157.199 201.633 157.254 201.523 157.309 cv
201.414 157.367 201.301 157.422 201.195 157.48 cv
201.086 157.539 200.977 157.598 200.867 157.656 cv
200.762 157.715 200.652 157.777 200.547 157.836 cv
200.438 157.898 200.332 157.961 200.227 158.023 cv
200.121 158.086 200.012 158.148 199.91 158.215 cv
199.805 158.277 199.699 158.344 199.594 158.41 cv
199.492 158.477 199.387 158.543 199.285 158.609 cv
199.18 158.676 199.078 158.746 198.977 158.816 cv
198.875 158.887 198.773 158.953 198.672 159.027 cv
198.57 159.098 198.469 159.168 198.371 159.242 cv
198.273 159.312 198.172 159.387 198.074 159.461 cv
197.977 159.535 197.879 159.609 197.781 159.684 cv
197.684 159.762 197.586 159.836 197.488 159.914 cv
197.391 159.992 197.297 160.07 197.203 160.148 cv
197.109 160.227 197.012 160.305 196.918 160.387 cv
196.824 160.465 196.734 160.547 196.641 160.629 cv
196.547 160.711 196.457 160.793 196.363 160.875 cv
196.273 160.957 196.184 161.043 196.094 161.125 cv
196.004 161.211 195.914 161.297 195.824 161.383 cv
195.738 161.469 195.648 161.555 195.562 161.641 cv
195.473 161.727 195.387 161.816 195.301 161.906 cv
195.215 161.992 195.129 162.082 195.047 162.172 cv
194.961 162.262 194.879 162.352 194.797 162.445 cv
194.711 162.535 194.629 162.629 194.547 162.719 cv
194.465 162.812 194.387 162.906 194.305 163 cv
194.227 163.094 194.148 163.188 194.066 163.281 cv
193.988 163.379 193.91 163.473 193.836 163.57 cv
193.758 163.664 193.68 163.762 193.605 163.859 cv
193.531 163.957 193.453 164.055 193.379 164.152 cv
193.305 164.254 193.234 164.352 193.16 164.453 cv
193.09 164.551 193.016 164.652 192.945 164.754 cv
192.875 164.852 192.805 164.953 192.734 165.055 cv
192.668 165.16 192.598 165.262 192.531 165.363 cv
192.461 165.469 192.395 165.57 192.328 165.676 cv
192.262 165.777 192.199 165.883 192.133 165.988 cv
192.07 166.094 192.004 166.199 191.941 166.305 cv
191.879 166.41 191.816 166.52 191.758 166.625 cv
191.695 166.734 191.637 166.84 191.578 166.949 cv
191.516 167.055 191.457 167.164 191.402 167.273 cv
191.344 167.383 191.285 167.492 191.23 167.602 cv
191.172 167.711 191.117 167.824 191.066 167.934 cv
191.012 168.043 190.957 168.156 190.906 168.266 cv
190.852 168.379 190.801 168.492 190.75 168.602 cv
190.699 168.715 190.648 168.828 190.598 168.941 cv
190.551 169.055 190.504 169.168 190.457 169.281 cv
190.41 169.395 190.363 169.512 190.316 169.625 cv
190.273 169.738 190.227 169.855 190.184 169.969 cv
190.141 170.086 190.098 170.199 190.055 170.316 cv
190.012 170.434 189.973 170.551 189.934 170.664 cv
189.891 170.781 189.852 170.898 189.816 171.016 cv
189.777 171.133 189.742 171.25 189.703 171.371 cv
189.668 171.488 189.633 171.605 189.598 171.723 cv
189.562 171.844 189.531 171.961 189.496 172.078 cv
189.465 172.199 189.434 172.316 189.402 172.438 cv
189.371 172.559 189.344 172.676 189.312 172.797 cv
189.285 172.918 189.258 173.035 189.23 173.156 cv
189.203 173.277 189.176 173.398 189.152 173.52 cv
189.129 173.641 189.102 173.762 189.082 173.883 cv
189.059 174.004 189.035 174.125 189.012 174.246 cv
188.992 174.367 188.973 174.488 188.953 174.609 cv
188.934 174.73 188.914 174.855 188.898 174.977 cv
188.879 175.098 188.863 175.219 188.848 175.344 cv
188.832 175.465 188.82 175.586 188.805 175.711 cv
188.793 175.832 188.781 175.957 188.766 176.078 cv
188.754 176.199 188.746 176.324 188.734 176.445 cv
188.727 176.57 188.719 176.691 188.711 176.816 cv
188.703 176.938 188.695 177.062 188.691 177.184 cv
188.684 177.309 188.68 177.43 188.676 177.555 cv
188.672 177.68 188.668 177.801 188.664 177.926 cv
188.664 178.047 188.664 178.172 188.664 178.293 cv
188.664 178.418 188.664 178.543 188.664 178.664 cv
188.668 178.789 188.672 178.91 188.676 179.035 cv
188.68 179.156 188.684 179.281 188.691 179.402 cv
188.695 179.527 188.703 179.648 188.711 179.773 cv
188.719 179.895 188.727 180.02 188.734 180.141 cv
188.746 180.266 188.754 180.387 188.766 180.512 cv
188.781 180.633 188.793 180.758 188.805 180.879 cv
188.82 181 188.832 181.125 188.848 181.246 cv
188.863 181.367 188.879 181.492 188.898 181.613 cv
188.914 181.734 188.934 181.855 188.953 181.98 cv
188.973 182.102 188.992 182.223 189.012 182.344 cv
189.035 182.465 189.059 182.586 189.082 182.707 cv
189.102 182.828 189.129 182.949 189.152 183.07 cv
189.176 183.191 189.203 183.312 189.23 183.434 cv
189.258 183.551 189.285 183.672 189.312 183.793 cv
189.344 183.914 189.371 184.031 189.402 184.152 cv
189.434 184.27 189.465 184.391 189.496 184.508 cv
189.531 184.629 189.562 184.746 189.598 184.863 cv
189.633 184.984 189.668 185.102 189.703 185.219 cv
189.742 185.336 189.777 185.453 189.816 185.574 cv
189.852 185.691 189.891 185.805 189.934 185.922 cv
189.973 186.039 190.012 186.156 190.055 186.273 cv
190.098 186.387 190.141 186.504 190.184 186.621 cv
190.227 186.734 190.273 186.852 190.316 186.965 cv
190.363 187.078 190.41 187.191 190.457 187.309 cv
190.504 187.422 190.551 187.535 190.598 187.648 cv
190.648 187.762 190.699 187.875 190.75 187.984 cv
190.801 188.098 190.852 188.211 190.906 188.32 cv
190.957 188.434 191.012 188.543 191.066 188.656 cv
191.117 188.766 191.172 188.875 191.23 188.988 cv
191.285 189.098 191.344 189.207 191.402 189.316 cv
191.457 189.426 191.516 189.531 191.578 189.641 cv
191.637 189.75 191.695 189.855 191.758 189.965 cv
191.816 190.07 191.879 190.176 191.941 190.281 cv
192.004 190.391 192.07 190.496 192.133 190.602 cv
192.199 190.707 192.262 190.809 192.328 190.914 cv
192.395 191.02 192.461 191.121 192.531 191.227 cv
192.598 191.328 192.668 191.43 192.734 191.531 cv
192.805 191.633 192.875 191.734 192.945 191.836 cv
193.016 191.938 193.09 192.039 193.16 192.137 cv
193.234 192.238 193.305 192.336 193.379 192.434 cv
193.453 192.535 193.531 192.633 193.605 192.73 cv
193.68 192.828 193.758 192.922 193.836 193.02 cv
193.91 193.117 193.988 193.211 194.066 193.309 cv
194.148 193.402 194.227 193.496 194.305 193.59 cv
194.387 193.684 194.465 193.777 194.547 193.871 cv
194.629 193.961 194.711 194.055 194.797 194.145 cv
194.879 194.234 194.961 194.328 195.047 194.418 cv
195.129 194.508 195.215 194.598 195.301 194.684 cv
195.387 194.773 195.473 194.859 195.562 194.949 cv
195.648 195.035 195.738 195.121 195.824 195.207 cv
195.914 195.293 196.004 195.379 196.094 195.461 cv
196.184 195.547 196.273 195.633 196.363 195.715 cv
196.457 195.797 196.547 195.879 196.641 195.961 cv
196.734 196.043 196.824 196.125 196.918 196.203 cv
197.012 196.285 197.109 196.363 197.203 196.441 cv
197.297 196.52 197.391 196.598 197.488 196.676 cv
197.586 196.75 197.684 196.828 197.781 196.902 cv
197.879 196.98 197.977 197.055 198.074 197.129 cv
198.172 197.203 198.273 197.277 198.371 197.348 cv
198.469 197.422 198.57 197.492 198.672 197.562 cv
198.773 197.633 198.875 197.703 198.977 197.773 cv
199.078 197.844 199.18 197.91 199.285 197.98 cv
199.387 198.047 199.492 198.113 199.594 198.18 cv
199.699 198.246 199.805 198.312 199.91 198.375 cv
200.012 198.441 200.121 198.504 200.227 198.566 cv
200.332 198.629 200.438 198.691 200.547 198.754 cv
200.652 198.812 200.762 198.875 200.867 198.934 cv
200.977 198.992 201.086 199.051 201.195 199.109 cv
201.301 199.168 201.414 199.223 201.523 199.277 cv
201.633 199.336 201.742 199.391 201.852 199.445 cv
201.965 199.5 202.074 199.551 202.188 199.605 cv
202.297 199.656 202.41 199.707 202.523 199.758 cv
202.637 199.809 202.746 199.859 202.863 199.91 cv
202.973 199.957 203.086 200.008 203.203 200.055 cv
203.316 200.102 203.43 200.148 203.543 200.191 cv
203.66 200.238 203.773 200.281 203.891 200.324 cv
204.004 200.371 204.121 200.41 204.238 200.453 cv
204.352 200.496 204.469 200.535 204.586 200.578 cv
204.703 200.617 204.82 200.656 204.938 200.691 cv
205.055 200.73 205.172 200.77 205.289 200.805 cv
205.406 200.84 205.527 200.875 205.645 200.91 cv
205.762 200.945 205.879 200.98 206 201.012 cv
206.117 201.043 206.238 201.074 206.359 201.105 cv
206.477 201.137 206.598 201.168 206.715 201.195 cv
206.836 201.223 206.957 201.25 207.078 201.277 cv
207.199 201.305 207.316 201.332 207.438 201.355 cv
207.559 201.383 207.68 201.406 207.801 201.43 cv
207.922 201.453 208.043 201.473 208.164 201.496 cv
208.285 201.516 208.41 201.535 208.531 201.555 cv
208.652 201.574 208.773 201.594 208.898 201.609 cv
209.02 201.629 209.141 201.645 209.262 201.66 cv
209.387 201.676 209.508 201.691 209.629 201.703 cv
209.754 201.719 209.875 201.73 210 201.742 cv
210.121 201.754 210.242 201.766 210.367 201.773 cv
210.488 201.781 210.613 201.793 210.734 201.801 cv
210.859 201.809 210.98 201.812 211.105 201.82 cv
211.227 201.824 211.352 201.832 211.473 201.836 cv
211.598 201.84 211.723 201.84 211.844 201.844 cv
211.969 201.844 212.09 201.848 212.215 201.848 cv
212.336 201.848 212.461 201.844 212.586 201.844 cv
212.707 201.84 212.832 201.84 212.953 201.836 cv
213.078 201.832 213.199 201.824 213.324 201.82 cv
213.449 201.812 213.57 201.809 213.695 201.801 cv
213.816 201.793 213.941 201.781 214.062 201.773 cv
214.184 201.766 214.309 201.754 214.43 201.742 cv
214.555 201.73 214.676 201.719 214.797 201.703 cv
214.922 201.691 215.043 201.676 215.168 201.66 cv
215.289 201.645 215.41 201.629 215.531 201.609 cv
215.656 201.594 215.777 201.574 215.898 201.555 cv
216.02 201.535 216.141 201.516 216.262 201.496 cv
216.387 201.473 216.508 201.453 216.629 201.43 cv
216.75 201.406 216.871 201.383 216.992 201.355 cv
217.113 201.332 217.23 201.305 217.352 201.277 cv
217.473 201.25 217.594 201.223 217.711 201.195 cv
217.832 201.168 217.953 201.137 218.07 201.105 cv
218.191 201.074 218.309 201.043 218.43 201.012 cv
218.547 200.98 218.668 200.945 218.785 200.91 cv
218.902 200.875 219.023 200.84 219.141 200.805 cv
219.258 200.77 219.375 200.73 219.492 200.691 cv
219.609 200.656 219.727 200.617 219.844 200.578 cv
219.961 200.535 220.078 200.496 220.191 200.453 cv
220.309 200.41 220.422 200.371 220.539 200.324 cv
220.656 200.281 220.77 200.238 220.883 200.191 cv
221 200.148 221.113 200.102 221.227 200.055 cv
221.34 200.008 221.453 199.957 221.566 199.91 cv
221.68 199.859 221.793 199.809 221.906 199.758 cv
222.02 199.707 222.129 199.656 222.242 199.605 cv
222.352 199.551 222.465 199.5 222.574 199.445 cv
222.688 199.391 222.797 199.336 222.906 199.277 cv
223.016 199.223 223.125 199.168 223.234 199.109 cv
223.344 199.051 223.453 198.992 223.559 198.934 cv
223.668 198.875 223.777 198.812 223.883 198.754 cv
223.992 198.691 224.098 198.629 224.203 198.566 cv
224.309 198.504 224.414 198.441 224.52 198.375 cv
224.625 198.312 224.73 198.246 224.832 198.18 cv
224.938 198.113 225.043 198.047 225.145 197.98 cv
225.246 197.91 225.352 197.844 225.453 197.773 cv
225.555 197.703 225.656 197.633 225.758 197.562 cv
225.859 197.492 225.957 197.422 226.059 197.348 cv
226.156 197.277 226.258 197.203 226.355 197.129 cv
226.453 197.055 226.551 196.98 226.648 196.902 cv
226.746 196.828 226.844 196.75 226.941 196.676 cv
227.035 196.598 227.133 196.52 227.227 196.441 cv
227.32 196.363 227.418 196.285 227.508 196.203 cv
227.602 196.125 227.695 196.043 227.789 195.961 cv
227.883 195.879 227.973 195.797 228.066 195.715 cv
228.156 195.633 228.246 195.547 228.336 195.461 cv
228.426 195.379 228.516 195.293 228.605 195.207 cv
228.691 195.121 228.781 195.035 228.867 194.949 cv
228.957 194.859 229.043 194.773 229.129 194.684 cv
229.215 194.598 229.297 194.508 229.383 194.418 cv
229.469 194.328 229.551 194.234 229.633 194.145 cv
229.715 194.055 229.801 193.961 229.879 193.871 cv
229.961 193.777 230.043 193.684 230.125 193.59 cv
230.203 193.496 230.281 193.402 230.363 193.309 cv
230.441 193.211 230.516 193.117 230.594 193.02 cv
230.672 192.922 230.75 192.828 230.824 192.73 cv
230.898 192.633 230.973 192.535 231.047 192.434 cv
231.121 192.336 231.195 192.238 231.27 192.137 cv
231.34 192.039 231.414 191.938 231.484 191.836 cv
231.555 191.734 231.625 191.633 231.695 191.531 cv
231.762 191.43 231.832 191.328 231.898 191.227 cv
231.965 191.121 232.035 191.02 232.098 190.914 cv
232.164 190.809 232.23 190.707 232.297 190.602 cv
232.359 190.496 232.422 190.391 232.488 190.281 cv
232.547 190.176 232.609 190.07 232.672 189.965 cv
232.734 189.855 232.793 189.75 232.852 189.641 cv
232.914 189.531 232.969 189.426 233.027 189.316 cv
233.086 189.207 233.145 189.098 233.199 188.988 cv
233.254 188.875 233.309 188.766 233.363 188.656 cv
233.418 188.543 233.473 188.434 233.523 188.32 cv
233.578 188.211 233.629 188.098 233.68 187.984 cv
233.73 187.875 233.781 187.762 233.828 187.648 cv
233.879 187.535 233.926 187.422 233.973 187.309 cv
234.02 187.191 234.066 187.078 234.113 186.965 cv
234.156 186.852 234.203 186.734 234.246 186.621 cv
234.289 186.504 234.332 186.387 234.375 186.273 cv
234.414 186.156 234.457 186.039 234.496 185.922 cv
234.535 185.805 234.574 185.691 234.613 185.574 cv
234.652 185.453 234.688 185.336 234.723 185.219 cv
234.762 185.102 234.797 184.984 234.832 184.863 cv
234.867 184.746 234.898 184.629 234.93 184.508 cv
234.965 184.391 234.996 184.27 235.027 184.152 cv
235.055 184.031 235.086 183.914 235.117 183.793 cv
235.145 183.672 235.172 183.551 235.199 183.434 cv
235.227 183.312 235.25 183.191 235.277 183.07 cv
235.301 182.949 235.324 182.828 235.348 182.707 cv
235.371 182.586 235.395 182.465 235.414 182.344 cv
235.438 182.223 235.457 182.102 235.477 181.98 cv
235.496 181.855 235.512 181.734 235.531 181.613 cv
235.547 181.492 235.566 181.367 235.582 181.246 cv
235.594 181.125 235.609 181 235.625 180.879 cv
235.637 180.758 235.648 180.633 235.66 180.512 cv
235.672 180.387 235.684 180.266 235.695 180.141 cv
235.703 180.02 235.711 179.895 235.719 179.773 cv
235.727 179.648 235.734 179.527 235.738 179.402 cv
235.746 179.281 235.75 179.156 235.754 179.035 cv
235.758 178.91 235.762 178.789 235.762 178.664 cv
235.766 178.543 235.766 178.418 235.766 178.293 cv
cp
.845304 .345006 1 .00607309 cmyk
@
235.766 107.641 mo
235.766 107.516 235.766 107.395 235.762 107.27 cv
235.762 107.148 235.758 107.023 235.754 106.902 cv
235.75 106.777 235.746 106.652 235.738 106.531 cv
235.734 106.406 235.727 106.285 235.719 106.16 cv
235.711 106.039 235.703 105.914 235.695 105.793 cv
235.684 105.668 235.672 105.547 235.66 105.422 cv
235.648 105.301 235.637 105.176 235.625 105.055 cv
235.609 104.934 235.594 104.812 235.582 104.688 cv
235.566 104.566 235.547 104.445 235.531 104.32 cv
235.512 104.199 235.496 104.078 235.477 103.957 cv
235.457 103.832 235.438 103.711 235.414 103.59 cv
235.395 103.469 235.371 103.348 235.348 103.227 cv
235.324 103.105 235.301 102.984 235.277 102.863 cv
235.25 102.742 235.227 102.621 235.199 102.504 cv
235.172 102.383 235.145 102.262 235.117 102.141 cv
235.086 102.023 235.055 101.902 235.027 101.781 cv
234.996 101.664 234.965 101.543 234.93 101.426 cv
234.898 101.309 234.867 101.188 234.832 101.07 cv
234.797 100.949 234.762 100.832 234.723 100.715 cv
234.688 100.598 234.652 100.48 234.613 100.363 cv
234.574 100.246 234.535 100.129 234.496 100.012 cv
234.457 99.895 234.414 99.777 234.375 99.66 cv
234.332 99.547 234.289 99.43 234.246 99.316 cv
234.203 99.199 234.156 99.086 234.113 98.969 cv
234.066 98.855 234.02 98.742 233.973 98.629 cv
233.926 98.516 233.879 98.398 233.828 98.285 cv
233.781 98.172 233.73 98.062 233.68 97.949 cv
233.629 97.836 233.578 97.723 233.523 97.613 cv
233.473 97.5 233.418 97.391 233.363 97.277 cv
233.309 97.168 233.254 97.059 233.199 96.949 cv
233.145 96.836 233.086 96.73 233.027 96.621 cv
232.969 96.512 232.914 96.402 232.852 96.293 cv
232.793 96.188 232.734 96.078 232.672 95.973 cv
232.609 95.863 232.547 95.758 232.488 95.652 cv
232.422 95.543 232.359 95.441 232.297 95.336 cv
232.23 95.23 232.164 95.125 232.098 95.02 cv
232.035 94.918 231.965 94.812 231.898 94.711 cv
231.832 94.605 231.762 94.504 231.695 94.402 cv
231.625 94.301 231.555 94.199 231.484 94.098 cv
231.414 93.996 231.34 93.898 231.27 93.797 cv
231.195 93.695 231.121 93.598 231.047 93.5 cv
230.973 93.402 230.898 93.301 230.824 93.203 cv
230.75 93.109 230.672 93.012 230.594 92.914 cv
230.516 92.82 230.441 92.723 230.363 92.629 cv
230.281 92.531 230.203 92.438 230.125 92.344 cv
230.043 92.25 229.961 92.156 229.879 92.066 cv
229.801 91.973 229.715 91.879 229.633 91.789 cv
229.551 91.699 229.469 91.609 229.383 91.52 cv
229.297 91.426 229.215 91.34 229.129 91.25 cv
229.043 91.16 228.957 91.074 228.867 90.988 cv
228.781 90.898 228.691 90.812 228.605 90.727 cv
228.516 90.641 228.426 90.555 228.336 90.473 cv
228.246 90.387 228.156 90.305 228.066 90.223 cv
227.973 90.137 227.883 90.055 227.789 89.973 cv
227.695 89.891 227.602 89.812 227.508 89.73 cv
227.418 89.652 227.32 89.57 227.227 89.492 cv
227.133 89.414 227.035 89.336 226.941 89.258 cv
226.844 89.184 226.746 89.105 226.648 89.031 cv
226.551 88.953 226.453 88.879 226.355 88.809 cv
226.258 88.73 226.156 88.66 226.059 88.586 cv
225.957 88.516 225.859 88.441 225.758 88.371 cv
225.656 88.301 225.555 88.23 225.453 88.16 cv
225.352 88.09 225.246 88.023 225.145 87.957 cv
225.043 87.887 224.938 87.82 224.832 87.754 cv
224.73 87.688 224.625 87.625 224.52 87.559 cv
224.414 87.496 224.309 87.43 224.203 87.367 cv
224.098 87.305 223.992 87.242 223.883 87.184 cv
223.777 87.121 223.668 87.062 223.559 87 cv
223.453 86.941 223.344 86.883 223.234 86.824 cv
223.125 86.77 223.016 86.711 222.906 86.656 cv
222.797 86.602 222.688 86.543 222.574 86.488 cv
222.465 86.438 222.352 86.383 222.242 86.328 cv
222.129 86.277 222.02 86.227 221.906 86.176 cv
221.793 86.125 221.68 86.074 221.566 86.027 cv
221.453 85.977 221.34 85.93 221.227 85.883 cv
221.113 85.832 221 85.789 220.883 85.742 cv
220.77 85.695 220.656 85.652 220.539 85.609 cv
220.422 85.566 220.309 85.523 220.191 85.48 cv
220.078 85.438 219.961 85.398 219.844 85.359 cv
219.727 85.32 219.609 85.281 219.492 85.242 cv
219.375 85.203 219.258 85.164 219.141 85.129 cv
219.023 85.094 218.902 85.059 218.785 85.023 cv
218.668 84.988 218.547 84.957 218.43 84.922 cv
218.309 84.891 218.191 84.859 218.07 84.828 cv
217.953 84.797 217.832 84.77 217.711 84.738 cv
217.594 84.711 217.473 84.684 217.352 84.656 cv
217.23 84.629 217.113 84.602 216.992 84.578 cv
216.871 84.551 216.75 84.527 216.629 84.504 cv
216.508 84.484 216.387 84.461 216.262 84.438 cv
216.141 84.418 216.02 84.398 215.898 84.379 cv
215.777 84.359 215.656 84.34 215.531 84.324 cv
215.41 84.305 215.289 84.289 215.168 84.273 cv
215.043 84.258 214.922 84.246 214.797 84.23 cv
214.676 84.215 214.555 84.203 214.43 84.191 cv
214.309 84.184 214.184 84.172 214.062 84.16 cv
213.941 84.152 213.816 84.145 213.695 84.133 cv
213.57 84.129 213.449 84.121 213.324 84.113 cv
213.199 84.109 213.078 84.105 212.953 84.102 cv
212.832 84.098 212.707 84.094 212.586 84.09 cv
212.461 84.09 212.336 84.09 212.215 84.09 cv
212.09 84.09 211.969 84.09 211.844 84.09 cv
211.723 84.094 211.598 84.098 211.473 84.102 cv
211.352 84.105 211.227 84.109 211.105 84.113 cv
210.98 84.121 210.859 84.129 210.734 84.133 cv
210.613 84.145 210.488 84.152 210.367 84.16 cv
210.242 84.172 210.121 84.184 210 84.191 cv
209.875 84.203 209.754 84.215 209.629 84.23 cv
209.508 84.246 209.387 84.258 209.262 84.273 cv
209.141 84.289 209.02 84.305 208.898 84.324 cv
208.773 84.34 208.652 84.359 208.531 84.379 cv
208.41 84.398 208.285 84.418 208.164 84.438 cv
208.043 84.461 207.922 84.484 207.801 84.504 cv
207.68 84.527 207.559 84.551 207.438 84.578 cv
207.316 84.602 207.199 84.629 207.078 84.656 cv
206.957 84.684 206.836 84.711 206.715 84.738 cv
206.598 84.77 206.477 84.797 206.359 84.828 cv
206.238 84.859 206.117 84.891 206 84.922 cv
205.879 84.957 205.762 84.988 205.645 85.023 cv
205.527 85.059 205.406 85.094 205.289 85.129 cv
205.172 85.164 205.055 85.203 204.938 85.242 cv
204.82 85.281 204.703 85.32 204.586 85.359 cv
204.469 85.398 204.352 85.438 204.238 85.48 cv
204.121 85.523 204.004 85.566 203.891 85.609 cv
203.773 85.652 203.66 85.695 203.543 85.742 cv
203.43 85.789 203.316 85.832 203.203 85.883 cv
203.086 85.93 202.973 85.977 202.863 86.027 cv
202.746 86.074 202.637 86.125 202.523 86.176 cv
202.41 86.227 202.297 86.277 202.188 86.328 cv
202.074 86.383 201.965 86.438 201.852 86.488 cv
201.742 86.543 201.633 86.602 201.523 86.656 cv
201.414 86.711 201.301 86.77 201.195 86.824 cv
201.086 86.883 200.977 86.941 200.867 87 cv
200.762 87.062 200.652 87.121 200.547 87.184 cv
200.438 87.242 200.332 87.305 200.227 87.367 cv
200.121 87.43 200.012 87.496 199.91 87.559 cv
199.805 87.625 199.699 87.688 199.594 87.754 cv
199.492 87.82 199.387 87.887 199.285 87.957 cv
199.18 88.023 199.078 88.09 198.977 88.16 cv
198.875 88.23 198.773 88.301 198.672 88.371 cv
198.57 88.441 198.469 88.516 198.371 88.586 cv
198.273 88.66 198.172 88.73 198.074 88.809 cv
197.977 88.879 197.879 88.953 197.781 89.031 cv
197.684 89.105 197.586 89.184 197.488 89.258 cv
197.391 89.336 197.297 89.414 197.203 89.492 cv
197.109 89.57 197.012 89.652 196.918 89.73 cv
196.824 89.812 196.734 89.891 196.641 89.973 cv
196.547 90.055 196.457 90.137 196.363 90.223 cv
196.273 90.305 196.184 90.387 196.094 90.473 cv
196.004 90.555 195.914 90.641 195.824 90.727 cv
195.738 90.812 195.648 90.898 195.562 90.988 cv
195.473 91.074 195.387 91.16 195.301 91.25 cv
195.215 91.34 195.129 91.426 195.047 91.52 cv
194.961 91.609 194.879 91.699 194.797 91.789 cv
194.711 91.879 194.629 91.973 194.547 92.066 cv
194.465 92.156 194.387 92.25 194.305 92.344 cv
194.227 92.438 194.148 92.531 194.066 92.629 cv
193.988 92.723 193.91 92.82 193.836 92.914 cv
193.758 93.012 193.68 93.109 193.605 93.203 cv
193.531 93.301 193.453 93.402 193.379 93.5 cv
193.305 93.598 193.234 93.695 193.16 93.797 cv
193.09 93.898 193.016 93.996 192.945 94.098 cv
192.875 94.199 192.805 94.301 192.734 94.402 cv
192.668 94.504 192.598 94.605 192.531 94.711 cv
192.461 94.812 192.395 94.918 192.328 95.02 cv
192.262 95.125 192.199 95.23 192.133 95.336 cv
192.07 95.441 192.004 95.543 191.941 95.652 cv
191.879 95.758 191.816 95.863 191.758 95.973 cv
191.695 96.078 191.637 96.188 191.578 96.293 cv
191.516 96.402 191.457 96.512 191.402 96.621 cv
191.344 96.73 191.285 96.836 191.23 96.949 cv
191.172 97.059 191.117 97.168 191.066 97.277 cv
191.012 97.391 190.957 97.5 190.906 97.613 cv
190.852 97.723 190.801 97.836 190.75 97.949 cv
190.699 98.062 190.648 98.172 190.598 98.285 cv
190.551 98.398 190.504 98.516 190.457 98.629 cv
190.41 98.742 190.363 98.855 190.316 98.969 cv
190.273 99.086 190.227 99.199 190.184 99.316 cv
190.141 99.43 190.098 99.547 190.055 99.66 cv
190.012 99.777 189.973 99.895 189.934 100.012 cv
189.891 100.129 189.852 100.246 189.816 100.363 cv
189.777 100.48 189.742 100.598 189.703 100.715 cv
189.668 100.832 189.633 100.949 189.598 101.07 cv
189.562 101.188 189.531 101.309 189.496 101.426 cv
189.465 101.543 189.434 101.664 189.402 101.781 cv
189.371 101.902 189.344 102.023 189.312 102.141 cv
189.285 102.262 189.258 102.383 189.23 102.504 cv
189.203 102.621 189.176 102.742 189.152 102.863 cv
189.129 102.984 189.102 103.105 189.082 103.227 cv
189.059 103.348 189.035 103.469 189.012 103.59 cv
188.992 103.711 188.973 103.832 188.953 103.957 cv
188.934 104.078 188.914 104.199 188.898 104.32 cv
188.879 104.445 188.863 104.566 188.848 104.688 cv
188.832 104.812 188.82 104.934 188.805 105.055 cv
188.793 105.176 188.781 105.301 188.766 105.422 cv
188.754 105.547 188.746 105.668 188.734 105.793 cv
188.727 105.914 188.719 106.039 188.711 106.16 cv
188.703 106.285 188.695 106.406 188.691 106.531 cv
188.684 106.652 188.68 106.777 188.676 106.902 cv
188.672 107.023 188.668 107.148 188.664 107.27 cv
188.664 107.395 188.664 107.516 188.664 107.641 cv
188.664 107.766 188.664 107.887 188.664 108.008 cv
188.668 108.133 188.672 108.258 188.676 108.379 cv
188.68 108.504 188.684 108.625 188.691 108.75 cv
188.695 108.871 188.703 108.996 188.711 109.117 cv
188.719 109.242 188.727 109.363 188.734 109.488 cv
188.746 109.609 188.754 109.734 188.766 109.855 cv
188.781 109.98 188.793 110.102 188.805 110.227 cv
188.82 110.348 188.832 110.469 188.848 110.59 cv
188.863 110.715 188.879 110.836 188.898 110.957 cv
188.914 111.082 188.934 111.203 188.953 111.324 cv
188.973 111.445 188.992 111.566 189.012 111.688 cv
189.035 111.812 189.059 111.934 189.082 112.051 cv
189.102 112.176 189.129 112.293 189.152 112.414 cv
189.176 112.535 189.203 112.656 189.23 112.777 cv
189.258 112.898 189.285 113.02 189.312 113.137 cv
189.344 113.258 189.371 113.379 189.402 113.496 cv
189.434 113.617 189.465 113.734 189.496 113.855 cv
189.531 113.973 189.562 114.094 189.598 114.211 cv
189.633 114.328 189.668 114.445 189.703 114.566 cv
189.742 114.684 189.777 114.801 189.816 114.918 cv
189.852 115.035 189.891 115.152 189.934 115.27 cv
189.973 115.387 190.012 115.5 190.055 115.617 cv
190.098 115.734 190.141 115.848 190.184 115.965 cv
190.227 116.082 190.273 116.195 190.316 116.309 cv
190.363 116.426 190.41 116.539 190.457 116.652 cv
190.504 116.766 190.551 116.879 190.598 116.992 cv
190.648 117.105 190.699 117.219 190.75 117.332 cv
190.801 117.445 190.852 117.555 190.906 117.668 cv
190.957 117.781 191.012 117.891 191.066 118 cv
191.117 118.113 191.172 118.223 191.23 118.332 cv
191.285 118.441 191.344 118.551 191.402 118.66 cv
191.457 118.77 191.516 118.879 191.578 118.984 cv
191.637 119.094 191.695 119.203 191.758 119.309 cv
191.816 119.414 191.879 119.523 191.941 119.629 cv
192.004 119.734 192.07 119.84 192.133 119.945 cv
192.199 120.051 192.262 120.156 192.328 120.258 cv
192.395 120.363 192.461 120.469 192.531 120.57 cv
192.598 120.672 192.668 120.777 192.734 120.879 cv
192.805 120.98 192.875 121.082 192.945 121.184 cv
193.016 121.281 193.09 121.383 193.16 121.484 cv
193.234 121.582 193.305 121.684 193.379 121.781 cv
193.453 121.879 193.531 121.977 193.605 122.074 cv
193.68 122.172 193.758 122.27 193.836 122.367 cv
193.91 122.461 193.988 122.559 194.066 122.652 cv
194.148 122.746 194.227 122.84 194.305 122.934 cv
194.387 123.027 194.465 123.121 194.547 123.215 cv
194.629 123.309 194.711 123.398 194.797 123.492 cv
194.879 123.582 194.961 123.672 195.047 123.762 cv
195.129 123.852 195.215 123.941 195.301 124.031 cv
195.387 124.117 195.473 124.207 195.562 124.293 cv
195.648 124.379 195.738 124.469 195.824 124.555 cv
195.914 124.641 196.004 124.723 196.094 124.809 cv
196.184 124.895 196.273 124.977 196.363 125.059 cv
196.457 125.141 196.547 125.227 196.641 125.305 cv
196.734 125.387 196.824 125.469 196.918 125.547 cv
197.012 125.629 197.109 125.707 197.203 125.785 cv
197.297 125.867 197.391 125.941 197.488 126.02 cv
197.586 126.098 197.684 126.172 197.781 126.25 cv
197.879 126.324 197.977 126.398 198.074 126.473 cv
198.172 126.547 198.273 126.621 198.371 126.695 cv
198.469 126.766 198.57 126.836 198.672 126.91 cv
198.773 126.98 198.875 127.051 198.977 127.117 cv
199.078 127.188 199.18 127.258 199.285 127.324 cv
199.387 127.391 199.492 127.461 199.594 127.523 cv
199.699 127.59 199.805 127.656 199.91 127.723 cv
200.012 127.785 200.121 127.848 200.227 127.91 cv
200.332 127.973 200.438 128.035 200.547 128.098 cv
200.652 128.16 200.762 128.219 200.867 128.277 cv
200.977 128.336 201.086 128.395 201.195 128.453 cv
201.301 128.512 201.414 128.57 201.523 128.625 cv
201.633 128.68 201.742 128.734 201.852 128.789 cv
201.965 128.844 202.074 128.898 202.188 128.949 cv
202.297 129.004 202.41 129.055 202.523 129.105 cv
202.637 129.156 202.746 129.207 202.863 129.254 cv
202.973 129.305 203.086 129.352 203.203 129.398 cv
203.316 129.445 203.43 129.492 203.543 129.539 cv
203.66 129.582 203.773 129.629 203.891 129.672 cv
204.004 129.715 204.121 129.758 204.238 129.801 cv
204.352 129.84 204.469 129.883 204.586 129.922 cv
204.703 129.961 204.82 130 204.938 130.039 cv
205.055 130.078 205.172 130.113 205.289 130.148 cv
205.406 130.188 205.527 130.223 205.645 130.258 cv
205.762 130.289 205.879 130.324 206 130.355 cv
206.117 130.391 206.238 130.422 206.359 130.453 cv
206.477 130.48 206.598 130.512 206.715 130.539 cv
206.836 130.57 206.957 130.598 207.078 130.625 cv
207.199 130.652 207.316 130.676 207.438 130.703 cv
207.559 130.727 207.68 130.75 207.801 130.773 cv
207.922 130.797 208.043 130.82 208.164 130.84 cv
208.285 130.863 208.41 130.883 208.531 130.902 cv
208.652 130.922 208.773 130.938 208.898 130.957 cv
209.02 130.973 209.141 130.992 209.262 131.004 cv
209.387 131.02 209.508 131.035 209.629 131.051 cv
209.754 131.062 209.875 131.074 210 131.086 cv
210.121 131.098 210.242 131.109 210.367 131.117 cv
210.488 131.129 210.613 131.137 210.734 131.145 cv
210.859 131.152 210.98 131.16 211.105 131.164 cv
211.227 131.172 211.352 131.176 211.473 131.18 cv
211.598 131.184 211.723 131.188 211.844 131.188 cv
211.969 131.191 212.09 131.191 212.215 131.191 cv
212.336 131.191 212.461 131.191 212.586 131.188 cv
212.707 131.188 212.832 131.184 212.953 131.18 cv
213.078 131.176 213.199 131.172 213.324 131.164 cv
213.449 131.16 213.57 131.152 213.695 131.145 cv
213.816 131.137 213.941 131.129 214.062 131.117 cv
214.184 131.109 214.309 131.098 214.43 131.086 cv
214.555 131.074 214.676 131.062 214.797 131.051 cv
214.922 131.035 215.043 131.02 215.168 131.004 cv
215.289 130.992 215.41 130.973 215.531 130.957 cv
215.656 130.938 215.777 130.922 215.898 130.902 cv
216.02 130.883 216.141 130.863 216.262 130.84 cv
216.387 130.82 216.508 130.797 216.629 130.773 cv
216.75 130.75 216.871 130.727 216.992 130.703 cv
217.113 130.676 217.23 130.652 217.352 130.625 cv
217.473 130.598 217.594 130.57 217.711 130.539 cv
217.832 130.512 217.953 130.48 218.07 130.453 cv
218.191 130.422 218.309 130.391 218.43 130.355 cv
218.547 130.324 218.668 130.289 218.785 130.258 cv
218.902 130.223 219.023 130.188 219.141 130.148 cv
219.258 130.113 219.375 130.078 219.492 130.039 cv
219.609 130 219.727 129.961 219.844 129.922 cv
219.961 129.883 220.078 129.84 220.191 129.801 cv
220.309 129.758 220.422 129.715 220.539 129.672 cv
220.656 129.629 220.77 129.582 220.883 129.539 cv
221 129.492 221.113 129.445 221.227 129.398 cv
221.34 129.352 221.453 129.305 221.566 129.254 cv
221.68 129.207 221.793 129.156 221.906 129.105 cv
222.02 129.055 222.129 129.004 222.242 128.949 cv
222.352 128.898 222.465 128.844 222.574 128.789 cv
222.688 128.734 222.797 128.68 222.906 128.625 cv
223.016 128.57 223.125 128.512 223.234 128.453 cv
223.344 128.395 223.453 128.336 223.559 128.277 cv
223.668 128.219 223.777 128.16 223.883 128.098 cv
223.992 128.035 224.098 127.973 224.203 127.91 cv
224.309 127.848 224.414 127.785 224.52 127.723 cv
224.625 127.656 224.73 127.59 224.832 127.523 cv
224.938 127.461 225.043 127.391 225.145 127.324 cv
225.246 127.258 225.352 127.188 225.453 127.117 cv
225.555 127.051 225.656 126.98 225.758 126.91 cv
225.859 126.836 225.957 126.766 226.059 126.695 cv
226.156 126.621 226.258 126.547 226.355 126.473 cv
226.453 126.398 226.551 126.324 226.648 126.25 cv
226.746 126.172 226.844 126.098 226.941 126.02 cv
227.035 125.941 227.133 125.867 227.227 125.785 cv
227.32 125.707 227.418 125.629 227.508 125.547 cv
227.602 125.469 227.695 125.387 227.789 125.305 cv
227.883 125.227 227.973 125.141 228.066 125.059 cv
228.156 124.977 228.246 124.895 228.336 124.809 cv
228.426 124.723 228.516 124.641 228.605 124.555 cv
228.691 124.469 228.781 124.379 228.867 124.293 cv
228.957 124.207 229.043 124.117 229.129 124.031 cv
229.215 123.941 229.297 123.852 229.383 123.762 cv
229.469 123.672 229.551 123.582 229.633 123.492 cv
229.715 123.398 229.801 123.309 229.879 123.215 cv
229.961 123.121 230.043 123.027 230.125 122.934 cv
230.203 122.84 230.281 122.746 230.363 122.652 cv
230.441 122.559 230.516 122.461 230.594 122.367 cv
230.672 122.27 230.75 122.172 230.824 122.074 cv
230.898 121.977 230.973 121.879 231.047 121.781 cv
231.121 121.684 231.195 121.582 231.27 121.484 cv
231.34 121.383 231.414 121.281 231.484 121.184 cv
231.555 121.082 231.625 120.98 231.695 120.879 cv
231.762 120.777 231.832 120.672 231.898 120.57 cv
231.965 120.469 232.035 120.363 232.098 120.258 cv
232.164 120.156 232.23 120.051 232.297 119.945 cv
232.359 119.84 232.422 119.734 232.488 119.629 cv
232.547 119.523 232.609 119.414 232.672 119.309 cv
232.734 119.203 232.793 119.094 232.852 118.984 cv
232.914 118.879 232.969 118.77 233.027 118.66 cv
233.086 118.551 233.145 118.441 233.199 118.332 cv
233.254 118.223 233.309 118.113 233.363 118 cv
233.418 117.891 233.473 117.781 233.523 117.668 cv
233.578 117.555 233.629 117.445 233.68 117.332 cv
233.73 117.219 233.781 117.105 233.828 116.992 cv
233.879 116.879 233.926 116.766 233.973 116.652 cv
234.02 116.539 234.066 116.426 234.113 116.309 cv
234.156 116.195 234.203 116.082 234.246 115.965 cv
234.289 115.848 234.332 115.734 234.375 115.617 cv
234.414 115.5 234.457 115.387 234.496 115.27 cv
234.535 115.152 234.574 115.035 234.613 114.918 cv
234.652 114.801 234.688 114.684 234.723 114.566 cv
234.762 114.445 234.797 114.328 234.832 114.211 cv
234.867 114.094 234.898 113.973 234.93 113.855 cv
234.965 113.734 234.996 113.617 235.027 113.496 cv
235.055 113.379 235.086 113.258 235.117 113.137 cv
235.145 113.02 235.172 112.898 235.199 112.777 cv
235.227 112.656 235.25 112.535 235.277 112.414 cv
235.301 112.293 235.324 112.176 235.348 112.051 cv
235.371 111.934 235.395 111.812 235.414 111.688 cv
235.438 111.566 235.457 111.445 235.477 111.324 cv
235.496 111.203 235.512 111.082 235.531 110.957 cv
235.547 110.836 235.566 110.715 235.582 110.59 cv
235.594 110.469 235.609 110.348 235.625 110.227 cv
235.637 110.102 235.648 109.98 235.66 109.855 cv
235.672 109.734 235.684 109.609 235.695 109.488 cv
235.703 109.363 235.711 109.242 235.719 109.117 cv
235.727 108.996 235.734 108.871 235.738 108.75 cv
235.746 108.625 235.75 108.504 235.754 108.379 cv
235.758 108.258 235.762 108.133 235.762 108.008 cv
235.766 107.887 235.766 107.766 235.766 107.641 cv
cp
@
2.0075 lw
48.059 222.719 mo
93.75 239.852 li
0 0 0 0 cmyk
@
.501875 lw
86.703 237.211 mo
48.059 222.719 li
.92929 .879301 .889677 .799283 cmyk
@
93.75 239.852 mo
87.41 235.32 li
85.996 239.098 li
cp
f
93.75 239.852 mo
87.41 235.32 li
85.996 239.098 li
cp
@
2.0075 lw
48.059 204.523 mo
93.75 187.391 li
0 0 0 0 cmyk
@
.501875 lw
86.703 190.035 mo
48.059 204.523 li
.92929 .879301 .889677 .799283 cmyk
@
93.75 187.391 mo
85.996 188.145 li
87.41 191.922 li
cp
f
93.75 187.391 mo
85.996 188.145 li
87.41 191.922 li
cp
@
2.0075 lw
41.016 194.258 mo
100.797 127.004 li
0 0 0 0 cmyk
@
.501875 lw
95.797 132.629 mo
41.016 194.258 li
.92929 .879301 .889677 .799283 cmyk
@
100.797 127.004 mo
94.289 131.289 li
97.305 133.969 li
cp
f
100.797 127.004 mo
94.289 131.289 li
97.305 133.969 li
cp
@
2.0075 lw
35.992 190.762 mo
105.816 59.844 li
0 0 0 0 cmyk
@
.501875 lw
102.273 66.488 mo
35.992 190.762 li
.92929 .879301 .889677 .799283 cmyk
@
105.816 59.844 mo
100.496 65.539 li
104.055 67.438 li
cp
f
105.816 59.844 mo
100.496 65.539 li
104.055 67.438 li
cp
@
2.0075 lw
41.016 162.332 mo
100.797 229.586 li
0 0 0 0 cmyk
@
.501875 lw
95.797 223.961 mo
41.016 162.332 li
.92929 .879301 .889677 .799283 cmyk
@
100.797 229.586 mo
97.305 222.621 li
94.289 225.301 li
cp
f
100.797 229.586 mo
97.305 222.621 li
94.289 225.301 li
cp
@
2.0075 lw
48.059 152.062 mo
93.75 169.199 li
0 0 0 0 cmyk
@
.501875 lw
86.703 166.555 mo
48.059 152.062 li
.92929 .879301 .889677 .799283 cmyk
@
93.75 169.199 mo
87.41 164.664 li
85.996 168.445 li
cp
f
93.75 169.199 mo
87.41 164.664 li
85.996 168.445 li
cp
@
2.0075 lw
48.059 133.871 mo
93.75 116.738 li
0 0 0 0 cmyk
@
.501875 lw
86.703 119.379 mo
48.059 133.871 li
.92929 .879301 .889677 .799283 cmyk
@
93.75 116.738 mo
85.996 117.492 li
87.41 121.27 li
cp
f
93.75 116.738 mo
85.996 117.492 li
87.41 121.27 li
cp
@
2.0075 lw
41.016 123.605 mo
100.797 56.348 li
0 0 0 0 cmyk
@
.501875 lw
95.797 61.977 mo
41.016 123.605 li
.92929 .879301 .889677 .799283 cmyk
@
100.797 56.348 mo
94.289 60.633 li
97.305 63.316 li
cp
f
100.797 56.348 mo
94.289 60.633 li
97.305 63.316 li
cp
@
2.0075 lw
35.992 95.172 mo
105.816 226.09 li
0 0 0 0 cmyk
@
.501875 lw
102.273 219.449 mo
35.992 95.172 li
.92929 .879301 .889677 .799283 cmyk
@
105.816 226.09 mo
104.055 218.5 li
100.496 220.398 li
cp
f
105.816 226.09 mo
104.055 218.5 li
100.496 220.398 li
cp
@
2.0075 lw
41.016 91.676 mo
100.797 158.93 li
0 0 0 0 cmyk
@
.501875 lw
95.797 153.305 mo
41.016 91.676 li
.92929 .879301 .889677 .799283 cmyk
@
100.797 158.93 mo
97.305 151.965 li
94.289 154.645 li
cp
f
100.797 158.93 mo
97.305 151.965 li
94.289 154.645 li
cp
@
2.0075 lw
48.059 81.41 mo
93.75 98.543 li
0 0 0 0 cmyk
@
.501875 lw
86.703 95.902 mo
48.059 81.41 li
.92929 .879301 .889677 .799283 cmyk
@
93.75 98.543 mo
87.41 94.012 li
85.996 97.789 li
cp
f
93.75 98.543 mo
87.41 94.012 li
85.996 97.789 li
cp
@
2.0075 lw
48.059 63.215 mo
93.75 46.082 li
0 0 0 0 cmyk
@
.501875 lw
86.703 48.727 mo
48.059 63.215 li
.92929 .879301 .889677 .799283 cmyk
@
93.75 46.082 mo
85.996 46.836 li
87.41 50.613 li
cp
f
93.75 46.082 mo
85.996 46.836 li
87.41 50.613 li
cp
@
2.0075 lw
138.734 233.406 mo
191.488 193.84 li
0 0 0 0 cmyk
@
.501875 lw
185.465 198.355 mo
138.734 233.406 li
.92929 .879301 .889677 .799283 cmyk
@
191.488 193.84 mo
184.258 196.742 li
186.676 199.969 li
cp
f
191.488 193.84 mo
184.258 196.742 li
186.676 199.969 li
cp
@
2.0075 lw
132.379 227.395 mo
197.844 129.195 li
0 0 0 0 cmyk
@
.501875 lw
193.668 135.461 mo
132.379 227.395 li
.92929 .879301 .889677 .799283 cmyk
@
197.844 129.195 mo
191.988 134.34 li
195.348 136.578 li
cp
f
197.844 129.195 mo
191.988 134.34 li
195.348 136.578 li
cp
@
2.0075 lw
143.914 178.293 mo
186.309 178.293 li
0 0 0 0 cmyk
@
.501875 lw
178.781 178.293 mo
143.914 178.293 li
.92929 .879301 .889677 .799283 cmyk
@
186.309 178.293 mo
178.781 176.277 li
178.781 180.312 li
cp
f
186.309 178.293 mo
178.781 176.277 li
178.781 180.312 li
cp
@
2.0075 lw
138.734 162.75 mo
191.488 123.184 li
0 0 0 0 cmyk
@
.501875 lw
185.465 127.699 mo
138.734 162.75 li
.92929 .879301 .889677 .799283 cmyk
@
191.488 123.184 mo
184.258 126.086 li
186.676 129.316 li
cp
f
191.488 123.184 mo
184.258 126.086 li
186.676 129.316 li
cp
@
2.0075 lw
138.734 123.184 mo
191.488 162.75 li
0 0 0 0 cmyk
@
.501875 lw
185.465 158.234 mo
138.734 123.184 li
.92929 .879301 .889677 .799283 cmyk
@
191.488 162.75 mo
186.676 156.621 li
184.258 159.848 li
cp
f
191.488 162.75 mo
186.676 156.621 li
184.258 159.848 li
cp
@
2.0075 lw
143.914 107.641 mo
186.309 107.641 li
0 0 0 0 cmyk
@
.501875 lw
178.781 107.641 mo
143.914 107.641 li
.92929 .879301 .889677 .799283 cmyk
@
186.309 107.641 mo
178.781 105.621 li
178.781 109.656 li
cp
f
186.309 107.641 mo
178.781 105.621 li
178.781 109.656 li
cp
@
2.0075 lw
132.379 58.539 mo
197.844 156.738 li
0 0 0 0 cmyk
@
.501875 lw
193.668 150.477 mo
132.379 58.539 li
.92929 .879301 .889677 .799283 cmyk
@
197.844 156.738 mo
195.348 149.355 li
191.988 151.594 li
cp
f
197.844 156.738 mo
195.348 149.355 li
191.988 151.594 li
cp
@
2.0075 lw
138.734 52.531 mo
191.488 92.098 li
0 0 0 0 cmyk
@
.501875 lw
185.465 87.578 mo
138.734 52.531 li
.92929 .879301 .889677 .799283 cmyk
@
191.488 92.098 mo
186.676 85.965 li
184.258 89.191 li
cp
f
191.488 92.098 mo
186.676 85.965 li
184.258 89.191 li
cp
@
12.215 35.484 mo
12.215 35.039 12.25 34.922 13.152 34.922 cv
13.414 34.922 li
13.414 34.57 li
13.125 34.598 12.094 34.598 11.734 34.598 cv
11.375 34.598 10.332 34.598 10.043 34.57 cv
10.043 34.922 li
10.309 34.922 li
11.207 34.922 11.242 35.039 11.242 35.484 cv
11.242 41.855 li
11.242 42.301 11.207 42.422 10.309 42.422 cv
10.043 42.422 li
10.043 42.77 li
10.332 42.742 11.363 42.742 11.723 42.742 cv
12.082 42.742 13.125 42.742 13.414 42.77 cv
13.414 42.422 li
13.152 42.422 li
12.25 42.422 12.215 42.301 12.215 41.855 cv
cp
.268803 1 1 .00122072 cmyk
f
19.191 39.852 mo
19.191 38.734 19.191 38.398 18.914 38.016 cv
18.566 37.547 18 37.477 17.594 37.477 cv
16.43 37.477 15.973 38.473 15.879 38.711 cv
15.867 38.711 li
15.867 37.477 li
14.234 37.609 li
14.234 37.957 li
15.051 37.957 15.145 38.039 15.145 38.629 cv
15.145 41.879 li
15.145 42.422 15.012 42.422 14.234 42.422 cv
14.234 42.77 li
14.547 42.742 15.195 42.742 15.531 42.742 cv
15.879 42.742 16.527 42.742 16.836 42.77 cv
16.836 42.422 li
16.07 42.422 15.926 42.422 15.926 41.879 cv
15.926 39.648 li
15.926 38.387 16.754 37.715 17.496 37.715 cv
18.242 37.715 18.41 38.328 18.41 39.059 cv
18.41 41.879 li
18.41 42.422 18.277 42.422 17.496 42.422 cv
17.496 42.77 li
17.809 42.742 18.457 42.742 18.793 42.742 cv
19.141 42.742 19.789 42.742 20.102 42.77 cv
20.102 42.422 li
19.5 42.422 19.203 42.422 19.191 42.059 cv
cp
f
23.316 44.75 mo
22.551 44.75 22.406 44.75 22.406 44.207 cv
22.406 42.121 li
22.621 42.422 23.113 42.887 23.883 42.887 cv
25.262 42.887 26.473 41.723 26.473 40.176 cv
26.473 38.652 25.344 37.477 24.039 37.477 cv
22.98 37.477 22.418 38.23 22.383 38.281 cv
22.383 37.477 li
20.715 37.609 li
20.715 37.957 li
21.555 37.957 21.625 38.039 21.625 38.566 cv
21.625 44.207 li
21.625 44.75 21.492 44.75 20.715 44.75 cv
20.715 45.098 li
21.023 45.07 21.672 45.07 22.008 45.07 cv
22.355 45.07 23.004 45.07 23.316 45.098 cv
cp
22.406 38.941 mo
22.406 38.711 22.406 38.699 22.539 38.508 cv
22.898 37.969 23.484 37.738 23.941 37.738 cv
24.84 37.738 25.562 38.832 25.562 40.176 cv
25.562 41.605 24.746 42.648 23.82 42.648 cv
23.449 42.648 23.102 42.492 22.859 42.266 cv
22.586 41.988 22.406 41.75 22.406 41.41 cv
cp
f
30.555 37.609 mo
30.555 37.957 li
31.367 37.957 31.465 38.039 31.465 38.629 cv
31.465 40.777 li
31.465 41.797 30.926 42.648 30.023 42.648 cv
29.039 42.648 28.98 42.086 28.98 41.449 cv
28.98 37.477 li
27.289 37.609 li
27.289 37.957 li
28.199 37.957 28.199 37.992 28.199 39.059 cv
28.199 40.859 li
28.199 41.605 28.199 42.035 28.562 42.434 cv
28.848 42.742 29.34 42.887 29.953 42.887 cv
30.156 42.887 30.539 42.887 30.949 42.539 cv
31.297 42.266 31.488 41.809 31.488 41.809 cv
31.488 42.887 li
33.156 42.77 li
33.156 42.422 li
32.34 42.422 32.246 42.336 32.246 41.75 cv
32.246 37.477 li
cp
f
35.449 37.945 mo
37.141 37.945 li
37.141 37.598 li
35.449 37.598 li
35.449 35.387 li
35.184 35.387 li
35.172 36.516 34.742 37.668 33.648 37.703 cv
33.648 37.945 li
34.668 37.945 li
34.668 41.281 li
34.668 42.613 35.559 42.887 36.191 42.887 cv
36.949 42.887 37.344 42.145 37.344 41.281 cv
37.344 40.598 li
37.082 40.598 li
37.082 41.258 li
37.082 42.121 36.734 42.625 36.266 42.625 cv
35.449 42.625 35.449 41.508 35.449 41.305 cv
cp
f
106.738 2.48801 mo
106.738 2.047 106.773 1.92599 107.637 1.92599 cv
107.879 1.92599 li
107.879 1.578 li
107.59 1.60199 106.605 1.60199 106.258 1.60199 cv
105.898 1.60199 104.914 1.60199 104.625 1.578 cv
104.625 1.92599 li
104.867 1.92599 li
105.73 1.92599 105.766 2.047 105.766 2.48801 cv
105.766 5.336 li
102.18 5.336 li
102.18 2.48801 li
102.18 2.047 102.215 1.92599 103.078 1.92599 cv
103.316 1.92599 li
103.316 1.578 li
103.031 1.60199 102.047 1.60199 101.699 1.60199 cv
101.34 1.60199 100.355 1.60199 100.066 1.578 cv
100.066 1.92599 li
100.305 1.92599 li
101.172 1.92599 101.207 2.047 101.207 2.48801 cv
101.207 8.86301 li
101.207 9.30499 101.172 9.42599 100.305 9.42599 cv
100.066 9.42599 li
100.066 9.77301 li
100.355 9.75 101.34 9.75 101.688 9.75 cv
102.047 9.75 103.031 9.75 103.316 9.77301 cv
103.316 9.42599 li
103.078 9.42599 li
102.215 9.42599 102.18 9.30499 102.18 8.86301 cv
102.18 5.68399 li
105.766 5.68399 li
105.766 8.86301 li
105.766 9.30499 105.73 9.42599 104.867 9.42599 cv
104.625 9.42599 li
104.625 9.77301 li
104.914 9.75 105.898 9.75 106.246 9.75 cv
106.605 9.75 107.59 9.75 107.879 9.77301 cv
107.879 9.42599 li
107.637 9.42599 li
106.773 9.42599 106.738 9.30499 106.738 8.86301 cv
cp
.961364 .838682 0 0 cmyk
f
110.469 2.383 mo
110.469 2.07001 110.219 1.793 109.883 1.793 cv
109.57 1.793 109.305 2.047 109.305 2.371 cv
109.305 2.73001 109.594 2.957 109.883 2.957 cv
110.254 2.957 110.469 2.64499 110.469 2.383 cv
cp
108.812 4.61301 mo
108.812 4.961 li
109.582 4.961 109.691 5.035 109.691 5.621 cv
109.691 8.88699 li
109.691 9.42599 109.559 9.42599 108.777 9.42599 cv
108.777 9.77301 li
109.113 9.75 109.691 9.75 110.039 9.75 cv
110.172 9.75 110.867 9.75 111.273 9.77301 cv
111.273 9.42599 li
110.492 9.42599 110.445 9.367 110.445 8.89801 cv
110.445 4.48001 li
cp
f
115.246 1.578 mo
115.246 1.92599 li
116.062 1.92599 116.156 2.01199 116.156 2.59799 cv
116.156 5.25 li
115.906 4.90201 115.391 4.48001 114.656 4.48001 cv
113.266 4.48001 112.066 5.65601 112.066 7.19501 cv
112.066 8.71899 113.207 9.89499 114.527 9.89499 cv
115.438 9.89499 115.965 9.293 116.133 9.06601 cv
116.133 9.89499 li
117.824 9.77301 li
117.824 9.42599 li
117.012 9.42599 116.914 9.34399 116.914 8.754 cv
116.914 1.44501 li
cp
116.133 8.371 mo
116.133 8.586 116.133 8.621 115.965 8.88699 cv
115.68 9.30499 115.188 9.65201 114.586 9.65201 cv
114.273 9.65201 112.977 9.535 112.977 7.207 cv
112.977 6.34399 113.121 5.86301 113.387 5.465 cv
113.625 5.09399 114.105 4.72299 114.707 4.72299 cv
115.449 4.72299 115.871 5.26199 115.988 5.453 cv
116.133 5.65601 116.133 5.68399 116.133 5.89801 cv
cp
f
121.773 1.578 mo
121.773 1.92599 li
122.59 1.92599 122.684 2.01199 122.684 2.59799 cv
122.684 5.25 li
122.434 4.90201 121.918 4.48001 121.184 4.48001 cv
119.793 4.48001 118.594 5.65601 118.594 7.19501 cv
118.594 8.71899 119.734 9.89499 121.055 9.89499 cv
121.965 9.89499 122.492 9.293 122.66 9.06601 cv
122.66 9.89499 li
124.352 9.77301 li
124.352 9.42599 li
123.539 9.42599 123.441 9.34399 123.441 8.754 cv
123.441 1.44501 li
cp
122.66 8.371 mo
122.66 8.586 122.66 8.621 122.492 8.88699 cv
122.207 9.30499 121.715 9.65201 121.113 9.65201 cv
120.801 9.65201 119.504 9.535 119.504 7.207 cv
119.504 6.34399 119.648 5.86301 119.914 5.465 cv
120.152 5.09399 120.633 4.72299 121.234 4.72299 cv
121.977 4.72299 122.398 5.26199 122.516 5.453 cv
122.66 5.65601 122.66 5.68399 122.66 5.89801 cv
cp
f
129.297 6.98801 mo
129.562 6.98801 129.586 6.98801 129.586 6.76199 cv
129.586 5.55099 128.938 4.422 127.484 4.422 cv
126.117 4.422 125.062 5.65601 125.062 7.14499 cv
125.062 8.73001 126.285 9.89499 127.617 9.89499 cv
129.047 9.89499 129.586 8.59799 129.586 8.34799 cv
129.586 8.27301 129.523 8.22699 129.453 8.22699 cv
129.355 8.22699 129.332 8.285 129.309 8.34799 cv
128.996 9.35501 128.191 9.629 127.688 9.629 cv
127.184 9.629 125.973 9.293 125.973 7.21899 cv
125.973 6.98801 li
cp
125.984 6.76199 mo
126.082 4.879 127.137 4.66 127.473 4.66 cv
128.758 4.66 128.828 6.35501 128.84 6.76199 cv
cp
f
135.262 6.85901 mo
135.262 5.742 135.262 5.40601 134.988 5.02301 cv
134.641 4.55499 134.074 4.48001 133.668 4.48001 cv
132.504 4.48001 132.047 5.47699 131.949 5.71899 cv
131.938 5.71899 li
131.938 4.48001 li
130.309 4.61301 li
130.309 4.961 li
131.125 4.961 131.219 5.047 131.219 5.633 cv
131.219 8.88699 li
131.219 9.42599 131.086 9.42599 130.309 9.42599 cv
130.309 9.77301 li
130.617 9.75 131.266 9.75 131.602 9.75 cv
131.949 9.75 132.598 9.75 132.91 9.77301 cv
132.91 9.42599 li
132.145 9.42599 132 9.42599 132 8.88699 cv
132 6.65201 li
132 5.39499 132.828 4.72299 133.57 4.72299 cv
134.316 4.72299 134.484 5.336 134.484 6.06601 cv
134.484 8.88699 li
134.484 9.42599 134.352 9.42599 133.57 9.42599 cv
133.57 9.77301 li
133.883 9.75 134.531 9.75 134.867 9.75 cv
135.215 9.75 135.863 9.75 136.176 9.77301 cv
136.176 9.42599 li
135.574 9.42599 135.273 9.42599 135.262 9.06601 cv
cp
f
201.773 74.027 mo
201.773 71.543 199.949 69.648 197.859 69.648 cv
195.723 69.648 193.938 71.566 193.938 74.027 cv
193.938 76.465 195.75 78.348 197.848 78.348 cv
199.996 78.348 201.773 76.441 201.773 74.027 cv
cp
197.859 78.07 mo
196.637 78.07 195.051 76.918 195.051 73.848 cv
195.051 70.906 196.719 69.91 197.848 69.91 cv
199.035 69.91 200.656 70.945 200.656 73.848 cv
200.656 76.969 199.023 78.07 197.859 78.07 cv
cp
.845304 .345006 1 .00607309 cmyk
f
206.074 72.938 mo
206.074 73.285 li
206.891 73.285 206.988 73.367 206.988 73.957 cv
206.988 76.105 li
206.988 77.125 206.445 77.977 205.547 77.977 cv
204.562 77.977 204.504 77.41 204.504 76.777 cv
204.504 72.805 li
202.812 72.938 li
202.812 73.285 li
203.723 73.285 203.723 73.32 203.723 74.387 cv
203.723 76.188 li
203.723 76.934 203.723 77.363 204.082 77.758 cv
204.371 78.07 204.863 78.215 205.477 78.215 cv
205.68 78.215 206.062 78.215 206.473 77.867 cv
206.82 77.59 207.012 77.137 207.012 77.137 cv
207.012 78.215 li
208.68 78.098 li
208.68 77.746 li
207.863 77.746 207.766 77.664 207.766 77.074 cv
207.766 72.805 li
cp
f
210.969 73.273 mo
212.664 73.273 li
212.664 72.922 li
210.969 72.922 li
210.969 70.715 li
210.707 70.715 li
210.695 71.844 210.262 72.996 209.172 73.031 cv
209.172 73.273 li
210.191 73.273 li
210.191 76.609 li
210.191 77.941 211.078 78.215 211.715 78.215 cv
212.469 78.215 212.867 77.473 212.867 76.609 cv
212.867 75.922 li
212.602 75.922 li
212.602 76.582 li
212.602 77.449 212.254 77.953 211.785 77.953 cv
210.969 77.953 210.969 76.836 210.969 76.633 cv
cp
f
216.465 80.074 mo
215.695 80.074 215.551 80.074 215.551 79.535 cv
215.551 77.449 li
215.77 77.746 216.262 78.215 217.027 78.215 cv
218.406 78.215 219.621 77.051 219.621 75.504 cv
219.621 73.98 218.492 72.805 217.184 72.805 cv
216.129 72.805 215.562 73.559 215.527 73.609 cv
215.527 72.805 li
213.859 72.938 li
213.859 73.285 li
214.699 73.285 214.773 73.367 214.773 73.895 cv
214.773 79.535 li
214.773 80.074 214.641 80.074 213.859 80.074 cv
213.859 80.422 li
214.172 80.398 214.82 80.398 215.156 80.398 cv
215.504 80.398 216.152 80.398 216.465 80.422 cv
cp
215.551 74.27 mo
215.551 74.039 215.551 74.027 215.684 73.836 cv
216.043 73.297 216.633 73.066 217.09 73.066 cv
217.988 73.066 218.707 74.16 218.707 75.504 cv
218.707 76.934 217.891 77.977 216.969 77.977 cv
216.598 77.977 216.25 77.82 216.008 77.59 cv
215.73 77.316 215.551 77.074 215.551 76.738 cv
cp
f
223.699 72.938 mo
223.699 73.285 li
224.516 73.285 224.609 73.367 224.609 73.957 cv
224.609 76.105 li
224.609 77.125 224.07 77.977 223.172 77.977 cv
222.188 77.977 222.129 77.41 222.129 76.777 cv
222.129 72.805 li
220.434 72.938 li
220.434 73.285 li
221.348 73.285 221.348 73.32 221.348 74.387 cv
221.348 76.188 li
221.348 76.934 221.348 77.363 221.707 77.758 cv
221.996 78.07 222.488 78.215 223.098 78.215 cv
223.305 78.215 223.688 78.215 224.094 77.867 cv
224.441 77.59 224.637 77.137 224.637 77.137 cv
224.637 78.215 li
226.305 78.098 li
226.305 77.746 li
225.488 77.746 225.391 77.664 225.391 77.074 cv
225.391 72.805 li
cp
f
228.594 73.273 mo
230.289 73.273 li
230.289 72.922 li
228.594 72.922 li
228.594 70.715 li
228.332 70.715 li
228.32 71.844 227.887 72.996 226.797 73.031 cv
226.797 73.273 li
227.816 73.273 li
227.816 76.609 li
227.816 77.941 228.703 78.215 229.34 78.215 cv
230.094 78.215 230.492 77.473 230.492 76.609 cv
230.492 75.922 li
230.227 75.922 li
230.227 76.582 li
230.227 77.449 229.879 77.953 229.41 77.953 cv
228.594 77.953 228.594 76.836 228.594 76.633 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

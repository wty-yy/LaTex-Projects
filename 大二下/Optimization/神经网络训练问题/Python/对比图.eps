%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <5BF9><6BD4><56FE>.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yy
%%CreationDate: 2022/4/21, 0:07:42
%%BoundingBox: 0 0 504 486
%%HiResBoundingBox: 0 0 503.8000 485.1701
%%CropBox: 0 0 503.8000 485.1701
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2022-04-21T00:05:29+08:00"
   xmp:CreatorTool="Matplotlib v3.5.1, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.5.1"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -485.17 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 485.17 li
503.8 485.17 li
503.8 0 li
cp
clp
0 485.17 mo
503.8 485.17 li
503.8 0 li
0 0 li
0 485.17 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
50.2 450.72 mo
496.6 450.72 li
496.6 7.2 li
50.2 7.2 li
50.2 450.72 li
f
70.4909 450.72 mo
70.4909 454.22 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
70.4909 450.72 mo
70.4909 454.22 li
@
58.4909 459.036 mo
57.6029 459.036 56.8589 459.708 56.2829 461.052 cv
55.6829 462.396 55.3949 464.196 55.3949 466.428 cv
55.3949 468.828 55.6829 470.676 56.2829 471.972 cv
56.8589 473.292 57.6269 473.94 58.5389 473.94 cv
59.4509 473.94 60.1709 473.292 60.6989 471.972 cv
61.2269 470.676 61.4909 468.828 61.4909 466.428 cv
61.4909 464.196 61.2269 462.396 60.7469 461.052 cv
60.2429 459.708 59.4989 459.036 58.4909 459.036 cv
cp
58.4909 474.684 mo
57.0989 474.684 55.9469 473.964 55.0109 472.524 cv
54.0749 471.084 53.6189 469.068 53.6189 466.428 cv
53.6189 464.004 54.0509 462.036 54.9629 460.548 cv
55.8749 459.06 57.0509 458.292 58.4909 458.292 cv
59.8589 458.292 60.9869 459.012 61.8989 460.452 cv
62.8109 461.892 63.2669 463.884 63.2669 466.452 cv
63.2669 469.02 62.8109 471.036 61.8989 472.5 cv
60.9869 473.964 59.8589 474.684 58.4909 474.684 cv
cp
f
67.4909 474.78 mo
67.1069 474.78 66.7949 474.66 66.5069 474.42 cv
66.2189 474.18 66.0749 473.82 66.0749 473.388 cv
66.0749 472.956 66.2189 472.596 66.5069 472.356 cv
66.7949 472.116 67.1069 471.972 67.4909 471.972 cv
67.8509 471.972 68.1869 472.116 68.4749 472.404 cv
68.7629 472.692 68.9069 473.004 68.9069 473.364 cv
68.9069 473.82 68.7629 474.18 68.4749 474.42 cv
68.1869 474.66 67.8509 474.78 67.4909 474.78 cv
cp
f
82.4909 459.036 mo
81.6029 459.036 80.8589 459.708 80.2829 461.052 cv
79.6829 462.396 79.3949 464.196 79.3949 466.428 cv
79.3949 468.828 79.6829 470.676 80.2829 471.972 cv
80.8589 473.292 81.6269 473.94 82.5389 473.94 cv
83.4509 473.94 84.1709 473.292 84.6989 471.972 cv
85.2269 470.676 85.4909 468.828 85.4909 466.428 cv
85.4909 464.196 85.2269 462.396 84.7469 461.052 cv
84.2429 459.708 83.4989 459.036 82.4909 459.036 cv
cp
82.4909 474.684 mo
81.0989 474.684 79.9469 473.964 79.0109 472.524 cv
78.0749 471.084 77.6189 469.068 77.6189 466.428 cv
77.6189 464.004 78.0509 462.036 78.9629 460.548 cv
79.8749 459.06 81.0509 458.292 82.4909 458.292 cv
83.8589 458.292 84.9869 459.012 85.8989 460.452 cv
86.8109 461.892 87.2669 463.884 87.2669 466.452 cv
87.2669 469.02 86.8109 471.036 85.8989 472.5 cv
84.9869 473.964 83.8589 474.684 82.4909 474.684 cv
cp
f
151.655 450.72 mo
151.655 454.22 li
f
151.655 450.72 mo
151.655 454.22 li
@
139.655 459.036 mo
138.767 459.036 138.023 459.708 137.447 461.052 cv
136.847 462.396 136.559 464.196 136.559 466.428 cv
136.559 468.828 136.847 470.676 137.447 471.972 cv
138.023 473.292 138.791 473.94 139.703 473.94 cv
140.615 473.94 141.335 473.292 141.863 471.972 cv
142.391 470.676 142.655 468.828 142.655 466.428 cv
142.655 464.196 142.391 462.396 141.911 461.052 cv
141.407 459.708 140.663 459.036 139.655 459.036 cv
cp
139.655 474.684 mo
138.263 474.684 137.111 473.964 136.175 472.524 cv
135.239 471.084 134.783 469.068 134.783 466.428 cv
134.783 464.004 135.215 462.036 136.127 460.548 cv
137.039 459.06 138.215 458.292 139.655 458.292 cv
141.023 458.292 142.151 459.012 143.063 460.452 cv
143.975 461.892 144.431 463.884 144.431 466.452 cv
144.431 469.02 143.975 471.036 143.063 472.5 cv
142.151 473.964 141.023 474.684 139.655 474.684 cv
cp
f
148.655 474.78 mo
148.271 474.78 147.959 474.66 147.671 474.42 cv
147.383 474.18 147.239 473.82 147.239 473.388 cv
147.239 472.956 147.383 472.596 147.671 472.356 cv
147.959 472.116 148.271 471.972 148.655 471.972 cv
149.015 471.972 149.351 472.116 149.639 472.404 cv
149.927 472.692 150.071 473.004 150.071 473.364 cv
150.071 473.82 149.927 474.18 149.639 474.42 cv
149.351 474.66 149.015 474.78 148.655 474.78 cv
cp
f
166.367 462.396 mo
166.367 461.292 166.103 460.428 165.623 459.828 cv
165.119 459.252 164.375 458.94 163.367 458.94 cv
162.599 458.94 161.975 459.156 161.447 459.564 cv
160.919 459.972 160.655 460.476 160.655 461.1 cv
160.655 461.484 160.775 461.796 161.039 462.036 cv
161.207 462.276 161.303 462.54 161.303 462.78 cv
161.303 463.116 161.207 463.356 161.063 463.5 cv
160.919 463.644 160.679 463.716 160.367 463.716 cv
159.983 463.716 159.695 463.62 159.479 463.404 cv
159.263 463.188 159.167 462.828 159.167 462.324 cv
159.167 461.028 159.623 460.02 160.559 459.324 cv
161.495 458.652 162.503 458.292 163.559 458.292 cv
165.047 458.292 166.175 458.676 166.895 459.42 cv
167.615 460.164 167.975 461.1 167.975 462.228 cv
167.975 462.996 167.783 463.74 167.447 464.484 cv
167.111 465.228 166.559 465.948 165.815 466.62 cv
163.991 468.396 162.599 469.812 161.639 470.892 cv
160.655 471.996 160.079 472.716 159.911 473.1 cv
165.431 473.1 li
165.983 473.1 166.439 472.884 166.823 472.452 cv
167.207 472.02 167.447 471.348 167.591 470.46 cv
168.167 470.46 li
167.591 474.492 li
158.879 474.492 li
158.879 473.292 li
159.167 472.716 159.695 471.996 160.415 471.132 cv
161.135 470.268 162.071 469.236 163.271 468.036 cv
164.327 466.98 165.119 465.972 165.623 465.036 cv
166.103 464.1 166.367 463.212 166.367 462.396 cv
cp
f
232.818 450.72 mo
232.818 454.22 li
f
232.818 450.72 mo
232.818 454.22 li
@
220.818 459.036 mo
219.93 459.036 219.186 459.708 218.61 461.052 cv
218.01 462.396 217.722 464.196 217.722 466.428 cv
217.722 468.828 218.01 470.676 218.61 471.972 cv
219.186 473.292 219.954 473.94 220.866 473.94 cv
221.778 473.94 222.498 473.292 223.026 471.972 cv
223.554 470.676 223.818 468.828 223.818 466.428 cv
223.818 464.196 223.554 462.396 223.074 461.052 cv
222.57 459.708 221.826 459.036 220.818 459.036 cv
cp
220.818 474.684 mo
219.426 474.684 218.274 473.964 217.338 472.524 cv
216.402 471.084 215.946 469.068 215.946 466.428 cv
215.946 464.004 216.378 462.036 217.29 460.548 cv
218.202 459.06 219.378 458.292 220.818 458.292 cv
222.186 458.292 223.314 459.012 224.226 460.452 cv
225.138 461.892 225.594 463.884 225.594 466.452 cv
225.594 469.02 225.138 471.036 224.226 472.5 cv
223.314 473.964 222.186 474.684 220.818 474.684 cv
cp
f
229.818 474.78 mo
229.434 474.78 229.122 474.66 228.834 474.42 cv
228.546 474.18 228.402 473.82 228.402 473.388 cv
228.402 472.956 228.546 472.596 228.834 472.356 cv
229.122 472.116 229.434 471.972 229.818 471.972 cv
230.178 471.972 230.514 472.116 230.802 472.404 cv
231.09 472.692 231.234 473.004 231.234 473.364 cv
231.234 473.82 231.09 474.18 230.802 474.42 cv
230.514 474.66 230.178 474.78 229.818 474.78 cv
cp
f
247.434 472.716 mo
247.434 473.148 247.554 473.46 247.818 473.652 cv
248.058 473.844 248.418 473.94 248.85 473.94 cv
249.69 473.94 li
249.69 474.492 li
243.498 474.492 li
243.498 473.94 li
244.53 473.94 li
245.034 473.94 245.394 473.844 245.61 473.652 cv
245.826 473.46 245.946 473.148 245.946 472.716 cv
245.946 469.62 li
239.658 469.62 li
239.658 469.164 li
246.498 458.292 li
247.434 458.292 li
247.434 469.068 li
249.978 469.068 li
249.978 469.62 li
247.434 469.62 li
247.434 472.716 li
cp
245.85 460.62 mo
240.498 469.068 li
245.946 469.068 li
245.946 460.62 li
245.85 460.62 li
cp
f
313.982 450.72 mo
313.982 454.22 li
f
313.982 450.72 mo
313.982 454.22 li
@
301.982 459.036 mo
301.094 459.036 300.35 459.708 299.774 461.052 cv
299.174 462.396 298.886 464.196 298.886 466.428 cv
298.886 468.828 299.174 470.676 299.774 471.972 cv
300.35 473.292 301.118 473.94 302.03 473.94 cv
302.942 473.94 303.662 473.292 304.19 471.972 cv
304.718 470.676 304.982 468.828 304.982 466.428 cv
304.982 464.196 304.718 462.396 304.238 461.052 cv
303.734 459.708 302.99 459.036 301.982 459.036 cv
cp
301.982 474.684 mo
300.59 474.684 299.438 473.964 298.502 472.524 cv
297.566 471.084 297.11 469.068 297.11 466.428 cv
297.11 464.004 297.542 462.036 298.454 460.548 cv
299.366 459.06 300.542 458.292 301.982 458.292 cv
303.35 458.292 304.478 459.012 305.39 460.452 cv
306.302 461.892 306.758 463.884 306.758 466.452 cv
306.758 469.02 306.302 471.036 305.39 472.5 cv
304.478 473.964 303.35 474.684 301.982 474.684 cv
cp
f
310.982 474.78 mo
310.598 474.78 310.286 474.66 309.998 474.42 cv
309.71 474.18 309.566 473.82 309.566 473.388 cv
309.566 472.956 309.71 472.596 309.998 472.356 cv
310.286 472.116 310.598 471.972 310.982 471.972 cv
311.342 471.972 311.678 472.116 311.966 472.404 cv
312.254 472.692 312.398 473.004 312.398 473.364 cv
312.398 473.82 312.254 474.18 311.966 474.42 cv
311.678 474.66 311.342 474.78 310.982 474.78 cv
cp
f
322.886 468.132 mo
322.886 470.004 323.198 471.468 323.87 472.5 cv
324.518 473.532 325.31 474.036 326.246 474.036 cv
327.182 474.036 327.902 473.7 328.406 473.004 cv
328.91 472.332 329.174 471.036 329.174 469.164 cv
329.174 467.916 328.886 466.956 328.358 466.26 cv
327.83 465.588 327.206 465.228 326.486 465.228 cv
325.766 465.228 325.118 465.444 324.518 465.828 cv
323.918 466.236 323.366 467.004 322.886 468.132 cv
cp
326.534 464.292 mo
328.022 464.292 329.102 464.796 329.774 465.804 cv
330.422 466.812 330.758 467.916 330.758 469.164 cv
330.758 471.036 330.302 472.428 329.39 473.34 cv
328.478 474.252 327.446 474.684 326.27 474.684 cv
324.566 474.684 323.27 474.06 322.406 472.764 cv
321.542 471.492 321.11 469.644 321.11 467.196 cv
321.11 464.316 321.638 462.132 322.694 460.596 cv
323.75 459.06 325.19 458.292 327.014 458.292 cv
327.878 458.292 328.598 458.556 329.126 459.036 cv
329.654 459.54 329.918 459.972 329.918 460.356 cv
329.918 460.74 329.822 461.004 329.678 461.196 cv
329.534 461.388 329.27 461.46 328.934 461.46 cv
328.598 461.46 328.334 461.388 328.19 461.244 cv
328.022 461.1 327.95 460.86 327.95 460.524 cv
327.95 460.428 327.974 460.308 328.046 460.164 cv
328.046 460.044 328.046 459.924 328.046 459.78 cv
328.046 459.54 327.95 459.324 327.758 459.18 cv
327.566 459.036 327.23 458.94 326.726 458.94 cv
325.67 458.94 324.758 459.444 324.014 460.404 cv
323.246 461.364 322.886 463.476 322.886 466.716 cv
323.27 465.9 323.774 465.3 324.446 464.892 cv
325.094 464.508 325.79 464.292 326.534 464.292 cv
cp
f
395.145 450.72 mo
395.145 454.22 li
f
395.145 450.72 mo
395.145 454.22 li
@
383.145 459.036 mo
382.257 459.036 381.513 459.708 380.937 461.052 cv
380.337 462.396 380.049 464.196 380.049 466.428 cv
380.049 468.828 380.337 470.676 380.937 471.972 cv
381.513 473.292 382.281 473.94 383.193 473.94 cv
384.105 473.94 384.825 473.292 385.353 471.972 cv
385.881 470.676 386.145 468.828 386.145 466.428 cv
386.145 464.196 385.881 462.396 385.401 461.052 cv
384.897 459.708 384.153 459.036 383.145 459.036 cv
cp
383.145 474.684 mo
381.753 474.684 380.601 473.964 379.665 472.524 cv
378.729 471.084 378.273 469.068 378.273 466.428 cv
378.273 464.004 378.705 462.036 379.617 460.548 cv
380.529 459.06 381.705 458.292 383.145 458.292 cv
384.513 458.292 385.641 459.012 386.553 460.452 cv
387.465 461.892 387.921 463.884 387.921 466.452 cv
387.921 469.02 387.465 471.036 386.553 472.5 cv
385.641 473.964 384.513 474.684 383.145 474.684 cv
cp
f
392.145 474.78 mo
391.761 474.78 391.449 474.66 391.161 474.42 cv
390.873 474.18 390.729 473.82 390.729 473.388 cv
390.729 472.956 390.873 472.596 391.161 472.356 cv
391.449 472.116 391.761 471.972 392.145 471.972 cv
392.505 471.972 392.841 472.116 393.129 472.404 cv
393.417 472.692 393.561 473.004 393.561 473.364 cv
393.561 473.82 393.417 474.18 393.129 474.42 cv
392.841 474.66 392.505 474.78 392.145 474.78 cv
cp
f
403.497 470.652 mo
403.497 471.66 403.809 472.476 404.481 473.1 cv
405.129 473.724 405.945 474.036 406.953 474.036 cv
408.129 474.036 408.993 473.724 409.521 473.1 cv
410.049 472.476 410.337 471.708 410.337 470.748 cv
410.337 469.932 409.953 469.164 409.209 468.42 cv
408.441 467.676 407.313 466.98 405.825 466.356 cv
405.057 466.86 404.481 467.484 404.097 468.228 cv
403.689 468.996 403.497 469.788 403.497 470.652 cv
cp
411.729 470.46 mo
411.729 471.66 411.273 472.668 410.409 473.484 cv
409.545 474.3 408.393 474.684 406.953 474.684 cv
405.633 474.684 404.505 474.3 403.569 473.484 cv
402.633 472.668 402.177 471.732 402.177 470.676 cv
402.177 469.62 402.441 468.708 402.969 467.94 cv
403.497 467.196 404.265 466.548 405.273 465.972 cv
404.385 465.54 403.713 465.012 403.257 464.34 cv
402.777 463.692 402.561 462.948 402.561 462.132 cv
402.561 461.076 402.945 460.164 403.761 459.42 cv
404.577 458.676 405.705 458.292 407.145 458.292 cv
408.441 458.292 409.521 458.676 410.337 459.42 cv
411.153 460.164 411.561 461.076 411.561 462.132 cv
411.561 462.9 411.321 463.596 410.841 464.244 cv
410.361 464.916 409.641 465.492 408.657 465.972 cv
409.713 466.596 410.481 467.292 410.985 468.036 cv
411.465 468.804 411.729 469.596 411.729 470.46 cv
cp
410.241 462.228 mo
410.241 461.364 409.977 460.596 409.473 459.924 cv
408.969 459.276 408.201 458.94 407.145 458.94 cv
405.945 458.94 405.105 459.252 404.601 459.876 cv
404.097 460.5 403.857 461.172 403.857 461.844 cv
403.857 462.54 404.217 463.212 404.937 463.86 cv
405.657 464.532 406.665 465.108 407.985 465.588 cv
408.729 465.228 409.281 464.772 409.665 464.196 cv
410.049 463.644 410.241 462.996 410.241 462.228 cv
cp
f
476.309 450.72 mo
476.309 454.22 li
f
476.309 450.72 mo
476.309 454.22 li
@
465.149 458.196 mo
465.149 472.428 li
465.149 472.956 465.293 473.34 465.605 473.58 cv
465.917 473.82 466.349 473.94 466.925 473.94 cv
467.861 473.94 li
467.861 474.492 li
461.021 474.492 li
461.021 473.94 li
461.861 473.94 li
462.485 473.94 462.941 473.82 463.229 473.58 cv
463.517 473.34 463.661 472.956 463.661 472.428 cv
463.661 461.1 li
463.661 460.86 463.565 460.644 463.421 460.5 cv
463.253 460.356 463.013 460.26 462.725 460.26 cv
461.021 460.26 li
461.021 459.684 li
461.861 459.684 li
462.605 459.684 463.205 459.564 463.685 459.324 cv
464.165 459.084 464.525 458.7 464.789 458.196 cv
465.149 458.196 li
cp
f
473.309 474.78 mo
472.925 474.78 472.613 474.66 472.325 474.42 cv
472.037 474.18 471.893 473.82 471.893 473.388 cv
471.893 472.956 472.037 472.596 472.325 472.356 cv
472.613 472.116 472.925 471.972 473.309 471.972 cv
473.669 471.972 474.005 472.116 474.293 472.404 cv
474.581 472.692 474.725 473.004 474.725 473.364 cv
474.725 473.82 474.581 474.18 474.293 474.42 cv
474.005 474.66 473.669 474.78 473.309 474.78 cv
cp
f
488.309 459.036 mo
487.421 459.036 486.677 459.708 486.101 461.052 cv
485.501 462.396 485.213 464.196 485.213 466.428 cv
485.213 468.828 485.501 470.676 486.101 471.972 cv
486.677 473.292 487.445 473.94 488.357 473.94 cv
489.269 473.94 489.989 473.292 490.517 471.972 cv
491.045 470.676 491.309 468.828 491.309 466.428 cv
491.309 464.196 491.045 462.396 490.565 461.052 cv
490.061 459.708 489.317 459.036 488.309 459.036 cv
cp
488.309 474.684 mo
486.917 474.684 485.765 473.964 484.829 472.524 cv
483.893 471.084 483.437 469.068 483.437 466.428 cv
483.437 464.004 483.869 462.036 484.781 460.548 cv
485.693 459.06 486.869 458.292 488.309 458.292 cv
489.677 458.292 490.805 459.012 491.717 460.452 cv
492.629 461.892 493.085 463.884 493.085 466.452 cv
493.085 469.02 492.629 471.036 491.717 472.5 cv
490.805 473.964 489.677 474.684 488.309 474.684 cv
cp
f
50.2 432.346 mo
46.7 432.346 li
f
50.2 432.346 mo
46.7 432.346 li
@
13.2 425.085 mo
12.312 425.085 11.568 425.757 10.992 427.1 cv
10.392 428.444 10.104 430.245 10.104 432.477 cv
10.104 434.876 10.392 436.724 10.992 438.021 cv
11.568 439.34 12.336 439.988 13.248 439.988 cv
14.16 439.988 14.88 439.34 15.408 438.021 cv
15.936 436.724 16.2 434.876 16.2 432.477 cv
16.2 430.245 15.936 428.444 15.456 427.1 cv
14.952 425.757 14.208 425.085 13.2 425.085 cv
cp
13.2 440.733 mo
11.808 440.733 10.656 440.013 9.72 438.573 cv
8.784 437.133 8.328 435.116 8.328 432.477 cv
8.328 430.052 8.76 428.085 9.672 426.596 cv
10.584 425.108 11.76 424.341 13.2 424.341 cv
14.568 424.341 15.696 425.06 16.608 426.5 cv
17.52 427.94 17.976 429.932 17.976 432.5 cv
17.976 435.069 17.52 437.085 16.608 438.548 cv
15.696 440.013 14.568 440.733 13.2 440.733 cv
cp
f
22.2 440.828 mo
21.816 440.828 21.504 440.708 21.216 440.469 cv
20.928 440.228 20.784 439.868 20.784 439.436 cv
20.784 439.004 20.928 438.645 21.216 438.405 cv
21.504 438.164 21.816 438.021 22.2 438.021 cv
22.56 438.021 22.896 438.164 23.184 438.453 cv
23.472 438.741 23.616 439.052 23.616 439.413 cv
23.616 439.868 23.472 440.228 23.184 440.469 cv
22.896 440.708 22.56 440.828 22.2 440.828 cv
cp
f
37.2 425.085 mo
36.312 425.085 35.568 425.757 34.992 427.1 cv
34.392 428.444 34.104 430.245 34.104 432.477 cv
34.104 434.876 34.392 436.724 34.992 438.021 cv
35.568 439.34 36.336 439.988 37.248 439.988 cv
38.16 439.988 38.88 439.34 39.408 438.021 cv
39.936 436.724 40.2 434.876 40.2 432.477 cv
40.2 430.245 39.936 428.444 39.456 427.1 cv
38.952 425.757 38.208 425.085 37.2 425.085 cv
cp
37.2 440.733 mo
35.808 440.733 34.656 440.013 33.72 438.573 cv
32.784 437.133 32.328 435.116 32.328 432.477 cv
32.328 430.052 32.76 428.085 33.672 426.596 cv
34.584 425.108 35.76 424.341 37.2 424.341 cv
38.568 424.341 39.696 425.06 40.608 426.5 cv
41.52 427.94 41.976 429.932 41.976 432.5 cv
41.976 435.069 41.52 437.085 40.608 438.548 cv
39.696 440.013 38.568 440.733 37.2 440.733 cv
cp
f
50.2 351.319 mo
46.7 351.319 li
f
50.2 351.319 mo
46.7 351.319 li
@
13.2 344.057 mo
12.312 344.057 11.568 344.729 10.992 346.073 cv
10.392 347.417 10.104 349.217 10.104 351.449 cv
10.104 353.849 10.392 355.697 10.992 356.993 cv
11.568 358.313 12.336 358.961 13.248 358.961 cv
14.16 358.961 14.88 358.313 15.408 356.993 cv
15.936 355.697 16.2 353.849 16.2 351.449 cv
16.2 349.217 15.936 347.417 15.456 346.073 cv
14.952 344.729 14.208 344.057 13.2 344.057 cv
cp
13.2 359.705 mo
11.808 359.705 10.656 358.985 9.72 357.545 cv
8.784 356.105 8.328 354.089 8.328 351.449 cv
8.328 349.025 8.76 347.057 9.672 345.569 cv
10.584 344.081 11.76 343.313 13.2 343.313 cv
14.568 343.313 15.696 344.033 16.608 345.473 cv
17.52 346.913 17.976 348.905 17.976 351.473 cv
17.976 354.041 17.52 356.057 16.608 357.521 cv
15.696 358.985 14.568 359.705 13.2 359.705 cv
cp
f
22.2 359.801 mo
21.816 359.801 21.504 359.681 21.216 359.441 cv
20.928 359.201 20.784 358.841 20.784 358.409 cv
20.784 357.977 20.928 357.617 21.216 357.377 cv
21.504 357.137 21.816 356.993 22.2 356.993 cv
22.56 356.993 22.896 357.137 23.184 357.425 cv
23.472 357.713 23.616 358.025 23.616 358.385 cv
23.616 358.841 23.472 359.201 23.184 359.441 cv
22.896 359.681 22.56 359.801 22.2 359.801 cv
cp
f
39.912 347.417 mo
39.912 346.313 39.648 345.449 39.168 344.849 cv
38.664 344.273 37.92 343.961 36.912 343.961 cv
36.144 343.961 35.52 344.177 34.992 344.585 cv
34.464 344.993 34.2 345.497 34.2 346.121 cv
34.2 346.505 34.32 346.817 34.584 347.057 cv
34.752 347.297 34.848 347.561 34.848 347.801 cv
34.848 348.137 34.752 348.377 34.608 348.521 cv
34.464 348.665 34.224 348.737 33.912 348.737 cv
33.528 348.737 33.24 348.641 33.024 348.425 cv
32.808 348.209 32.712 347.849 32.712 347.345 cv
32.712 346.049 33.168 345.041 34.104 344.345 cv
35.04 343.673 36.048 343.313 37.104 343.313 cv
38.592 343.313 39.72 343.697 40.44 344.441 cv
41.16 345.185 41.52 346.121 41.52 347.249 cv
41.52 348.017 41.328 348.761 40.992 349.505 cv
40.656 350.249 40.104 350.969 39.36 351.641 cv
37.536 353.417 36.144 354.833 35.184 355.913 cv
34.2 357.017 33.624 357.737 33.456 358.121 cv
38.976 358.121 li
39.528 358.121 39.984 357.905 40.368 357.473 cv
40.752 357.041 40.992 356.369 41.136 355.481 cv
41.712 355.481 li
41.136 359.513 li
32.424 359.513 li
32.424 358.313 li
32.712 357.737 33.24 357.017 33.96 356.153 cv
34.68 355.289 35.616 354.257 36.816 353.057 cv
37.872 352.001 38.664 350.993 39.168 350.057 cv
39.648 349.121 39.912 348.233 39.912 347.417 cv
cp
f
50.2 270.292 mo
46.7 270.292 li
f
50.2 270.292 mo
46.7 270.292 li
@
13.2 263.03 mo
12.312 263.03 11.568 263.702 10.992 265.046 cv
10.392 266.39 10.104 268.19 10.104 270.422 cv
10.104 272.822 10.392 274.67 10.992 275.966 cv
11.568 277.286 12.336 277.934 13.248 277.934 cv
14.16 277.934 14.88 277.286 15.408 275.966 cv
15.936 274.67 16.2 272.822 16.2 270.422 cv
16.2 268.19 15.936 266.39 15.456 265.046 cv
14.952 263.702 14.208 263.03 13.2 263.03 cv
cp
13.2 278.678 mo
11.808 278.678 10.656 277.958 9.72 276.518 cv
8.784 275.078 8.328 273.062 8.328 270.422 cv
8.328 267.998 8.76 266.03 9.672 264.542 cv
10.584 263.054 11.76 262.286 13.2 262.286 cv
14.568 262.286 15.696 263.006 16.608 264.446 cv
17.52 265.886 17.976 267.878 17.976 270.446 cv
17.976 273.014 17.52 275.03 16.608 276.494 cv
15.696 277.958 14.568 278.678 13.2 278.678 cv
cp
f
22.2 278.774 mo
21.816 278.774 21.504 278.654 21.216 278.414 cv
20.928 278.174 20.784 277.814 20.784 277.382 cv
20.784 276.95 20.928 276.59 21.216 276.35 cv
21.504 276.11 21.816 275.966 22.2 275.966 cv
22.56 275.966 22.896 276.11 23.184 276.398 cv
23.472 276.686 23.616 276.998 23.616 277.358 cv
23.616 277.814 23.472 278.174 23.184 278.414 cv
22.896 278.654 22.56 278.774 22.2 278.774 cv
cp
f
39.816 276.71 mo
39.816 277.142 39.936 277.454 40.2 277.646 cv
40.44 277.838 40.8 277.934 41.232 277.934 cv
42.072 277.934 li
42.072 278.486 li
35.88 278.486 li
35.88 277.934 li
36.912 277.934 li
37.416 277.934 37.776 277.838 37.992 277.646 cv
38.208 277.454 38.328 277.142 38.328 276.71 cv
38.328 273.614 li
32.04 273.614 li
32.04 273.158 li
38.88 262.286 li
39.816 262.286 li
39.816 273.062 li
42.36 273.062 li
42.36 273.614 li
39.816 273.614 li
39.816 276.71 li
cp
38.232 264.614 mo
32.88 273.062 li
38.328 273.062 li
38.328 264.614 li
38.232 264.614 li
cp
f
50.2 189.265 mo
46.7 189.265 li
f
50.2 189.265 mo
46.7 189.265 li
@
13.2 182.003 mo
12.312 182.003 11.568 182.675 10.992 184.019 cv
10.392 185.363 10.104 187.163 10.104 189.395 cv
10.104 191.795 10.392 193.643 10.992 194.939 cv
11.568 196.259 12.336 196.907 13.248 196.907 cv
14.16 196.907 14.88 196.259 15.408 194.939 cv
15.936 193.643 16.2 191.795 16.2 189.395 cv
16.2 187.163 15.936 185.363 15.456 184.019 cv
14.952 182.675 14.208 182.003 13.2 182.003 cv
cp
13.2 197.651 mo
11.808 197.651 10.656 196.931 9.72 195.491 cv
8.784 194.051 8.328 192.035 8.328 189.395 cv
8.328 186.971 8.76 185.003 9.672 183.515 cv
10.584 182.027 11.76 181.259 13.2 181.259 cv
14.568 181.259 15.696 181.979 16.608 183.419 cv
17.52 184.859 17.976 186.851 17.976 189.419 cv
17.976 191.987 17.52 194.003 16.608 195.467 cv
15.696 196.931 14.568 197.651 13.2 197.651 cv
cp
f
22.2 197.747 mo
21.816 197.747 21.504 197.627 21.216 197.387 cv
20.928 197.147 20.784 196.787 20.784 196.355 cv
20.784 195.923 20.928 195.563 21.216 195.323 cv
21.504 195.083 21.816 194.939 22.2 194.939 cv
22.56 194.939 22.896 195.083 23.184 195.371 cv
23.472 195.659 23.616 195.971 23.616 196.331 cv
23.616 196.787 23.472 197.147 23.184 197.387 cv
22.896 197.627 22.56 197.747 22.2 197.747 cv
cp
f
34.104 191.099 mo
34.104 192.971 34.416 194.435 35.088 195.467 cv
35.736 196.499 36.528 197.003 37.464 197.003 cv
38.4 197.003 39.12 196.667 39.624 195.971 cv
40.128 195.299 40.392 194.003 40.392 192.131 cv
40.392 190.883 40.104 189.923 39.576 189.227 cv
39.048 188.555 38.424 188.195 37.704 188.195 cv
36.984 188.195 36.336 188.411 35.736 188.795 cv
35.136 189.203 34.584 189.971 34.104 191.099 cv
cp
37.752 187.259 mo
39.24 187.259 40.32 187.763 40.992 188.771 cv
41.64 189.779 41.976 190.883 41.976 192.131 cv
41.976 194.003 41.52 195.395 40.608 196.307 cv
39.696 197.219 38.664 197.651 37.488 197.651 cv
35.784 197.651 34.488 197.027 33.624 195.731 cv
32.76 194.459 32.328 192.611 32.328 190.163 cv
32.328 187.283 32.856 185.099 33.912 183.563 cv
34.968 182.027 36.408 181.259 38.232 181.259 cv
39.096 181.259 39.816 181.523 40.344 182.003 cv
40.872 182.507 41.136 182.939 41.136 183.323 cv
41.136 183.707 41.04 183.971 40.896 184.163 cv
40.752 184.355 40.488 184.427 40.152 184.427 cv
39.816 184.427 39.552 184.355 39.408 184.211 cv
39.24 184.067 39.168 183.827 39.168 183.491 cv
39.168 183.395 39.192 183.275 39.264 183.131 cv
39.264 183.011 39.264 182.891 39.264 182.747 cv
39.264 182.507 39.168 182.291 38.976 182.147 cv
38.784 182.003 38.448 181.907 37.944 181.907 cv
36.888 181.907 35.976 182.411 35.232 183.371 cv
34.464 184.331 34.104 186.443 34.104 189.683 cv
34.488 188.867 34.992 188.267 35.664 187.859 cv
36.312 187.475 37.008 187.259 37.752 187.259 cv
cp
f
50.2 108.237 mo
46.7 108.237 li
f
50.2 108.237 mo
46.7 108.237 li
@
13.2 100.976 mo
12.312 100.976 11.568 101.648 10.992 102.992 cv
10.392 104.336 10.104 106.136 10.104 108.368 cv
10.104 110.768 10.392 112.616 10.992 113.912 cv
11.568 115.232 12.336 115.88 13.248 115.88 cv
14.16 115.88 14.88 115.232 15.408 113.912 cv
15.936 112.616 16.2 110.768 16.2 108.368 cv
16.2 106.136 15.936 104.336 15.456 102.992 cv
14.952 101.648 14.208 100.976 13.2 100.976 cv
cp
13.2 116.624 mo
11.808 116.624 10.656 115.904 9.72 114.464 cv
8.784 113.024 8.328 111.008 8.328 108.368 cv
8.328 105.944 8.76 103.976 9.672 102.488 cv
10.584 101 11.76 100.232 13.2 100.232 cv
14.568 100.232 15.696 100.952 16.608 102.392 cv
17.52 103.832 17.976 105.824 17.976 108.392 cv
17.976 110.96 17.52 112.976 16.608 114.44 cv
15.696 115.904 14.568 116.624 13.2 116.624 cv
cp
f
22.2 116.72 mo
21.816 116.72 21.504 116.6 21.216 116.36 cv
20.928 116.12 20.784 115.76 20.784 115.328 cv
20.784 114.896 20.928 114.536 21.216 114.296 cv
21.504 114.056 21.816 113.912 22.2 113.912 cv
22.56 113.912 22.896 114.056 23.184 114.344 cv
23.472 114.632 23.616 114.944 23.616 115.304 cv
23.616 115.76 23.472 116.12 23.184 116.36 cv
22.896 116.6 22.56 116.72 22.2 116.72 cv
cp
f
33.552 112.592 mo
33.552 113.6 33.864 114.416 34.536 115.04 cv
35.184 115.664 36 115.976 37.008 115.976 cv
38.184 115.976 39.048 115.664 39.576 115.04 cv
40.104 114.416 40.392 113.648 40.392 112.688 cv
40.392 111.872 40.008 111.104 39.264 110.36 cv
38.496 109.616 37.368 108.92 35.88 108.296 cv
35.112 108.8 34.536 109.424 34.152 110.168 cv
33.744 110.936 33.552 111.728 33.552 112.592 cv
cp
41.784 112.4 mo
41.784 113.6 41.328 114.608 40.464 115.424 cv
39.6 116.24 38.448 116.624 37.008 116.624 cv
35.688 116.624 34.56 116.24 33.624 115.424 cv
32.688 114.608 32.232 113.672 32.232 112.616 cv
32.232 111.56 32.496 110.648 33.024 109.88 cv
33.552 109.136 34.32 108.488 35.328 107.912 cv
34.44 107.48 33.768 106.952 33.312 106.28 cv
32.832 105.632 32.616 104.888 32.616 104.072 cv
32.616 103.016 33 102.104 33.816 101.36 cv
34.632 100.616 35.76 100.232 37.2 100.232 cv
38.496 100.232 39.576 100.616 40.392 101.36 cv
41.208 102.104 41.616 103.016 41.616 104.072 cv
41.616 104.84 41.376 105.536 40.896 106.184 cv
40.416 106.856 39.696 107.432 38.712 107.912 cv
39.768 108.536 40.536 109.232 41.04 109.976 cv
41.52 110.744 41.784 111.536 41.784 112.4 cv
cp
40.296 104.168 mo
40.296 103.304 40.032 102.536 39.528 101.864 cv
39.024 101.216 38.256 100.88 37.2 100.88 cv
36 100.88 35.16 101.192 34.656 101.816 cv
34.152 102.44 33.912 103.112 33.912 103.784 cv
33.912 104.48 34.272 105.152 34.992 105.8 cv
35.712 106.472 36.72 107.048 38.04 107.528 cv
38.784 107.168 39.336 106.712 39.72 106.136 cv
40.104 105.584 40.296 104.936 40.296 104.168 cv
cp
f
50.2 27.2102 mo
46.7 27.2102 li
f
50.2 27.2102 mo
46.7 27.2102 li
@
14.04 19.1083 mo
14.04 33.3403 li
14.04 33.8683 14.184 34.2523 14.496 34.4923 cv
14.808 34.7323 15.24 34.8523 15.816 34.8523 cv
16.752 34.8523 li
16.752 35.4043 li
9.912 35.4043 li
9.912 34.8523 li
10.752 34.8523 li
11.376 34.8523 11.832 34.7323 12.12 34.4923 cv
12.408 34.2523 12.552 33.8683 12.552 33.3403 cv
12.552 22.0123 li
12.552 21.7723 12.456 21.5563 12.312 21.4123 cv
12.144 21.2683 11.904 21.1723 11.616 21.1723 cv
9.912 21.1723 li
9.912 20.5963 li
10.752 20.5963 li
11.496 20.5963 12.096 20.4763 12.576 20.2363 cv
13.056 19.9963 13.416 19.6123 13.68 19.1083 cv
14.04 19.1083 li
cp
f
22.2 35.6923 mo
21.816 35.6923 21.504 35.5723 21.216 35.3323 cv
20.928 35.0923 20.784 34.7323 20.784 34.3003 cv
20.784 33.8683 20.928 33.5083 21.216 33.2683 cv
21.504 33.0283 21.816 32.8843 22.2 32.8843 cv
22.56 32.8843 22.896 33.0283 23.184 33.3163 cv
23.472 33.6043 23.616 33.9163 23.616 34.2763 cv
23.616 34.7323 23.472 35.0923 23.184 35.3323 cv
22.896 35.5723 22.56 35.6923 22.2 35.6923 cv
cp
f
37.2 19.9483 mo
36.312 19.9483 35.568 20.6203 34.992 21.9643 cv
34.392 23.3083 34.104 25.1083 34.104 27.3403 cv
34.104 29.7403 34.392 31.5883 34.992 32.8843 cv
35.568 34.2043 36.336 34.8523 37.248 34.8523 cv
38.16 34.8523 38.88 34.2043 39.408 32.8843 cv
39.936 31.5883 40.2 29.7403 40.2 27.3403 cv
40.2 25.1083 39.936 23.3083 39.456 21.9643 cv
38.952 20.6203 38.208 19.9483 37.2 19.9483 cv
cp
37.2 35.5963 mo
35.808 35.5963 34.656 34.8763 33.72 33.4363 cv
32.784 31.9963 32.328 29.9803 32.328 27.3403 cv
32.328 24.9163 32.76 22.9483 33.672 21.4603 cv
34.584 19.9723 35.76 19.2043 37.2 19.2043 cv
38.568 19.2043 39.696 19.9243 40.608 21.3643 cv
41.52 22.8043 41.976 24.7963 41.976 27.3643 cv
41.976 29.9323 41.52 31.9483 40.608 33.4123 cv
39.696 34.8763 38.568 35.5963 37.2 35.5963 cv
cp
f
352.067 397.433 mo
352.862 397.433 353.625 397.117 354.188 396.554 cv
354.75 395.992 355.067 395.229 355.067 394.433 cv
355.067 393.637 354.75 392.874 354.188 392.312 cv
353.625 391.749 352.862 391.433 352.067 391.433 cv
351.271 391.433 350.508 391.749 349.945 392.312 cv
349.383 392.874 349.067 393.637 349.067 394.433 cv
349.067 395.229 349.383 395.992 349.945 396.554 cv
350.508 397.117 351.271 397.433 352.067 397.433 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
.854917 .475135 .0804761 0 cmyk
f
1 lw
352.067 397.433 mo
352.862 397.433 353.625 397.117 354.188 396.554 cv
354.75 395.992 355.067 395.229 355.067 394.433 cv
355.067 393.637 354.75 392.874 354.188 392.312 cv
353.625 391.749 352.862 391.433 352.067 391.433 cv
351.271 391.433 350.508 391.749 349.945 392.312 cv
349.383 392.874 349.067 393.637 349.067 394.433 cv
349.067 395.229 349.383 395.992 349.945 396.554 cv
350.508 397.117 351.271 397.433 352.067 397.433 cv
cp
@
447.401 222.909 mo
448.197 222.909 448.96 222.593 449.522 222.031 cv
450.085 221.468 450.401 220.705 450.401 219.909 cv
450.401 219.114 450.085 218.35 449.522 217.788 cv
448.96 217.225 448.197 216.909 447.401 216.909 cv
446.605 216.909 445.842 217.225 445.28 217.788 cv
444.717 218.35 444.401 219.114 444.401 219.909 cv
444.401 220.705 444.717 221.468 445.28 222.031 cv
445.842 222.593 446.605 222.909 447.401 222.909 cv
cp
f
447.401 222.909 mo
448.197 222.909 448.96 222.593 449.522 222.031 cv
450.085 221.468 450.401 220.705 450.401 219.909 cv
450.401 219.114 450.085 218.35 449.522 217.788 cv
448.96 217.225 448.197 216.909 447.401 216.909 cv
446.605 216.909 445.842 217.225 445.28 217.788 cv
444.717 218.35 444.401 219.114 444.401 219.909 cv
444.401 220.705 444.717 221.468 445.28 222.031 cv
445.842 222.593 446.605 222.909 447.401 222.909 cv
cp
@
473.417 142.153 mo
474.212 142.153 474.975 141.837 475.538 141.275 cv
476.101 140.712 476.417 139.949 476.417 139.153 cv
476.417 138.358 476.101 137.595 475.538 137.032 cv
474.975 136.47 474.212 136.153 473.417 136.153 cv
472.621 136.153 471.858 136.47 471.295 137.032 cv
470.733 137.595 470.417 138.358 470.417 139.153 cv
470.417 139.949 470.733 140.712 471.295 141.275 cv
471.858 141.837 472.621 142.153 473.417 142.153 cv
cp
f
473.417 142.153 mo
474.212 142.153 474.975 141.837 475.538 141.275 cv
476.101 140.712 476.417 139.949 476.417 139.153 cv
476.417 138.358 476.101 137.595 475.538 137.032 cv
474.975 136.47 474.212 136.153 473.417 136.153 cv
472.621 136.153 471.858 136.47 471.295 137.032 cv
470.733 137.595 470.417 138.358 470.417 139.153 cv
470.417 139.949 470.733 140.712 471.295 141.275 cv
471.858 141.837 472.621 142.153 473.417 142.153 cv
cp
@
170.482 96.1191 mo
171.278 96.1191 172.041 95.803 172.604 95.2404 cv
173.166 94.6778 173.482 93.9147 173.482 93.1191 cv
173.482 92.3235 173.166 91.5603 172.604 90.9978 cv
172.041 90.4352 171.278 90.1191 170.482 90.1191 cv
169.687 90.1191 168.923 90.4352 168.361 90.9978 cv
167.798 91.5603 167.482 92.3235 167.482 93.1191 cv
167.482 93.9147 167.798 94.6778 168.361 95.2404 cv
168.923 95.803 169.687 96.1191 170.482 96.1191 cv
cp
f
170.482 96.1191 mo
171.278 96.1191 172.041 95.803 172.604 95.2404 cv
173.166 94.6778 173.482 93.9147 173.482 93.1191 cv
173.482 92.3235 173.166 91.5603 172.604 90.9978 cv
172.041 90.4352 171.278 90.1191 170.482 90.1191 cv
169.687 90.1191 168.923 90.4352 168.361 90.9978 cv
167.798 91.5603 167.482 92.3235 167.482 93.1191 cv
167.482 93.9147 167.798 94.6778 168.361 95.2404 cv
168.923 95.803 169.687 96.1191 170.482 96.1191 cv
cp
@
246.631 332.674 mo
247.426 332.674 248.19 332.358 248.752 331.796 cv
249.315 331.233 249.631 330.47 249.631 329.674 cv
249.631 328.879 249.315 328.116 248.752 327.553 cv
248.19 326.991 247.426 326.674 246.631 326.674 cv
245.835 326.674 245.072 326.991 244.51 327.553 cv
243.947 328.116 243.631 328.879 243.631 329.674 cv
243.631 330.47 243.947 331.233 244.51 331.796 cv
245.072 332.358 245.835 332.674 246.631 332.674 cv
cp
f
246.631 332.674 mo
247.426 332.674 248.19 332.358 248.752 331.796 cv
249.315 331.233 249.631 330.47 249.631 329.674 cv
249.631 328.879 249.315 328.116 248.752 327.553 cv
248.19 326.991 247.426 326.674 246.631 326.674 cv
245.835 326.674 245.072 326.991 244.51 327.553 cv
243.947 328.116 243.631 328.879 243.631 329.674 cv
243.631 330.47 243.947 331.233 244.51 331.796 cv
245.072 332.358 245.835 332.674 246.631 332.674 cv
cp
@
460.876 109.227 mo
461.671 109.227 462.435 108.911 462.997 108.348 cv
463.56 107.786 463.876 107.023 463.876 106.227 cv
463.876 105.431 463.56 104.668 462.997 104.106 cv
462.435 103.543 461.671 103.227 460.876 103.227 cv
460.08 103.227 459.317 103.543 458.755 104.106 cv
458.192 104.668 457.876 105.431 457.876 106.227 cv
457.876 107.023 458.192 107.786 458.755 108.348 cv
459.317 108.911 460.08 109.227 460.876 109.227 cv
cp
f
460.876 109.227 mo
461.671 109.227 462.435 108.911 462.997 108.348 cv
463.56 107.786 463.876 107.023 463.876 106.227 cv
463.876 105.431 463.56 104.668 462.997 104.106 cv
462.435 103.543 461.671 103.227 460.876 103.227 cv
460.08 103.227 459.317 103.543 458.755 104.106 cv
458.192 104.668 457.876 105.431 457.876 106.227 cv
457.876 107.023 458.192 107.786 458.755 108.348 cv
459.317 108.911 460.08 109.227 460.876 109.227 cv
cp
@
336.089 427.946 mo
336.885 427.946 337.648 427.63 338.211 427.067 cv
338.773 426.505 339.089 425.741 339.089 424.946 cv
339.089 424.15 338.773 423.387 338.211 422.824 cv
337.648 422.262 336.885 421.946 336.089 421.946 cv
335.294 421.946 334.531 422.262 333.968 422.824 cv
333.406 423.387 333.089 424.15 333.089 424.946 cv
333.089 425.741 333.406 426.505 333.968 427.067 cv
334.531 427.63 335.294 427.946 336.089 427.946 cv
cp
f
336.089 427.946 mo
336.885 427.946 337.648 427.63 338.211 427.067 cv
338.773 426.505 339.089 425.741 339.089 424.946 cv
339.089 424.15 338.773 423.387 338.211 422.824 cv
337.648 422.262 336.885 421.946 336.089 421.946 cv
335.294 421.946 334.531 422.262 333.968 422.824 cv
333.406 423.387 333.089 424.15 333.089 424.946 cv
333.089 425.741 333.406 426.505 333.968 427.067 cv
334.531 427.63 335.294 427.946 336.089 427.946 cv
cp
@
408.19 217.701 mo
408.986 217.701 409.749 217.385 410.311 216.823 cv
410.874 216.26 411.19 215.497 411.19 214.701 cv
411.19 213.906 410.874 213.143 410.311 212.58 cv
409.749 212.018 408.986 211.701 408.19 211.701 cv
407.394 211.701 406.631 212.018 406.069 212.58 cv
405.506 213.143 405.19 213.906 405.19 214.701 cv
405.19 215.497 405.506 216.26 406.069 216.823 cv
406.631 217.385 407.394 217.701 408.19 217.701 cv
cp
f
408.19 217.701 mo
408.986 217.701 409.749 217.385 410.311 216.823 cv
410.874 216.26 411.19 215.497 411.19 214.701 cv
411.19 213.906 410.874 213.143 410.311 212.58 cv
409.749 212.018 408.986 211.701 408.19 211.701 cv
407.394 211.701 406.631 212.018 406.069 212.58 cv
405.506 213.143 405.19 213.906 405.19 214.701 cv
405.19 215.497 405.506 216.26 406.069 216.823 cv
406.631 217.385 407.394 217.701 408.19 217.701 cv
cp
@
468.459 278.149 mo
469.255 278.149 470.018 277.833 470.581 277.27 cv
471.143 276.707 471.459 275.944 471.459 275.149 cv
471.459 274.353 471.143 273.59 470.581 273.027 cv
470.018 272.465 469.255 272.149 468.459 272.149 cv
467.664 272.149 466.901 272.465 466.338 273.027 cv
465.775 273.59 465.459 274.353 465.459 275.149 cv
465.459 275.944 465.775 276.707 466.338 277.27 cv
466.901 277.833 467.664 278.149 468.459 278.149 cv
cp
f
468.459 278.149 mo
469.255 278.149 470.018 277.833 470.581 277.27 cv
471.143 276.707 471.459 275.944 471.459 275.149 cv
471.459 274.353 471.143 273.59 470.581 273.027 cv
470.018 272.465 469.255 272.149 468.459 272.149 cv
467.664 272.149 466.901 272.465 466.338 273.027 cv
465.775 273.59 465.459 274.353 465.459 275.149 cv
465.459 275.944 465.775 276.707 466.338 277.27 cv
466.901 277.833 467.664 278.149 468.459 278.149 cv
cp
@
408.116 216.394 mo
408.911 216.394 409.675 216.078 410.237 215.515 cv
410.8 214.953 411.116 214.189 411.116 213.394 cv
411.116 212.598 410.8 211.835 410.237 211.272 cv
409.675 210.71 408.911 210.394 408.116 210.394 cv
407.32 210.394 406.557 210.71 405.995 211.272 cv
405.432 211.835 405.116 212.598 405.116 213.394 cv
405.116 214.189 405.432 214.953 405.995 215.515 cv
406.557 216.078 407.32 216.394 408.116 216.394 cv
cp
f
408.116 216.394 mo
408.911 216.394 409.675 216.078 410.237 215.515 cv
410.8 214.953 411.116 214.189 411.116 213.394 cv
411.116 212.598 410.8 211.835 410.237 211.272 cv
409.675 210.71 408.911 210.394 408.116 210.394 cv
407.32 210.394 406.557 210.71 405.995 211.272 cv
405.432 211.835 405.116 212.598 405.116 213.394 cv
405.116 214.189 405.432 214.953 405.995 215.515 cv
406.557 216.078 407.32 216.394 408.116 216.394 cv
cp
@
364.968 379.919 mo
365.764 379.919 366.527 379.603 367.089 379.04 cv
367.652 378.478 367.968 377.715 367.968 376.919 cv
367.968 376.123 367.652 375.36 367.089 374.798 cv
366.527 374.235 365.764 373.919 364.968 373.919 cv
364.172 373.919 363.409 374.235 362.847 374.798 cv
362.284 375.36 361.968 376.123 361.968 376.919 cv
361.968 377.715 362.284 378.478 362.847 379.04 cv
363.409 379.603 364.172 379.919 364.968 379.919 cv
cp
f
364.968 379.919 mo
365.764 379.919 366.527 379.603 367.089 379.04 cv
367.652 378.478 367.968 377.715 367.968 376.919 cv
367.968 376.123 367.652 375.36 367.089 374.798 cv
366.527 374.235 365.764 373.919 364.968 373.919 cv
364.172 373.919 363.409 374.235 362.847 374.798 cv
362.284 375.36 361.968 376.123 361.968 376.919 cv
361.968 377.715 362.284 378.478 362.847 379.04 cv
363.409 379.603 364.172 379.919 364.968 379.919 cv
cp
@
236.72 57.5962 mo
237.515 57.5962 238.278 57.2801 238.841 56.7175 cv
239.403 56.1549 239.72 55.3918 239.72 54.5962 cv
239.72 53.8006 239.403 53.0375 238.841 52.4749 cv
238.278 51.9123 237.515 51.5962 236.72 51.5962 cv
235.924 51.5962 235.161 51.9123 234.598 52.4749 cv
234.036 53.0375 233.72 53.8006 233.72 54.5962 cv
233.72 55.3918 234.036 56.1549 234.598 56.7175 cv
235.161 57.2801 235.924 57.5962 236.72 57.5962 cv
cp
f
236.72 57.5962 mo
237.515 57.5962 238.278 57.2801 238.841 56.7175 cv
239.403 56.1549 239.72 55.3918 239.72 54.5962 cv
239.72 53.8006 239.403 53.0375 238.841 52.4749 cv
238.278 51.9123 237.515 51.5962 236.72 51.5962 cv
235.924 51.5962 235.161 51.9123 234.598 52.4749 cv
234.036 53.0375 233.72 53.8006 233.72 54.5962 cv
233.72 55.3918 234.036 56.1549 234.598 56.7175 cv
235.161 57.2801 235.924 57.5962 236.72 57.5962 cv
cp
@
298.809 356.451 mo
299.605 356.451 300.368 356.134 300.93 355.572 cv
301.493 355.009 301.809 354.246 301.809 353.451 cv
301.809 352.655 301.493 351.892 300.93 351.329 cv
300.368 350.767 299.605 350.451 298.809 350.451 cv
298.014 350.451 297.25 350.767 296.688 351.329 cv
296.125 351.892 295.809 352.655 295.809 353.451 cv
295.809 354.246 296.125 355.009 296.688 355.572 cv
297.25 356.134 298.014 356.451 298.809 356.451 cv
cp
f
298.809 356.451 mo
299.605 356.451 300.368 356.134 300.93 355.572 cv
301.493 355.009 301.809 354.246 301.809 353.451 cv
301.809 352.655 301.493 351.892 300.93 351.329 cv
300.368 350.767 299.605 350.451 298.809 350.451 cv
298.014 350.451 297.25 350.767 296.688 351.329 cv
296.125 351.892 295.809 352.655 295.809 353.451 cv
295.809 354.246 296.125 355.009 296.688 355.572 cv
297.25 356.134 298.014 356.451 298.809 356.451 cv
cp
@
78.7885 39.6239 mo
79.5841 39.6239 80.3472 39.3078 80.9098 38.7452 cv
81.4724 38.1826 81.7885 37.4195 81.7885 36.6239 cv
81.7885 35.8283 81.4724 35.0651 80.9098 34.5026 cv
80.3472 33.94 79.5841 33.6239 78.7885 33.6239 cv
77.9928 33.6239 77.2297 33.94 76.6671 34.5026 cv
76.1046 35.0651 75.7885 35.8283 75.7885 36.6239 cv
75.7885 37.4195 76.1046 38.1826 76.6671 38.7452 cv
77.2297 39.3078 77.9928 39.6239 78.7885 39.6239 cv
cp
f
78.7885 39.6239 mo
79.5841 39.6239 80.3472 39.3078 80.9098 38.7452 cv
81.4724 38.1826 81.7885 37.4195 81.7885 36.6239 cv
81.7885 35.8283 81.4724 35.0651 80.9098 34.5026 cv
80.3472 33.94 79.5841 33.6239 78.7885 33.6239 cv
77.9928 33.6239 77.2297 33.94 76.6671 34.5026 cv
76.1046 35.0651 75.7885 35.8283 75.7885 36.6239 cv
75.7885 37.4195 76.1046 38.1826 76.6671 38.7452 cv
77.2297 39.3078 77.9928 39.6239 78.7885 39.6239 cv
cp
@
415.671 76.3402 mo
416.466 76.3402 417.229 76.0241 417.792 75.4615 cv
418.355 74.899 418.671 74.1359 418.671 73.3403 cv
418.671 72.5446 418.355 71.7816 417.792 71.2189 cv
417.229 70.6563 416.466 70.3402 415.671 70.3402 cv
414.875 70.3402 414.112 70.6563 413.549 71.2189 cv
412.987 71.7816 412.671 72.5446 412.671 73.3403 cv
412.671 74.1359 412.987 74.899 413.549 75.4615 cv
414.112 76.0241 414.875 76.3402 415.671 76.3402 cv
f
415.671 76.3402 mo
415.671 75.8403 li
416.334 75.8403 416.97 75.5768 417.438 75.108 cv
417.907 74.6392 418.171 74.0032 418.171 73.3403 cv
418.171 72.6773 417.907 72.0412 417.438 71.5724 cv
416.97 71.1037 416.334 70.8402 415.671 70.8402 cv
415.008 70.8402 414.372 71.1037 413.903 71.5724 cv
413.434 72.0412 413.171 72.6773 413.171 73.3403 cv
413.171 74.0032 413.434 74.6392 413.903 75.108 cv
414.372 75.5768 415.008 75.8403 415.671 75.8403 cv
415.671 76.3402 li
415.671 76.8403 li
414.742 76.8403 413.852 76.4715 413.196 75.8152 cv
412.539 75.1587 412.171 74.2685 412.171 73.3403 cv
412.171 72.412 412.539 71.5217 413.196 70.8654 cv
413.852 70.209 414.742 69.8403 415.671 69.8403 cv
416.599 69.8403 417.489 70.209 418.146 70.8654 cv
418.802 71.5217 419.171 72.412 419.171 73.3403 cv
419.171 74.2685 418.802 75.1587 418.146 75.8152 cv
417.489 76.4715 416.599 76.8403 415.671 76.8403 cv
415.671 76.3402 li
f
461.588 257.135 mo
462.383 257.135 463.146 256.819 463.709 256.256 cv
464.271 255.694 464.588 254.931 464.588 254.135 cv
464.588 253.34 464.271 252.576 463.709 252.014 cv
463.146 251.451 462.383 251.135 461.588 251.135 cv
460.792 251.135 460.029 251.451 459.466 252.014 cv
458.904 252.576 458.588 253.34 458.588 254.135 cv
458.588 254.931 458.904 255.694 459.466 256.256 cv
460.029 256.819 460.792 257.135 461.588 257.135 cv
cp
f
461.588 257.135 mo
462.383 257.135 463.146 256.819 463.709 256.256 cv
464.271 255.694 464.588 254.931 464.588 254.135 cv
464.588 253.34 464.271 252.576 463.709 252.014 cv
463.146 251.451 462.383 251.135 461.588 251.135 cv
460.792 251.135 460.029 251.451 459.466 252.014 cv
458.904 252.576 458.588 253.34 458.588 254.135 cv
458.588 254.931 458.904 255.694 459.466 256.256 cv
460.029 256.819 460.792 257.135 461.588 257.135 cv
cp
@
233.612 156.593 mo
234.408 156.593 235.171 156.277 235.733 155.714 cv
236.296 155.151 236.612 154.388 236.612 153.593 cv
236.612 152.797 236.296 152.034 235.733 151.471 cv
235.171 150.909 234.408 150.593 233.612 150.593 cv
232.816 150.593 232.053 150.909 231.491 151.471 cv
230.928 152.034 230.612 152.797 230.612 153.593 cv
230.612 154.388 230.928 155.151 231.491 155.714 cv
232.053 156.277 232.816 156.593 233.612 156.593 cv
cp
f
233.612 156.593 mo
234.408 156.593 235.171 156.277 235.733 155.714 cv
236.296 155.151 236.612 154.388 236.612 153.593 cv
236.612 152.797 236.296 152.034 235.733 151.471 cv
235.171 150.909 234.408 150.593 233.612 150.593 cv
232.816 150.593 232.053 150.909 231.491 151.471 cv
230.928 152.034 230.612 152.797 230.612 153.593 cv
230.612 154.388 230.928 155.151 231.491 155.714 cv
232.053 156.277 232.816 156.593 233.612 156.593 cv
cp
@
355.539 386.873 mo
356.334 386.873 357.097 386.557 357.66 385.994 cv
358.222 385.432 358.539 384.669 358.539 383.873 cv
358.539 383.077 358.222 382.314 357.66 381.752 cv
357.097 381.189 356.334 380.873 355.539 380.873 cv
354.743 380.873 353.98 381.189 353.417 381.752 cv
352.855 382.314 352.539 383.077 352.539 383.873 cv
352.539 384.669 352.855 385.432 353.417 385.994 cv
353.98 386.557 354.743 386.873 355.539 386.873 cv
cp
f
355.539 386.873 mo
356.334 386.873 357.097 386.557 357.66 385.994 cv
358.222 385.432 358.539 384.669 358.539 383.873 cv
358.539 383.077 358.222 382.314 357.66 381.752 cv
357.097 381.189 356.334 380.873 355.539 380.873 cv
354.743 380.873 353.98 381.189 353.417 381.752 cv
352.855 382.314 352.539 383.077 352.539 383.873 cv
352.539 384.669 352.855 385.432 353.417 385.994 cv
353.98 386.557 354.743 386.873 355.539 386.873 cv
cp
@
202.61 313.967 mo
203.405 313.967 204.169 313.651 204.731 313.088 cv
205.294 312.525 205.61 311.762 205.61 310.967 cv
205.61 310.171 205.294 309.408 204.731 308.845 cv
204.169 308.283 203.405 307.967 202.61 307.967 cv
201.814 307.967 201.051 308.283 200.488 308.845 cv
199.926 309.408 199.61 310.171 199.61 310.967 cv
199.61 311.762 199.926 312.525 200.488 313.088 cv
201.051 313.651 201.814 313.967 202.61 313.967 cv
cp
f
202.61 313.967 mo
203.405 313.967 204.169 313.651 204.731 313.088 cv
205.294 312.525 205.61 311.762 205.61 310.967 cv
205.61 310.171 205.294 309.408 204.731 308.845 cv
204.169 308.283 203.405 307.967 202.61 307.967 cv
201.814 307.967 201.051 308.283 200.488 308.845 cv
199.926 309.408 199.61 310.171 199.61 310.967 cv
199.61 311.762 199.926 312.525 200.488 313.088 cv
201.051 313.651 201.814 313.967 202.61 313.967 cv
cp
@
443.64 330.527 mo
444.436 330.527 445.199 330.211 445.762 329.648 cv
446.324 329.086 446.64 328.323 446.64 327.527 cv
446.64 326.731 446.324 325.968 445.762 325.406 cv
445.199 324.843 444.436 324.527 443.64 324.527 cv
442.845 324.527 442.082 324.843 441.519 325.406 cv
440.956 325.968 440.64 326.731 440.64 327.527 cv
440.64 328.323 440.956 329.086 441.519 329.648 cv
442.082 330.211 442.845 330.527 443.64 330.527 cv
cp
f
443.64 330.527 mo
444.436 330.527 445.199 330.211 445.762 329.648 cv
446.324 329.086 446.64 328.323 446.64 327.527 cv
446.64 326.731 446.324 325.968 445.762 325.406 cv
445.199 324.843 444.436 324.527 443.64 324.527 cv
442.845 324.527 442.082 324.843 441.519 325.406 cv
440.956 325.968 440.64 326.731 440.64 327.527 cv
440.64 328.323 440.956 329.086 441.519 329.648 cv
442.082 330.211 442.845 330.527 443.64 330.527 cv
cp
@
135.213 379.634 mo
136.009 379.634 136.772 379.318 137.335 378.755 cv
137.897 378.193 138.213 377.43 138.213 376.634 cv
138.213 375.839 137.897 375.075 137.335 374.513 cv
136.772 373.95 136.009 373.634 135.213 373.634 cv
134.418 373.634 133.655 373.95 133.092 374.513 cv
132.529 375.075 132.213 375.839 132.213 376.634 cv
132.213 377.43 132.529 378.193 133.092 378.755 cv
133.655 379.318 134.418 379.634 135.213 379.634 cv
cp
f
135.213 379.634 mo
136.009 379.634 136.772 379.318 137.335 378.755 cv
137.897 378.193 138.213 377.43 138.213 376.634 cv
138.213 375.839 137.897 375.075 137.335 374.513 cv
136.772 373.95 136.009 373.634 135.213 373.634 cv
134.418 373.634 133.655 373.95 133.092 374.513 cv
132.529 375.075 132.213 375.839 132.213 376.634 cv
132.213 377.43 132.529 378.193 133.092 378.755 cv
133.655 379.318 134.418 379.634 135.213 379.634 cv
cp
@
345.754 281.693 mo
346.549 281.693 347.312 281.377 347.875 280.814 cv
348.438 280.252 348.754 279.489 348.754 278.693 cv
348.754 277.897 348.438 277.134 347.875 276.572 cv
347.312 276.009 346.549 275.693 345.754 275.693 cv
344.958 275.693 344.195 276.009 343.632 276.572 cv
343.07 277.134 342.754 277.897 342.754 278.693 cv
342.754 279.489 343.07 280.252 343.632 280.814 cv
344.195 281.377 344.958 281.693 345.754 281.693 cv
cp
f
345.754 281.693 mo
346.549 281.693 347.312 281.377 347.875 280.814 cv
348.438 280.252 348.754 279.489 348.754 278.693 cv
348.754 277.897 348.438 277.134 347.875 276.572 cv
347.312 276.009 346.549 275.693 345.754 275.693 cv
344.958 275.693 344.195 276.009 343.632 276.572 cv
343.07 277.134 342.754 277.897 342.754 278.693 cv
342.754 279.489 343.07 280.252 343.632 280.814 cv
344.195 281.377 344.958 281.693 345.754 281.693 cv
cp
@
290.829 311.81 mo
291.624 311.81 292.388 311.494 292.95 310.932 cv
293.513 310.369 293.829 309.606 293.829 308.81 cv
293.829 308.015 293.513 307.252 292.95 306.689 cv
292.388 306.126 291.624 305.81 290.829 305.81 cv
290.033 305.81 289.27 306.126 288.707 306.689 cv
288.145 307.252 287.829 308.015 287.829 308.81 cv
287.829 309.606 288.145 310.369 288.707 310.932 cv
289.27 311.494 290.033 311.81 290.829 311.81 cv
cp
f
290.829 311.81 mo
291.624 311.81 292.388 311.494 292.95 310.932 cv
293.513 310.369 293.829 309.606 293.829 308.81 cv
293.829 308.015 293.513 307.252 292.95 306.689 cv
292.388 306.126 291.624 305.81 290.829 305.81 cv
290.033 305.81 289.27 306.126 288.707 306.689 cv
288.145 307.252 287.829 308.015 287.829 308.81 cv
287.829 309.606 288.145 310.369 288.707 310.932 cv
289.27 311.494 290.033 311.81 290.829 311.81 cv
cp
@
207.613 310.358 mo
208.408 310.358 209.171 310.042 209.734 309.479 cv
210.296 308.916 210.613 308.153 210.613 307.358 cv
210.613 306.562 210.296 305.799 209.734 305.236 cv
209.171 304.674 208.408 304.358 207.613 304.358 cv
206.817 304.358 206.054 304.674 205.491 305.236 cv
204.929 305.799 204.613 306.562 204.613 307.358 cv
204.613 308.153 204.929 308.916 205.491 309.479 cv
206.054 310.042 206.817 310.358 207.613 310.358 cv
cp
f
207.613 310.358 mo
208.408 310.358 209.171 310.042 209.734 309.479 cv
210.296 308.916 210.613 308.153 210.613 307.358 cv
210.613 306.562 210.296 305.799 209.734 305.236 cv
209.171 304.674 208.408 304.358 207.613 304.358 cv
206.817 304.358 206.054 304.674 205.491 305.236 cv
204.929 305.799 204.613 306.562 204.613 307.358 cv
204.613 308.153 204.929 308.916 205.491 309.479 cv
206.054 310.042 206.817 310.358 207.613 310.358 cv
cp
@
367.187 73.5674 mo
367.983 73.5674 368.746 73.2512 369.309 72.6887 cv
369.871 72.1261 370.187 71.363 370.187 70.5674 cv
370.187 69.7718 369.871 69.0087 369.309 68.446 cv
368.746 67.8835 367.983 67.5673 367.187 67.5673 cv
366.392 67.5673 365.629 67.8835 365.066 68.446 cv
364.503 69.0087 364.187 69.7718 364.187 70.5674 cv
364.187 71.363 364.503 72.1261 365.066 72.6887 cv
365.629 73.2512 366.392 73.5674 367.187 73.5674 cv
f
367.187 73.5674 mo
367.187 73.0674 li
367.85 73.0674 368.486 72.8039 368.955 72.3351 cv
369.424 71.8663 369.687 71.2304 369.687 70.5674 cv
369.687 69.9044 369.424 69.2685 368.955 68.7997 cv
368.955 68.7996 li
368.486 68.3308 367.85 68.0674 367.187 68.0674 cv
366.524 68.0674 365.888 68.3308 365.42 68.7996 cv
365.42 68.7997 li
364.951 69.2685 364.687 69.9044 364.687 70.5674 cv
364.687 71.2304 364.951 71.8663 365.42 72.3351 cv
365.888 72.8039 366.524 73.0674 367.187 73.0674 cv
367.187 73.5674 li
367.187 74.0674 li
366.259 74.0674 365.369 73.6986 364.712 73.0423 cv
364.056 72.3859 363.687 71.4956 363.687 70.5674 cv
363.687 69.6391 364.056 68.7488 364.712 68.0925 cv
365.369 67.4362 366.259 67.0674 367.187 67.0674 cv
368.116 67.0674 369.006 67.4362 369.662 68.0925 cv
370.319 68.7488 370.687 69.6391 370.687 70.5674 cv
370.687 71.4956 370.319 72.3859 369.662 73.0423 cv
369.006 73.6986 368.116 74.0674 367.187 74.0674 cv
367.187 73.5674 li
f
183.377 332.263 mo
184.173 332.263 184.936 331.947 185.499 331.384 cv
186.061 330.822 186.377 330.059 186.377 329.263 cv
186.377 328.467 186.061 327.704 185.499 327.142 cv
184.936 326.579 184.173 326.263 183.377 326.263 cv
182.582 326.263 181.818 326.579 181.256 327.142 cv
180.693 327.704 180.377 328.467 180.377 329.263 cv
180.377 330.059 180.693 330.822 181.256 331.384 cv
181.818 331.947 182.582 332.263 183.377 332.263 cv
cp
f
183.377 332.263 mo
184.173 332.263 184.936 331.947 185.499 331.384 cv
186.061 330.822 186.377 330.059 186.377 329.263 cv
186.377 328.467 186.061 327.704 185.499 327.142 cv
184.936 326.579 184.173 326.263 183.377 326.263 cv
182.582 326.263 181.818 326.579 181.256 327.142 cv
180.693 327.704 180.377 328.467 180.377 329.263 cv
180.377 330.059 180.693 330.822 181.256 331.384 cv
181.818 331.947 182.582 332.263 183.377 332.263 cv
cp
@
402.659 201.846 mo
403.455 201.846 404.218 201.53 404.78 200.968 cv
405.343 200.405 405.659 199.642 405.659 198.846 cv
405.659 198.051 405.343 197.288 404.78 196.725 cv
404.218 196.163 403.455 195.846 402.659 195.846 cv
401.864 195.846 401.1 196.163 400.538 196.725 cv
399.975 197.288 399.659 198.051 399.659 198.846 cv
399.659 199.642 399.975 200.405 400.538 200.968 cv
401.1 201.53 401.864 201.846 402.659 201.846 cv
cp
f
402.659 201.846 mo
403.455 201.846 404.218 201.53 404.78 200.968 cv
405.343 200.405 405.659 199.642 405.659 198.846 cv
405.659 198.051 405.343 197.288 404.78 196.725 cv
404.218 196.163 403.455 195.846 402.659 195.846 cv
401.864 195.846 401.1 196.163 400.538 196.725 cv
399.975 197.288 399.659 198.051 399.659 198.846 cv
399.659 199.642 399.975 200.405 400.538 200.968 cv
401.1 201.53 401.864 201.846 402.659 201.846 cv
cp
@
282.042 252.891 mo
282.838 252.891 283.601 252.575 284.163 252.012 cv
284.726 251.45 285.042 250.687 285.042 249.891 cv
285.042 249.095 284.726 248.332 284.163 247.77 cv
283.601 247.207 282.838 246.891 282.042 246.891 cv
281.246 246.891 280.483 247.207 279.921 247.77 cv
279.358 248.332 279.042 249.095 279.042 249.891 cv
279.042 250.687 279.358 251.45 279.921 252.012 cv
280.483 252.575 281.246 252.891 282.042 252.891 cv
cp
f
282.042 252.891 mo
282.838 252.891 283.601 252.575 284.163 252.012 cv
284.726 251.45 285.042 250.687 285.042 249.891 cv
285.042 249.095 284.726 248.332 284.163 247.77 cv
283.601 247.207 282.838 246.891 282.042 246.891 cv
281.246 246.891 280.483 247.207 279.921 247.77 cv
279.358 248.332 279.042 249.095 279.042 249.891 cv
279.042 250.687 279.358 251.45 279.921 252.012 cv
280.483 252.575 281.246 252.891 282.042 252.891 cv
cp
@
283.697 226.078 mo
284.493 226.078 285.256 225.762 285.818 225.2 cv
286.381 224.637 286.697 223.874 286.697 223.078 cv
286.697 222.283 286.381 221.52 285.818 220.957 cv
285.256 220.394 284.493 220.078 283.697 220.078 cv
282.901 220.078 282.138 220.394 281.576 220.957 cv
281.013 221.52 280.697 222.283 280.697 223.078 cv
280.697 223.874 281.013 224.637 281.576 225.2 cv
282.138 225.762 282.901 226.078 283.697 226.078 cv
cp
f
283.697 226.078 mo
284.493 226.078 285.256 225.762 285.818 225.2 cv
286.381 224.637 286.697 223.874 286.697 223.078 cv
286.697 222.283 286.381 221.52 285.818 220.957 cv
285.256 220.394 284.493 220.078 283.697 220.078 cv
282.901 220.078 282.138 220.394 281.576 220.957 cv
281.013 221.52 280.697 222.283 280.697 223.078 cv
280.697 223.874 281.013 224.637 281.576 225.2 cv
282.138 225.762 282.901 226.078 283.697 226.078 cv
cp
@
322.333 293.291 mo
323.129 293.291 323.892 292.975 324.454 292.412 cv
325.017 291.85 325.333 291.086 325.333 290.291 cv
325.333 289.495 325.017 288.732 324.454 288.169 cv
323.892 287.607 323.129 287.291 322.333 287.291 cv
321.537 287.291 320.774 287.607 320.212 288.169 cv
319.649 288.732 319.333 289.495 319.333 290.291 cv
319.333 291.086 319.649 291.85 320.212 292.412 cv
320.774 292.975 321.537 293.291 322.333 293.291 cv
cp
f
322.333 293.291 mo
323.129 293.291 323.892 292.975 324.454 292.412 cv
325.017 291.85 325.333 291.086 325.333 290.291 cv
325.333 289.495 325.017 288.732 324.454 288.169 cv
323.892 287.607 323.129 287.291 322.333 287.291 cv
321.537 287.291 320.774 287.607 320.212 288.169 cv
319.649 288.732 319.333 289.495 319.333 290.291 cv
319.333 291.086 319.649 291.85 320.212 292.412 cv
320.774 292.975 321.537 293.291 322.333 293.291 cv
cp
@
384.704 277.8 mo
385.5 277.8 386.263 277.484 386.826 276.921 cv
387.388 276.359 387.704 275.596 387.704 274.8 cv
387.704 274.004 387.388 273.241 386.826 272.679 cv
386.263 272.116 385.5 271.8 384.704 271.8 cv
383.909 271.8 383.146 272.116 382.583 272.679 cv
382.02 273.241 381.704 274.004 381.704 274.8 cv
381.704 275.596 382.02 276.359 382.583 276.921 cv
383.146 277.484 383.909 277.8 384.704 277.8 cv
cp
f
384.704 277.8 mo
385.5 277.8 386.263 277.484 386.826 276.921 cv
387.388 276.359 387.704 275.596 387.704 274.8 cv
387.704 274.004 387.388 273.241 386.826 272.679 cv
386.263 272.116 385.5 271.8 384.704 271.8 cv
383.909 271.8 383.146 272.116 382.583 272.679 cv
382.02 273.241 381.704 274.004 381.704 274.8 cv
381.704 275.596 382.02 276.359 382.583 276.921 cv
383.146 277.484 383.909 277.8 384.704 277.8 cv
cp
@
423.085 266.104 mo
423.88 266.104 424.644 265.788 425.206 265.225 cv
425.769 264.662 426.085 263.899 426.085 263.104 cv
426.085 262.308 425.769 261.545 425.206 260.982 cv
424.644 260.42 423.88 260.104 423.085 260.104 cv
422.289 260.104 421.526 260.42 420.963 260.982 cv
420.401 261.545 420.085 262.308 420.085 263.104 cv
420.085 263.899 420.401 264.662 420.963 265.225 cv
421.526 265.788 422.289 266.104 423.085 266.104 cv
cp
f
423.085 266.104 mo
423.88 266.104 424.644 265.788 425.206 265.225 cv
425.769 264.662 426.085 263.899 426.085 263.104 cv
426.085 262.308 425.769 261.545 425.206 260.982 cv
424.644 260.42 423.88 260.104 423.085 260.104 cv
422.289 260.104 421.526 260.42 420.963 260.982 cv
420.401 261.545 420.085 262.308 420.085 263.104 cv
420.085 263.899 420.401 264.662 420.963 265.225 cv
421.526 265.788 422.289 266.104 423.085 266.104 cv
cp
@
72.961 431.812 mo
73.7566 431.812 74.5198 431.496 75.0824 430.933 cv
75.6449 430.371 75.961 429.607 75.961 428.812 cv
75.961 428.016 75.6449 427.253 75.0824 426.69 cv
74.5198 426.128 73.7566 425.812 72.961 425.812 cv
72.1654 425.812 71.4023 426.128 70.8397 426.69 cv
70.2771 427.253 69.961 428.016 69.961 428.812 cv
69.961 429.607 70.2771 430.371 70.8397 430.933 cv
71.4023 431.496 72.1654 431.812 72.961 431.812 cv
cp
f
72.961 431.812 mo
73.7566 431.812 74.5198 431.496 75.0824 430.933 cv
75.6449 430.371 75.961 429.607 75.961 428.812 cv
75.961 428.016 75.6449 427.253 75.0824 426.69 cv
74.5198 426.128 73.7566 425.812 72.961 425.812 cv
72.1654 425.812 71.4023 426.128 70.8397 426.69 cv
70.2771 427.253 69.961 428.016 69.961 428.812 cv
69.961 429.607 70.2771 430.371 70.8397 430.933 cv
71.4023 431.496 72.1654 431.812 72.961 431.812 cv
cp
@
125.802 42.4728 mo
126.597 42.4728 127.36 42.1567 127.923 41.5942 cv
128.485 41.0316 128.802 40.2684 128.802 39.4728 cv
128.802 38.6772 128.485 37.9141 127.923 37.3515 cv
127.36 36.7889 126.597 36.4728 125.802 36.4728 cv
125.006 36.4728 124.243 36.7889 123.68 37.3515 cv
123.118 37.9141 122.802 38.6772 122.802 39.4728 cv
122.802 40.2684 123.118 41.0316 123.68 41.5942 cv
124.243 42.1567 125.006 42.4728 125.802 42.4728 cv
cp
f
125.802 42.4728 mo
126.597 42.4728 127.36 42.1567 127.923 41.5942 cv
128.485 41.0316 128.802 40.2684 128.802 39.4728 cv
128.802 38.6772 128.485 37.9141 127.923 37.3515 cv
127.36 36.7889 126.597 36.4728 125.802 36.4728 cv
125.006 36.4728 124.243 36.7889 123.68 37.3515 cv
123.118 37.9141 122.802 38.6772 122.802 39.4728 cv
122.802 40.2684 123.118 41.0316 123.68 41.5942 cv
124.243 42.1567 125.006 42.4728 125.802 42.4728 cv
cp
@
436.435 150.931 mo
437.23 150.931 437.993 150.615 438.556 150.053 cv
439.118 149.49 439.435 148.727 439.435 147.931 cv
439.435 147.136 439.118 146.373 438.556 145.81 cv
437.993 145.247 437.23 144.931 436.435 144.931 cv
435.639 144.931 434.876 145.247 434.313 145.81 cv
433.751 146.373 433.435 147.136 433.435 147.931 cv
433.435 148.727 433.751 149.49 434.313 150.053 cv
434.876 150.615 435.639 150.931 436.435 150.931 cv
cp
f
436.435 150.931 mo
437.23 150.931 437.993 150.615 438.556 150.053 cv
439.118 149.49 439.435 148.727 439.435 147.931 cv
439.435 147.136 439.118 146.373 438.556 145.81 cv
437.993 145.247 437.23 144.931 436.435 144.931 cv
435.639 144.931 434.876 145.247 434.313 145.81 cv
433.751 146.373 433.435 147.136 433.435 147.931 cv
433.435 148.727 433.751 149.49 434.313 150.053 cv
434.876 150.615 435.639 150.931 436.435 150.931 cv
cp
@
120.516 271.91 mo
121.312 271.91 122.075 271.594 122.638 271.031 cv
123.2 270.468 123.516 269.705 123.516 268.91 cv
123.516 268.114 123.2 267.351 122.638 266.788 cv
122.075 266.226 121.312 265.91 120.516 265.91 cv
119.721 265.91 118.958 266.226 118.395 266.788 cv
117.832 267.351 117.516 268.114 117.516 268.91 cv
117.516 269.705 117.832 270.468 118.395 271.031 cv
118.958 271.594 119.721 271.91 120.516 271.91 cv
cp
f
120.516 271.91 mo
121.312 271.91 122.075 271.594 122.638 271.031 cv
123.2 270.468 123.516 269.705 123.516 268.91 cv
123.516 268.114 123.2 267.351 122.638 266.788 cv
122.075 266.226 121.312 265.91 120.516 265.91 cv
119.721 265.91 118.958 266.226 118.395 266.788 cv
117.832 267.351 117.516 268.114 117.516 268.91 cv
117.516 269.705 117.832 270.468 118.395 271.031 cv
118.958 271.594 119.721 271.91 120.516 271.91 cv
cp
@
170.461 267.168 mo
171.256 267.168 172.019 266.852 172.582 266.29 cv
173.145 265.727 173.461 264.964 173.461 264.168 cv
173.461 263.373 173.145 262.61 172.582 262.047 cv
172.019 261.484 171.256 261.168 170.461 261.168 cv
169.665 261.168 168.902 261.484 168.339 262.047 cv
167.777 262.61 167.461 263.373 167.461 264.168 cv
167.461 264.964 167.777 265.727 168.339 266.29 cv
168.902 266.852 169.665 267.168 170.461 267.168 cv
cp
f
170.461 267.168 mo
171.256 267.168 172.019 266.852 172.582 266.29 cv
173.145 265.727 173.461 264.964 173.461 264.168 cv
173.461 263.373 173.145 262.61 172.582 262.047 cv
172.019 261.484 171.256 261.168 170.461 261.168 cv
169.665 261.168 168.902 261.484 168.339 262.047 cv
167.777 262.61 167.461 263.373 167.461 264.168 cv
167.461 264.964 167.777 265.727 168.339 266.29 cv
168.902 266.852 169.665 267.168 170.461 267.168 cv
cp
@
431.63 30.3601 mo
432.426 30.3601 433.189 30.0439 433.752 29.4814 cv
434.314 28.9188 434.63 28.1556 434.63 27.3601 cv
434.63 26.5645 434.314 25.8013 433.752 25.2387 cv
433.189 24.6762 432.426 24.36 431.63 24.36 cv
430.835 24.36 430.071 24.6762 429.509 25.2387 cv
428.946 25.8013 428.63 26.5645 428.63 27.3601 cv
428.63 28.1556 428.946 28.9188 429.509 29.4814 cv
430.071 30.0439 430.835 30.3601 431.63 30.3601 cv
f
431.63 30.3601 mo
431.63 29.86 li
432.293 29.86 432.929 29.5967 433.398 29.1278 cv
433.867 28.659 434.13 28.0231 434.13 27.3601 cv
434.13 26.6971 433.867 26.0612 433.398 25.5924 cv
432.929 25.1234 432.293 24.8601 431.63 24.8601 cv
430.967 24.8601 430.331 25.1234 429.862 25.5924 cv
429.394 26.0612 429.13 26.6971 429.13 27.3601 cv
429.13 28.0231 429.394 28.659 429.862 29.1278 cv
430.331 29.5967 430.967 29.86 431.63 29.86 cv
431.63 30.3601 li
431.63 30.8601 li
430.702 30.8601 429.812 30.4913 429.155 29.8349 cv
428.499 29.1786 428.13 28.2883 428.13 27.3601 cv
428.13 26.4318 428.499 25.5415 429.155 24.8852 cv
429.812 24.2289 430.702 23.8601 431.63 23.8601 cv
432.558 23.8601 433.449 24.2289 434.105 24.8852 cv
434.761 25.5415 435.13 26.4318 435.13 27.3601 cv
435.13 28.2883 434.761 29.1786 434.105 29.8349 cv
433.449 30.4913 432.558 30.8601 431.63 30.8601 cv
431.63 30.3601 li
f
120.85 405.026 mo
121.645 405.026 122.409 404.71 122.971 404.147 cv
123.534 403.585 123.85 402.822 123.85 402.026 cv
123.85 401.23 123.534 400.467 122.971 399.905 cv
122.409 399.342 121.645 399.026 120.85 399.026 cv
120.054 399.026 119.291 399.342 118.728 399.905 cv
118.166 400.467 117.85 401.23 117.85 402.026 cv
117.85 402.822 118.166 403.585 118.728 404.147 cv
119.291 404.71 120.054 405.026 120.85 405.026 cv
cp
f
120.85 405.026 mo
121.645 405.026 122.409 404.71 122.971 404.147 cv
123.534 403.585 123.85 402.822 123.85 402.026 cv
123.85 401.23 123.534 400.467 122.971 399.905 cv
122.409 399.342 121.645 399.026 120.85 399.026 cv
120.054 399.026 119.291 399.342 118.728 399.905 cv
118.166 400.467 117.85 401.23 117.85 402.026 cv
117.85 402.822 118.166 403.585 118.728 404.147 cv
119.291 404.71 120.054 405.026 120.85 405.026 cv
cp
@
254.683 203.778 mo
255.479 203.778 256.242 203.461 256.805 202.899 cv
257.367 202.336 257.683 201.573 257.683 200.778 cv
257.683 199.982 257.367 199.219 256.805 198.656 cv
256.242 198.094 255.479 197.778 254.683 197.778 cv
253.888 197.778 253.124 198.094 252.562 198.656 cv
251.999 199.219 251.683 199.982 251.683 200.778 cv
251.683 201.573 251.999 202.336 252.562 202.899 cv
253.124 203.461 253.888 203.778 254.683 203.778 cv
cp
f
254.683 203.778 mo
255.479 203.778 256.242 203.461 256.805 202.899 cv
257.367 202.336 257.683 201.573 257.683 200.778 cv
257.683 199.982 257.367 199.219 256.805 198.656 cv
256.242 198.094 255.479 197.778 254.683 197.778 cv
253.888 197.778 253.124 198.094 252.562 198.656 cv
251.999 199.219 251.683 199.982 251.683 200.778 cv
251.683 201.573 251.999 202.336 252.562 202.899 cv
253.124 203.461 253.888 203.778 254.683 203.778 cv
cp
@
343.879 39.9116 mo
344.674 39.9116 345.438 39.5956 346 39.033 cv
346.563 38.4703 346.879 37.7073 346.879 36.9116 cv
346.879 36.116 346.563 35.3529 346 34.7904 cv
345.438 34.2277 344.674 33.9117 343.879 33.9117 cv
343.083 33.9117 342.32 34.2277 341.758 34.7904 cv
341.195 35.3529 340.879 36.116 340.879 36.9116 cv
340.879 37.7073 341.195 38.4703 341.758 39.033 cv
342.32 39.5956 343.083 39.9116 343.879 39.9116 cv
f
343.879 39.9116 mo
343.879 39.4117 li
344.542 39.4117 345.178 39.1482 345.647 38.6794 cv
346.116 38.2106 346.379 37.5746 346.379 36.9116 cv
346.379 36.2487 346.116 35.6127 345.647 35.1439 cv
345.178 34.6751 344.542 34.4116 343.879 34.4116 cv
343.216 34.4116 342.58 34.6751 342.111 35.1439 cv
341.642 35.6127 341.379 36.2487 341.379 36.9116 cv
341.379 37.5746 341.642 38.2106 342.111 38.6794 cv
342.58 39.1482 343.216 39.4117 343.879 39.4117 cv
343.879 39.9116 li
343.879 40.4117 li
342.951 40.4116 342.06 40.0429 341.404 39.3865 cv
340.748 38.7301 340.379 37.8399 340.379 36.9116 cv
340.379 35.9834 340.748 35.0932 341.404 34.4367 cv
342.06 33.7804 342.951 33.4116 343.879 33.4116 cv
344.807 33.4116 345.697 33.7804 346.354 34.4367 cv
347.01 35.0932 347.379 35.9834 347.379 36.9116 cv
347.379 37.8399 347.01 38.7301 346.354 39.3865 cv
345.697 40.0429 344.807 40.4116 343.879 40.4117 cv
343.879 39.9116 li
f
73.7477 132.351 mo
74.5433 132.351 75.3064 132.035 75.869 131.472 cv
76.4316 130.91 76.7477 130.146 76.7477 129.351 cv
76.7477 128.555 76.4316 127.792 75.869 127.229 cv
75.3064 126.667 74.5433 126.351 73.7477 126.351 cv
72.9521 126.351 72.1889 126.667 71.6264 127.229 cv
71.0638 127.792 70.7477 128.555 70.7477 129.351 cv
70.7477 130.146 71.0638 130.91 71.6264 131.472 cv
72.1889 132.035 72.9521 132.351 73.7477 132.351 cv
cp
f
73.7477 132.351 mo
74.5433 132.351 75.3064 132.035 75.869 131.472 cv
76.4316 130.91 76.7477 130.146 76.7477 129.351 cv
76.7477 128.555 76.4316 127.792 75.869 127.229 cv
75.3064 126.667 74.5433 126.351 73.7477 126.351 cv
72.9521 126.351 72.1889 126.667 71.6264 127.229 cv
71.0638 127.792 70.7477 128.555 70.7477 129.351 cv
70.7477 130.146 71.0638 130.91 71.6264 131.472 cv
72.1889 132.035 72.9521 132.351 73.7477 132.351 cv
cp
@
220.062 285.038 mo
220.858 285.038 221.621 284.722 222.183 284.159 cv
222.746 283.596 223.062 282.833 223.062 282.038 cv
223.062 281.242 222.746 280.479 222.183 279.916 cv
221.621 279.354 220.858 279.038 220.062 279.038 cv
219.266 279.038 218.503 279.354 217.941 279.916 cv
217.378 280.479 217.062 281.242 217.062 282.038 cv
217.062 282.833 217.378 283.596 217.941 284.159 cv
218.503 284.722 219.266 285.038 220.062 285.038 cv
cp
f
220.062 285.038 mo
220.858 285.038 221.621 284.722 222.183 284.159 cv
222.746 283.596 223.062 282.833 223.062 282.038 cv
223.062 281.242 222.746 280.479 222.183 279.916 cv
221.621 279.354 220.858 279.038 220.062 279.038 cv
219.266 279.038 218.503 279.354 217.941 279.916 cv
217.378 280.479 217.062 281.242 217.062 282.038 cv
217.062 282.833 217.378 283.596 217.941 284.159 cv
218.503 284.722 219.266 285.038 220.062 285.038 cv
cp
@
91.1529 290.785 mo
91.9485 290.785 92.7116 290.469 93.2742 289.906 cv
93.8368 289.344 94.1529 288.581 94.1529 287.785 cv
94.1529 286.989 93.8368 286.226 93.2742 285.664 cv
92.7116 285.101 91.9485 284.785 91.1529 284.785 cv
90.3573 284.785 89.5941 285.101 89.0315 285.664 cv
88.469 286.226 88.1529 286.989 88.1529 287.785 cv
88.1529 288.581 88.469 289.344 89.0315 289.906 cv
89.5941 290.469 90.3573 290.785 91.1529 290.785 cv
cp
f
91.1529 290.785 mo
91.9485 290.785 92.7116 290.469 93.2742 289.906 cv
93.8368 289.344 94.1529 288.581 94.1529 287.785 cv
94.1529 286.989 93.8368 286.226 93.2742 285.664 cv
92.7116 285.101 91.9485 284.785 91.1529 284.785 cv
90.3573 284.785 89.5941 285.101 89.0315 285.664 cv
88.469 286.226 88.1529 286.989 88.1529 287.785 cv
88.1529 288.581 88.469 289.344 89.0315 289.906 cv
89.5941 290.469 90.3573 290.785 91.1529 290.785 cv
cp
@
235.66 179.975 mo
236.455 179.975 237.218 179.659 237.781 179.096 cv
238.343 178.534 238.66 177.77 238.66 176.975 cv
238.66 176.179 238.343 175.416 237.781 174.854 cv
237.218 174.291 236.455 173.975 235.66 173.975 cv
234.864 173.975 234.101 174.291 233.538 174.854 cv
232.976 175.416 232.66 176.179 232.66 176.975 cv
232.66 177.77 232.976 178.534 233.538 179.096 cv
234.101 179.659 234.864 179.975 235.66 179.975 cv
cp
f
235.66 179.975 mo
236.455 179.975 237.218 179.659 237.781 179.096 cv
238.343 178.534 238.66 177.77 238.66 176.975 cv
238.66 176.179 238.343 175.416 237.781 174.854 cv
237.218 174.291 236.455 173.975 235.66 173.975 cv
234.864 173.975 234.101 174.291 233.538 174.854 cv
232.976 175.416 232.66 176.179 232.66 176.975 cv
232.66 177.77 232.976 178.534 233.538 179.096 cv
234.101 179.659 234.864 179.975 235.66 179.975 cv
cp
@
332.632 63.1981 mo
333.427 63.1981 334.19 62.8821 334.753 62.3195 cv
335.316 61.757 335.632 60.9938 335.632 60.1981 cv
335.632 59.4025 335.316 58.6394 334.753 58.0769 cv
334.19 57.5142 333.427 57.1982 332.632 57.1982 cv
331.836 57.1982 331.073 57.5142 330.51 58.0769 cv
329.948 58.6394 329.632 59.4025 329.632 60.1981 cv
329.632 60.9938 329.948 61.757 330.51 62.3195 cv
331.073 62.8821 331.836 63.1981 332.632 63.1981 cv
f
332.632 63.1981 mo
332.632 62.6982 li
333.295 62.6982 333.931 62.4347 334.399 61.9659 cv
334.868 61.4971 335.132 60.8611 335.132 60.1981 cv
335.132 59.5352 334.868 58.8992 334.399 58.4304 cv
333.931 57.9616 333.295 57.6981 332.632 57.6981 cv
331.969 57.6981 331.333 57.9616 330.864 58.4304 cv
330.395 58.8992 330.132 59.5352 330.132 60.1981 cv
330.132 60.8611 330.395 61.4971 330.864 61.9659 cv
331.333 62.4347 331.969 62.6982 332.632 62.6982 cv
332.632 63.1981 li
332.632 63.6982 li
331.703 63.6982 330.813 63.3294 330.157 62.673 cv
329.5 62.0166 329.132 61.1263 329.132 60.1981 cv
329.132 59.27 329.5 58.3797 330.157 57.7232 cv
330.157 57.7233 li
330.813 57.0669 331.703 56.6981 332.632 56.6981 cv
333.56 56.6981 334.45 57.0669 335.106 57.7233 cv
335.106 57.7232 li
335.763 58.3797 336.132 59.27 336.132 60.1981 cv
336.132 61.1263 335.763 62.0166 335.106 62.673 cv
334.45 63.3294 333.56 63.6982 332.632 63.6982 cv
332.632 63.1981 li
f
253.502 327.502 mo
254.298 327.502 255.061 327.186 255.623 326.624 cv
256.186 326.061 256.502 325.298 256.502 324.502 cv
256.502 323.707 256.186 322.943 255.623 322.381 cv
255.061 321.818 254.298 321.502 253.502 321.502 cv
252.706 321.502 251.943 321.818 251.381 322.381 cv
250.818 322.943 250.502 323.707 250.502 324.502 cv
250.502 325.298 250.818 326.061 251.381 326.624 cv
251.943 327.186 252.706 327.502 253.502 327.502 cv
cp
f
253.502 327.502 mo
254.298 327.502 255.061 327.186 255.623 326.624 cv
256.186 326.061 256.502 325.298 256.502 324.502 cv
256.502 323.707 256.186 322.943 255.623 322.381 cv
255.061 321.818 254.298 321.502 253.502 321.502 cv
252.706 321.502 251.943 321.818 251.381 322.381 cv
250.818 322.943 250.502 323.707 250.502 324.502 cv
250.502 325.298 250.818 326.061 251.381 326.624 cv
251.943 327.186 252.706 327.502 253.502 327.502 cv
cp
@
473.646 53.4719 mo
474.442 53.4719 475.205 53.1559 475.767 52.5932 cv
476.33 52.0306 476.646 51.2676 476.646 50.4719 cv
476.646 49.6763 476.33 48.9132 475.767 48.3507 cv
475.205 47.788 474.442 47.472 473.646 47.472 cv
472.85 47.472 472.087 47.788 471.525 48.3507 cv
470.962 48.9132 470.646 49.6763 470.646 50.4719 cv
470.646 51.2676 470.962 52.0306 471.525 52.5932 cv
472.087 53.1559 472.85 53.4719 473.646 53.4719 cv
f
473.646 53.4719 mo
473.646 52.972 li
474.309 52.972 474.945 52.7085 475.414 52.2397 cv
475.883 51.7709 476.146 51.1349 476.146 50.4719 cv
476.146 49.809 475.883 49.173 475.414 48.7042 cv
474.945 48.2354 474.309 47.9719 473.646 47.9719 cv
472.983 47.9719 472.347 48.2354 471.878 48.7042 cv
471.41 49.173 471.146 49.809 471.146 50.4719 cv
471.146 51.1349 471.41 51.7709 471.878 52.2397 cv
472.347 52.7085 472.983 52.972 473.646 52.972 cv
473.646 53.4719 li
473.646 53.9719 li
472.718 53.9719 471.828 53.6031 471.171 52.9468 cv
470.515 52.2904 470.146 51.4001 470.146 50.4719 cv
470.146 49.5436 470.515 48.6535 471.171 47.997 cv
471.828 47.3407 472.718 46.9719 473.646 46.9719 cv
474.574 46.9719 475.465 47.3407 476.121 47.997 cv
476.777 48.6535 477.146 49.5436 477.146 50.4719 cv
477.146 51.4001 476.777 52.2904 476.121 52.9468 cv
475.465 53.6031 474.574 53.9719 473.646 53.9719 cv
473.646 53.4719 li
f
133.106 388.532 mo
133.902 388.532 134.665 388.216 135.228 387.653 cv
135.79 387.091 136.106 386.327 136.106 385.532 cv
136.106 384.736 135.79 383.973 135.228 383.41 cv
134.665 382.848 133.902 382.532 133.106 382.532 cv
132.311 382.532 131.547 382.848 130.985 383.41 cv
130.422 383.973 130.106 384.736 130.106 385.532 cv
130.106 386.327 130.422 387.091 130.985 387.653 cv
131.547 388.216 132.311 388.532 133.106 388.532 cv
cp
f
133.106 388.532 mo
133.902 388.532 134.665 388.216 135.228 387.653 cv
135.79 387.091 136.106 386.327 136.106 385.532 cv
136.106 384.736 135.79 383.973 135.228 383.41 cv
134.665 382.848 133.902 382.532 133.106 382.532 cv
132.311 382.532 131.547 382.848 130.985 383.41 cv
130.422 383.973 130.106 384.736 130.106 385.532 cv
130.106 386.327 130.422 387.091 130.985 387.653 cv
131.547 388.216 132.311 388.532 133.106 388.532 cv
cp
@
325.804 206.438 mo
326.599 206.438 327.362 206.122 327.925 205.559 cv
328.488 204.997 328.804 204.233 328.804 203.438 cv
328.804 202.642 328.488 201.879 327.925 201.317 cv
327.362 200.754 326.599 200.438 325.804 200.438 cv
325.008 200.438 324.245 200.754 323.682 201.317 cv
323.12 201.879 322.804 202.642 322.804 203.438 cv
322.804 204.233 323.12 204.997 323.682 205.559 cv
324.245 206.122 325.008 206.438 325.804 206.438 cv
cp
f
325.804 206.438 mo
326.599 206.438 327.362 206.122 327.925 205.559 cv
328.488 204.997 328.804 204.233 328.804 203.438 cv
328.804 202.642 328.488 201.879 327.925 201.317 cv
327.362 200.754 326.599 200.438 325.804 200.438 cv
325.008 200.438 324.245 200.754 323.682 201.317 cv
323.12 201.879 322.804 202.642 322.804 203.438 cv
322.804 204.233 323.12 204.997 323.682 205.559 cv
324.245 206.122 325.008 206.438 325.804 206.438 cv
cp
@
293.105 433.56 mo
293.901 433.56 294.664 433.244 295.226 432.681 cv
295.789 432.119 296.105 431.356 296.105 430.56 cv
296.105 429.764 295.789 429.001 295.226 428.439 cv
294.664 427.876 293.901 427.56 293.105 427.56 cv
292.31 427.56 291.546 427.876 290.984 428.439 cv
290.421 429.001 290.105 429.764 290.105 430.56 cv
290.105 431.356 290.421 432.119 290.984 432.681 cv
291.546 433.244 292.31 433.56 293.105 433.56 cv
cp
f
293.105 433.56 mo
293.901 433.56 294.664 433.244 295.226 432.681 cv
295.789 432.119 296.105 431.356 296.105 430.56 cv
296.105 429.764 295.789 429.001 295.226 428.439 cv
294.664 427.876 293.901 427.56 293.105 427.56 cv
292.31 427.56 291.546 427.876 290.984 428.439 cv
290.421 429.001 290.105 429.764 290.105 430.56 cv
290.105 431.356 290.421 432.119 290.984 432.681 cv
291.546 433.244 292.31 433.56 293.105 433.56 cv
cp
@
296.56 71.6438 mo
297.356 71.6438 298.119 71.3278 298.681 70.7653 cv
299.244 70.2026 299.56 69.4395 299.56 68.6439 cv
299.56 67.8483 299.244 67.0852 298.681 66.5226 cv
298.119 65.9599 297.356 65.6439 296.56 65.6439 cv
295.764 65.6439 295.001 65.9599 294.439 66.5226 cv
293.876 67.0852 293.56 67.8483 293.56 68.6439 cv
293.56 69.4395 293.876 70.2026 294.439 70.7653 cv
295.001 71.3278 295.764 71.6438 296.56 71.6438 cv
f
296.56 71.6438 mo
296.56 71.1439 li
297.223 71.1439 297.859 70.8804 298.328 70.4116 cv
298.797 69.9428 299.06 69.3068 299.06 68.6439 cv
299.06 67.9809 298.797 67.3449 298.328 66.8761 cv
297.859 66.4073 297.223 66.1439 296.56 66.1439 cv
295.897 66.1439 295.261 66.4073 294.792 66.8761 cv
294.323 67.3449 294.06 67.9809 294.06 68.6439 cv
294.06 69.3068 294.323 69.9428 294.792 70.4116 cv
295.261 70.8804 295.897 71.1439 296.56 71.1439 cv
296.56 71.6438 li
296.56 72.1439 li
295.632 72.1439 294.742 71.7751 294.085 71.1188 cv
293.429 70.4625 293.06 69.5722 293.06 68.6439 cv
293.06 67.7157 293.429 66.8254 294.085 66.169 cv
294.742 65.5127 295.632 65.1439 296.56 65.1439 cv
297.488 65.1439 298.379 65.5127 299.035 66.169 cv
299.691 66.8254 300.06 67.7157 300.06 68.6439 cv
300.06 69.5722 299.691 70.4625 299.035 71.1188 cv
298.379 71.7751 297.488 72.1439 296.56 72.1439 cv
296.56 71.6438 li
f
302.167 344.14 mo
302.963 344.14 303.726 343.824 304.288 343.262 cv
304.851 342.699 305.167 341.936 305.167 341.14 cv
305.167 340.345 304.851 339.582 304.288 339.019 cv
303.726 338.456 302.963 338.14 302.167 338.14 cv
301.371 338.14 300.608 338.456 300.046 339.019 cv
299.483 339.582 299.167 340.345 299.167 341.14 cv
299.167 341.936 299.483 342.699 300.046 343.262 cv
300.608 343.824 301.371 344.14 302.167 344.14 cv
cp
f
302.167 344.14 mo
302.963 344.14 303.726 343.824 304.288 343.262 cv
304.851 342.699 305.167 341.936 305.167 341.14 cv
305.167 340.345 304.851 339.582 304.288 339.019 cv
303.726 338.456 302.963 338.14 302.167 338.14 cv
301.371 338.14 300.608 338.456 300.046 339.019 cv
299.483 339.582 299.167 340.345 299.167 341.14 cv
299.167 341.936 299.483 342.699 300.046 343.262 cv
300.608 343.824 301.371 344.14 302.167 344.14 cv
cp
@
190.217 81.5436 mo
191.012 81.5436 191.776 81.2275 192.338 80.665 cv
192.901 80.1024 193.217 79.3392 193.217 78.5436 cv
193.217 77.748 192.901 76.9849 192.338 76.4223 cv
191.776 75.8597 191.012 75.5436 190.217 75.5436 cv
189.421 75.5436 188.658 75.8597 188.096 76.4223 cv
187.533 76.9849 187.217 77.748 187.217 78.5436 cv
187.217 79.3392 187.533 80.1024 188.096 80.665 cv
188.658 81.2275 189.421 81.5436 190.217 81.5436 cv
cp
f
190.217 81.5436 mo
191.012 81.5436 191.776 81.2275 192.338 80.665 cv
192.901 80.1024 193.217 79.3392 193.217 78.5436 cv
193.217 77.748 192.901 76.9849 192.338 76.4223 cv
191.776 75.8597 191.012 75.5436 190.217 75.5436 cv
189.421 75.5436 188.658 75.8597 188.096 76.4223 cv
187.533 76.9849 187.217 77.748 187.217 78.5436 cv
187.217 79.3392 187.533 80.1024 188.096 80.665 cv
188.658 81.2275 189.421 81.5436 190.217 81.5436 cv
cp
@
258.611 86.0626 mo
259.407 86.0626 260.17 85.7465 260.732 85.1839 cv
261.295 84.6214 261.611 83.8582 261.611 83.0626 cv
261.611 82.267 261.295 81.5039 260.732 80.9413 cv
260.17 80.3787 259.407 80.0626 258.611 80.0626 cv
257.815 80.0626 257.052 80.3787 256.49 80.9413 cv
255.927 81.5039 255.611 82.267 255.611 83.0626 cv
255.611 83.8582 255.927 84.6214 256.49 85.1839 cv
257.052 85.7465 257.815 86.0626 258.611 86.0626 cv
cp
f
258.611 86.0626 mo
259.407 86.0626 260.17 85.7465 260.732 85.1839 cv
261.295 84.6214 261.611 83.8582 261.611 83.0626 cv
261.611 82.267 261.295 81.5039 260.732 80.9413 cv
260.17 80.3787 259.407 80.0626 258.611 80.0626 cv
257.815 80.0626 257.052 80.3787 256.49 80.9413 cv
255.927 81.5039 255.611 82.267 255.611 83.0626 cv
255.611 83.8582 255.927 84.6214 256.49 85.1839 cv
257.052 85.7465 257.815 86.0626 258.611 86.0626 cv
cp
@
462.924 389.488 mo
463.72 389.488 464.483 389.172 465.045 388.609 cv
465.608 388.047 465.924 387.284 465.924 386.488 cv
465.924 385.692 465.608 384.929 465.045 384.367 cv
464.483 383.804 463.72 383.488 462.924 383.488 cv
462.128 383.488 461.365 383.804 460.803 384.367 cv
460.24 384.929 459.924 385.692 459.924 386.488 cv
459.924 387.284 460.24 388.047 460.803 388.609 cv
461.365 389.172 462.128 389.488 462.924 389.488 cv
cp
f
462.924 389.488 mo
463.72 389.488 464.483 389.172 465.045 388.609 cv
465.608 388.047 465.924 387.284 465.924 386.488 cv
465.924 385.692 465.608 384.929 465.045 384.367 cv
464.483 383.804 463.72 383.488 462.924 383.488 cv
462.128 383.488 461.365 383.804 460.803 384.367 cv
460.24 384.929 459.924 385.692 459.924 386.488 cv
459.924 387.284 460.24 388.047 460.803 388.609 cv
461.365 389.172 462.128 389.488 462.924 389.488 cv
cp
@
349.044 338.356 mo
349.84 338.356 350.603 338.04 351.166 337.477 cv
351.728 336.915 352.044 336.151 352.044 335.356 cv
352.044 334.56 351.728 333.797 351.166 333.234 cv
350.603 332.672 349.84 332.356 349.044 332.356 cv
348.249 332.356 347.486 332.672 346.923 333.234 cv
346.36 333.797 346.044 334.56 346.044 335.356 cv
346.044 336.151 346.36 336.915 346.923 337.477 cv
347.486 338.04 348.249 338.356 349.044 338.356 cv
cp
f
349.044 338.356 mo
349.84 338.356 350.603 338.04 351.166 337.477 cv
351.728 336.915 352.044 336.151 352.044 335.356 cv
352.044 334.56 351.728 333.797 351.166 333.234 cv
350.603 332.672 349.84 332.356 349.044 332.356 cv
348.249 332.356 347.486 332.672 346.923 333.234 cv
346.36 333.797 346.044 334.56 346.044 335.356 cv
346.044 336.151 346.36 336.915 346.923 337.477 cv
347.486 338.04 348.249 338.356 349.044 338.356 cv
cp
@
230.967 83.1285 mo
231.763 83.1285 232.526 82.8124 233.089 82.2499 cv
233.651 81.6873 233.967 80.9241 233.967 80.1285 cv
233.967 79.3329 233.651 78.5698 233.089 78.0072 cv
232.526 77.4446 231.763 77.1285 230.967 77.1285 cv
230.172 77.1285 229.409 77.4446 228.846 78.0072 cv
228.283 78.5698 227.967 79.3329 227.967 80.1285 cv
227.967 80.9241 228.283 81.6873 228.846 82.2499 cv
229.409 82.8124 230.172 83.1285 230.967 83.1285 cv
cp
f
230.967 83.1285 mo
231.763 83.1285 232.526 82.8124 233.089 82.2499 cv
233.651 81.6873 233.967 80.9241 233.967 80.1285 cv
233.967 79.3329 233.651 78.5698 233.089 78.0072 cv
232.526 77.4446 231.763 77.1285 230.967 77.1285 cv
230.172 77.1285 229.409 77.4446 228.846 78.0072 cv
228.283 78.5698 227.967 79.3329 227.967 80.1285 cv
227.967 80.9241 228.283 81.6873 228.846 82.2499 cv
229.409 82.8124 230.172 83.1285 230.967 83.1285 cv
cp
@
252.235 321.379 mo
253.031 321.379 253.794 321.063 254.357 320.5 cv
254.919 319.937 255.235 319.174 255.235 318.379 cv
255.235 317.583 254.919 316.82 254.357 316.257 cv
253.794 315.695 253.031 315.379 252.235 315.379 cv
251.44 315.379 250.677 315.695 250.114 316.257 cv
249.552 316.82 249.235 317.583 249.235 318.379 cv
249.235 319.174 249.552 319.937 250.114 320.5 cv
250.677 321.063 251.44 321.379 252.235 321.379 cv
cp
f
252.235 321.379 mo
253.031 321.379 253.794 321.063 254.357 320.5 cv
254.919 319.937 255.235 319.174 255.235 318.379 cv
255.235 317.583 254.919 316.82 254.357 316.257 cv
253.794 315.695 253.031 315.379 252.235 315.379 cv
251.44 315.379 250.677 315.695 250.114 316.257 cv
249.552 316.82 249.235 317.583 249.235 318.379 cv
249.235 319.174 249.552 319.937 250.114 320.5 cv
250.677 321.063 251.44 321.379 252.235 321.379 cv
cp
@
158.717 371.94 mo
159.512 371.94 160.275 371.624 160.838 371.061 cv
161.4 370.499 161.717 369.736 161.717 368.94 cv
161.717 368.144 161.4 367.381 160.838 366.819 cv
160.275 366.256 159.512 365.94 158.717 365.94 cv
157.921 365.94 157.158 366.256 156.595 366.819 cv
156.033 367.381 155.717 368.144 155.717 368.94 cv
155.717 369.736 156.033 370.499 156.595 371.061 cv
157.158 371.624 157.921 371.94 158.717 371.94 cv
cp
f
158.717 371.94 mo
159.512 371.94 160.275 371.624 160.838 371.061 cv
161.4 370.499 161.717 369.736 161.717 368.94 cv
161.717 368.144 161.4 367.381 160.838 366.819 cv
160.275 366.256 159.512 365.94 158.717 365.94 cv
157.921 365.94 157.158 366.256 156.595 366.819 cv
156.033 367.381 155.717 368.144 155.717 368.94 cv
155.717 369.736 156.033 370.499 156.595 371.061 cv
157.158 371.624 157.921 371.94 158.717 371.94 cv
cp
@
142.013 392.755 mo
142.809 392.755 143.572 392.438 144.134 391.876 cv
144.697 391.313 145.013 390.55 145.013 389.755 cv
145.013 388.959 144.697 388.196 144.134 387.633 cv
143.572 387.071 142.809 386.755 142.013 386.755 cv
141.217 386.755 140.454 387.071 139.892 387.633 cv
139.329 388.196 139.013 388.959 139.013 389.755 cv
139.013 390.55 139.329 391.313 139.892 391.876 cv
140.454 392.438 141.217 392.755 142.013 392.755 cv
cp
f
142.013 392.755 mo
142.809 392.755 143.572 392.438 144.134 391.876 cv
144.697 391.313 145.013 390.55 145.013 389.755 cv
145.013 388.959 144.697 388.196 144.134 387.633 cv
143.572 387.071 142.809 386.755 142.013 386.755 cv
141.217 386.755 140.454 387.071 139.892 387.633 cv
139.329 388.196 139.013 388.959 139.013 389.755 cv
139.013 390.55 139.329 391.313 139.892 391.876 cv
140.454 392.438 141.217 392.755 142.013 392.755 cv
cp
@
469.832 108.312 mo
470.627 108.312 471.391 107.996 471.953 107.434 cv
472.516 106.871 472.832 106.108 472.832 105.312 cv
472.832 104.517 472.516 103.754 471.953 103.191 cv
471.391 102.628 470.627 102.312 469.832 102.312 cv
469.036 102.312 468.273 102.628 467.711 103.191 cv
467.148 103.754 466.832 104.517 466.832 105.312 cv
466.832 106.108 467.148 106.871 467.711 107.434 cv
468.273 107.996 469.036 108.312 469.832 108.312 cv
cp
f
469.832 108.312 mo
470.627 108.312 471.391 107.996 471.953 107.434 cv
472.516 106.871 472.832 106.108 472.832 105.312 cv
472.832 104.517 472.516 103.754 471.953 103.191 cv
471.391 102.628 470.627 102.312 469.832 102.312 cv
469.036 102.312 468.273 102.628 467.711 103.191 cv
467.148 103.754 466.832 104.517 466.832 105.312 cv
466.832 106.108 467.148 106.871 467.711 107.434 cv
468.273 107.996 469.036 108.312 469.832 108.312 cv
cp
@
352.672 350.928 mo
353.467 350.928 354.23 350.612 354.793 350.049 cv
355.356 349.486 355.672 348.723 355.672 347.928 cv
355.672 347.132 355.356 346.369 354.793 345.806 cv
354.23 345.244 353.467 344.928 352.672 344.928 cv
351.876 344.928 351.113 345.244 350.55 345.806 cv
349.988 346.369 349.672 347.132 349.672 347.928 cv
349.672 348.723 349.988 349.486 350.55 350.049 cv
351.113 350.612 351.876 350.928 352.672 350.928 cv
cp
f
352.672 350.928 mo
353.467 350.928 354.23 350.612 354.793 350.049 cv
355.356 349.486 355.672 348.723 355.672 347.928 cv
355.672 347.132 355.356 346.369 354.793 345.806 cv
354.23 345.244 353.467 344.928 352.672 344.928 cv
351.876 344.928 351.113 345.244 350.55 345.806 cv
349.988 346.369 349.672 347.132 349.672 347.928 cv
349.672 348.723 349.988 349.486 350.55 350.049 cv
351.113 350.612 351.876 350.928 352.672 350.928 cv
cp
@
151.165 293.201 mo
151.961 293.201 152.724 292.885 153.286 292.322 cv
153.849 291.759 154.165 290.996 154.165 290.201 cv
154.165 289.405 153.849 288.642 153.286 288.079 cv
152.724 287.517 151.961 287.201 151.165 287.201 cv
150.369 287.201 149.606 287.517 149.044 288.079 cv
148.481 288.642 148.165 289.405 148.165 290.201 cv
148.165 290.996 148.481 291.759 149.044 292.322 cv
149.606 292.885 150.369 293.201 151.165 293.201 cv
cp
f
151.165 293.201 mo
151.961 293.201 152.724 292.885 153.286 292.322 cv
153.849 291.759 154.165 290.996 154.165 290.201 cv
154.165 289.405 153.849 288.642 153.286 288.079 cv
152.724 287.517 151.961 287.201 151.165 287.201 cv
150.369 287.201 149.606 287.517 149.044 288.079 cv
148.481 288.642 148.165 289.405 148.165 290.201 cv
148.165 290.996 148.481 291.759 149.044 292.322 cv
149.606 292.885 150.369 293.201 151.165 293.201 cv
cp
@
94.2609 98.3609 mo
95.0565 98.3609 95.8196 98.0448 96.3822 97.4823 cv
96.9448 96.9197 97.2609 96.1565 97.2609 95.3609 cv
97.2609 94.5653 96.9448 93.8022 96.3822 93.2396 cv
95.8196 92.677 95.0565 92.3609 94.2609 92.3609 cv
93.4653 92.3609 92.7021 92.677 92.1395 93.2396 cv
91.577 93.8022 91.2609 94.5653 91.2609 95.3609 cv
91.2609 96.1565 91.577 96.9197 92.1395 97.4823 cv
92.7021 98.0448 93.4653 98.3609 94.2609 98.3609 cv
cp
f
94.2609 98.3609 mo
95.0565 98.3609 95.8196 98.0448 96.3822 97.4823 cv
96.9448 96.9197 97.2609 96.1565 97.2609 95.3609 cv
97.2609 94.5653 96.9448 93.8022 96.3822 93.2396 cv
95.8196 92.677 95.0565 92.3609 94.2609 92.3609 cv
93.4653 92.3609 92.7021 92.677 92.1395 93.2396 cv
91.577 93.8022 91.2609 94.5653 91.2609 95.3609 cv
91.2609 96.1565 91.577 96.9197 92.1395 97.4823 cv
92.7021 98.0448 93.4653 98.3609 94.2609 98.3609 cv
cp
@
352.24 80.3665 mo
353.035 80.3665 353.798 80.0504 354.361 79.4878 cv
354.924 78.9252 355.24 78.1621 355.24 77.3664 cv
355.24 76.5709 354.924 75.8077 354.361 75.2452 cv
353.798 74.6826 353.035 74.3665 352.24 74.3665 cv
351.444 74.3665 350.681 74.6826 350.118 75.2452 cv
349.556 75.8077 349.24 76.5709 349.24 77.3664 cv
349.24 78.1621 349.556 78.9252 350.118 79.4878 cv
350.681 80.0504 351.444 80.3665 352.24 80.3665 cv
f
352.24 80.3665 mo
352.24 79.8665 li
352.903 79.8665 353.539 79.6031 354.007 79.1343 cv
354.476 78.6655 354.74 78.0295 354.74 77.3664 cv
354.74 76.7036 354.476 76.0675 354.007 75.5987 cv
353.539 75.1299 352.903 74.8665 352.24 74.8665 cv
351.577 74.8665 350.941 75.1299 350.472 75.5987 cv
350.003 76.0675 349.74 76.7036 349.74 77.3664 cv
349.74 78.0295 350.003 78.6655 350.472 79.1343 cv
350.941 79.6031 351.577 79.8665 352.24 79.8665 cv
352.24 80.3665 li
352.24 80.8664 li
351.311 80.8664 350.421 80.4977 349.765 79.8413 cv
349.108 79.185 348.74 78.2947 348.74 77.3664 cv
348.74 76.4382 349.108 75.548 349.765 74.8916 cv
350.421 74.2352 351.311 73.8665 352.24 73.8665 cv
353.168 73.8665 354.058 74.2352 354.715 74.8916 cv
355.371 75.548 355.74 76.4382 355.74 77.3664 cv
355.74 78.2947 355.371 79.185 354.715 79.8413 cv
354.058 80.4977 353.168 80.8664 352.24 80.8664 cv
352.24 80.3665 li
f
311.734 125.606 mo
312.53 125.606 313.293 125.29 313.855 124.727 cv
314.418 124.165 314.734 123.402 314.734 122.606 cv
314.734 121.811 314.418 121.047 313.855 120.485 cv
313.293 119.922 312.53 119.606 311.734 119.606 cv
310.938 119.606 310.175 119.922 309.613 120.485 cv
309.05 121.047 308.734 121.811 308.734 122.606 cv
308.734 123.402 309.05 124.165 309.613 124.727 cv
310.175 125.29 310.938 125.606 311.734 125.606 cv
cp
f
311.734 125.606 mo
312.53 125.606 313.293 125.29 313.855 124.727 cv
314.418 124.165 314.734 123.402 314.734 122.606 cv
314.734 121.811 314.418 121.047 313.855 120.485 cv
313.293 119.922 312.53 119.606 311.734 119.606 cv
310.938 119.606 310.175 119.922 309.613 120.485 cv
309.05 121.047 308.734 121.811 308.734 122.606 cv
308.734 123.402 309.05 124.165 309.613 124.727 cv
310.175 125.29 310.938 125.606 311.734 125.606 cv
cp
@
228.498 412.759 mo
229.293 412.759 230.056 412.443 230.619 411.88 cv
231.182 411.318 231.498 410.555 231.498 409.759 cv
231.498 408.963 231.182 408.2 230.619 407.638 cv
230.056 407.075 229.293 406.759 228.498 406.759 cv
227.702 406.759 226.939 407.075 226.376 407.638 cv
225.814 408.2 225.498 408.963 225.498 409.759 cv
225.498 410.555 225.814 411.318 226.376 411.88 cv
226.939 412.443 227.702 412.759 228.498 412.759 cv
cp
f
228.498 412.759 mo
229.293 412.759 230.056 412.443 230.619 411.88 cv
231.182 411.318 231.498 410.555 231.498 409.759 cv
231.498 408.963 231.182 408.2 230.619 407.638 cv
230.056 407.075 229.293 406.759 228.498 406.759 cv
227.702 406.759 226.939 407.075 226.376 407.638 cv
225.814 408.2 225.498 408.963 225.498 409.759 cv
225.498 410.555 225.814 411.318 226.376 411.88 cv
226.939 412.443 227.702 412.759 228.498 412.759 cv
cp
@
316.082 53.9246 mo
316.878 53.9246 317.641 53.6085 318.203 53.0459 cv
318.766 52.4834 319.082 51.7202 319.082 50.9247 cv
319.082 50.129 318.766 49.3659 318.203 48.8033 cv
317.641 48.2407 316.878 47.9246 316.082 47.9246 cv
315.287 47.9246 314.523 48.2407 313.961 48.8033 cv
313.398 49.3659 313.082 50.129 313.082 50.9247 cv
313.082 51.7202 313.398 52.4834 313.961 53.0459 cv
314.523 53.6085 315.287 53.9246 316.082 53.9246 cv
f
316.082 53.9246 mo
316.082 53.4246 li
316.745 53.4246 317.381 53.1612 317.85 52.6924 cv
318.319 52.2236 318.582 51.5876 318.582 50.9247 cv
318.582 50.2616 318.319 49.6256 317.85 49.1568 cv
317.381 48.688 316.745 48.4246 316.082 48.4246 cv
315.419 48.4246 314.783 48.688 314.314 49.1568 cv
313.846 49.6256 313.582 50.2616 313.582 50.9247 cv
313.582 51.5876 313.846 52.2236 314.314 52.6924 cv
314.783 53.1612 315.419 53.4246 316.082 53.4246 cv
316.082 53.9246 li
316.082 54.4246 li
315.154 54.4246 314.264 54.0559 313.607 53.3995 cv
312.951 52.7431 312.582 51.8529 312.582 50.9247 cv
312.582 49.9964 312.951 49.1061 313.607 48.4498 cv
314.264 47.7933 315.154 47.4247 316.082 47.4247 cv
317.01 47.4247 317.901 47.7933 318.557 48.4498 cv
319.213 49.1061 319.582 49.9964 319.582 50.9247 cv
319.582 51.8529 319.213 52.7431 318.557 53.3995 cv
317.901 54.0559 317.01 54.4246 316.082 54.4246 cv
316.082 53.9246 li
f
271.146 185.466 mo
271.941 185.466 272.705 185.15 273.267 184.587 cv
273.83 184.025 274.146 183.262 274.146 182.466 cv
274.146 181.67 273.83 180.907 273.267 180.345 cv
272.705 179.782 271.941 179.466 271.146 179.466 cv
270.35 179.466 269.587 179.782 269.025 180.345 cv
268.462 180.907 268.146 181.67 268.146 182.466 cv
268.146 183.262 268.462 184.025 269.025 184.587 cv
269.587 185.15 270.35 185.466 271.146 185.466 cv
cp
f
271.146 185.466 mo
271.941 185.466 272.705 185.15 273.267 184.587 cv
273.83 184.025 274.146 183.262 274.146 182.466 cv
274.146 181.67 273.83 180.907 273.267 180.345 cv
272.705 179.782 271.941 179.466 271.146 179.466 cv
270.35 179.466 269.587 179.782 269.025 180.345 cv
268.462 180.907 268.146 181.67 268.146 182.466 cv
268.146 183.262 268.462 184.025 269.025 184.587 cv
269.587 185.15 270.35 185.466 271.146 185.466 cv
cp
@
221.293 335.421 mo
222.089 335.421 222.852 335.105 223.415 334.543 cv
223.977 333.98 224.293 333.217 224.293 332.421 cv
224.293 331.626 223.977 330.862 223.415 330.3 cv
222.852 329.737 222.089 329.421 221.293 329.421 cv
220.498 329.421 219.734 329.737 219.172 330.3 cv
218.609 330.862 218.293 331.626 218.293 332.421 cv
218.293 333.217 218.609 333.98 219.172 334.543 cv
219.734 335.105 220.498 335.421 221.293 335.421 cv
cp
f
221.293 335.421 mo
222.089 335.421 222.852 335.105 223.415 334.543 cv
223.977 333.98 224.293 333.217 224.293 332.421 cv
224.293 331.626 223.977 330.862 223.415 330.3 cv
222.852 329.737 222.089 329.421 221.293 329.421 cv
220.498 329.421 219.734 329.737 219.172 330.3 cv
218.609 330.862 218.293 331.626 218.293 332.421 cv
218.293 333.217 218.609 333.98 219.172 334.543 cv
219.734 335.105 220.498 335.421 221.293 335.421 cv
cp
@
119.296 369.714 mo
120.092 369.714 120.855 369.398 121.418 368.835 cv
121.98 368.273 122.296 367.51 122.296 366.714 cv
122.296 365.918 121.98 365.155 121.418 364.593 cv
120.855 364.03 120.092 363.714 119.296 363.714 cv
118.501 363.714 117.738 364.03 117.175 364.593 cv
116.612 365.155 116.296 365.918 116.296 366.714 cv
116.296 367.51 116.612 368.273 117.175 368.835 cv
117.738 369.398 118.501 369.714 119.296 369.714 cv
cp
f
119.296 369.714 mo
120.092 369.714 120.855 369.398 121.418 368.835 cv
121.98 368.273 122.296 367.51 122.296 366.714 cv
122.296 365.918 121.98 365.155 121.418 364.593 cv
120.855 364.03 120.092 363.714 119.296 363.714 cv
118.501 363.714 117.738 364.03 117.175 364.593 cv
116.612 365.155 116.296 365.918 116.296 366.714 cv
116.296 367.51 116.612 368.273 117.175 368.835 cv
117.738 369.398 118.501 369.714 119.296 369.714 cv
cp
@
131.246 419.278 mo
132.041 419.278 132.804 418.962 133.367 418.399 cv
133.93 417.837 134.246 417.074 134.246 416.278 cv
134.246 415.482 133.93 414.719 133.367 414.157 cv
132.804 413.594 132.041 413.278 131.246 413.278 cv
130.45 413.278 129.687 413.594 129.124 414.157 cv
128.562 414.719 128.246 415.482 128.246 416.278 cv
128.246 417.074 128.562 417.837 129.124 418.399 cv
129.687 418.962 130.45 419.278 131.246 419.278 cv
cp
f
131.246 419.278 mo
132.041 419.278 132.804 418.962 133.367 418.399 cv
133.93 417.837 134.246 417.074 134.246 416.278 cv
134.246 415.482 133.93 414.719 133.367 414.157 cv
132.804 413.594 132.041 413.278 131.246 413.278 cv
130.45 413.278 129.687 413.594 129.124 414.157 cv
128.562 414.719 128.246 415.482 128.246 416.278 cv
128.246 417.074 128.562 417.837 129.124 418.399 cv
129.687 418.962 130.45 419.278 131.246 419.278 cv
cp
@
218.171 336.086 mo
218.967 336.086 219.73 335.77 220.292 335.208 cv
220.855 334.645 221.171 333.882 221.171 333.086 cv
221.171 332.291 220.855 331.528 220.292 330.965 cv
219.73 330.403 218.967 330.086 218.171 330.086 cv
217.375 330.086 216.612 330.403 216.05 330.965 cv
215.487 331.528 215.171 332.291 215.171 333.086 cv
215.171 333.882 215.487 334.645 216.05 335.208 cv
216.612 335.77 217.375 336.086 218.171 336.086 cv
cp
f
218.171 336.086 mo
218.967 336.086 219.73 335.77 220.292 335.208 cv
220.855 334.645 221.171 333.882 221.171 333.086 cv
221.171 332.291 220.855 331.528 220.292 330.965 cv
219.73 330.403 218.967 330.086 218.171 330.086 cv
217.375 330.086 216.612 330.403 216.05 330.965 cv
215.487 331.528 215.171 332.291 215.171 333.086 cv
215.171 333.882 215.487 334.645 216.05 335.208 cv
216.612 335.77 217.375 336.086 218.171 336.086 cv
cp
@
171.412 187.292 mo
172.208 187.292 172.971 186.976 173.534 186.413 cv
174.096 185.851 174.412 185.088 174.412 184.292 cv
174.412 183.496 174.096 182.733 173.534 182.171 cv
172.971 181.608 172.208 181.292 171.412 181.292 cv
170.617 181.292 169.853 181.608 169.291 182.171 cv
168.728 182.733 168.412 183.496 168.412 184.292 cv
168.412 185.088 168.728 185.851 169.291 186.413 cv
169.853 186.976 170.617 187.292 171.412 187.292 cv
cp
f
171.412 187.292 mo
172.208 187.292 172.971 186.976 173.534 186.413 cv
174.096 185.851 174.412 185.088 174.412 184.292 cv
174.412 183.496 174.096 182.733 173.534 182.171 cv
172.971 181.608 172.208 181.292 171.412 181.292 cv
170.617 181.292 169.853 181.608 169.291 182.171 cv
168.728 182.733 168.412 183.496 168.412 184.292 cv
168.412 185.088 168.728 185.851 169.291 186.413 cv
169.853 186.976 170.617 187.292 171.412 187.292 cv
cp
@
416.18 313.367 mo
416.976 313.367 417.739 313.05 418.302 312.488 cv
418.864 311.925 419.18 311.162 419.18 310.367 cv
419.18 309.571 418.864 308.808 418.302 308.245 cv
417.739 307.683 416.976 307.367 416.18 307.367 cv
415.385 307.367 414.622 307.683 414.059 308.245 cv
413.496 308.808 413.18 309.571 413.18 310.367 cv
413.18 311.162 413.496 311.925 414.059 312.488 cv
414.622 313.05 415.385 313.367 416.18 313.367 cv
cp
f
416.18 313.367 mo
416.976 313.367 417.739 313.05 418.302 312.488 cv
418.864 311.925 419.18 311.162 419.18 310.367 cv
419.18 309.571 418.864 308.808 418.302 308.245 cv
417.739 307.683 416.976 307.367 416.18 307.367 cv
415.385 307.367 414.622 307.683 414.059 308.245 cv
413.496 308.808 413.18 309.571 413.18 310.367 cv
413.18 311.162 413.496 311.925 414.059 312.488 cv
414.622 313.05 415.385 313.367 416.18 313.367 cv
cp
@
273.023 300.384 mo
273.819 300.384 274.582 300.068 275.145 299.506 cv
275.707 298.943 276.023 298.18 276.023 297.384 cv
276.023 296.589 275.707 295.826 275.145 295.263 cv
274.582 294.701 273.819 294.384 273.023 294.384 cv
272.228 294.384 271.465 294.701 270.902 295.263 cv
270.339 295.826 270.023 296.589 270.023 297.384 cv
270.023 298.18 270.339 298.943 270.902 299.506 cv
271.465 300.068 272.228 300.384 273.023 300.384 cv
cp
f
273.023 300.384 mo
273.819 300.384 274.582 300.068 275.145 299.506 cv
275.707 298.943 276.023 298.18 276.023 297.384 cv
276.023 296.589 275.707 295.826 275.145 295.263 cv
274.582 294.701 273.819 294.384 273.023 294.384 cv
272.228 294.384 271.465 294.701 270.902 295.263 cv
270.339 295.826 270.023 296.589 270.023 297.384 cv
270.023 298.18 270.339 298.943 270.902 299.506 cv
271.465 300.068 272.228 300.384 273.023 300.384 cv
cp
@
141.476 140.336 mo
142.271 140.336 143.034 140.02 143.597 139.457 cv
144.16 138.895 144.476 138.132 144.476 137.336 cv
144.476 136.54 144.16 135.777 143.597 135.215 cv
143.034 134.652 142.271 134.336 141.476 134.336 cv
140.68 134.336 139.917 134.652 139.354 135.215 cv
138.792 135.777 138.476 136.54 138.476 137.336 cv
138.476 138.132 138.792 138.895 139.354 139.457 cv
139.917 140.02 140.68 140.336 141.476 140.336 cv
cp
f
141.476 140.336 mo
142.271 140.336 143.034 140.02 143.597 139.457 cv
144.16 138.895 144.476 138.132 144.476 137.336 cv
144.476 136.54 144.16 135.777 143.597 135.215 cv
143.034 134.652 142.271 134.336 141.476 134.336 cv
140.68 134.336 139.917 134.652 139.354 135.215 cv
138.792 135.777 138.476 136.54 138.476 137.336 cv
138.476 138.132 138.792 138.895 139.354 139.457 cv
139.917 140.02 140.68 140.336 141.476 140.336 cv
cp
@
391.911 423.058 mo
392.706 423.058 393.47 422.742 394.032 422.179 cv
394.595 421.617 394.911 420.854 394.911 420.058 cv
394.911 419.262 394.595 418.499 394.032 417.937 cv
393.47 417.374 392.706 417.058 391.911 417.058 cv
391.115 417.058 390.352 417.374 389.789 417.937 cv
389.227 418.499 388.911 419.262 388.911 420.058 cv
388.911 420.854 389.227 421.617 389.789 422.179 cv
390.352 422.742 391.115 423.058 391.911 423.058 cv
cp
f
391.911 423.058 mo
392.706 423.058 393.47 422.742 394.032 422.179 cv
394.595 421.617 394.911 420.854 394.911 420.058 cv
394.911 419.262 394.595 418.499 394.032 417.937 cv
393.47 417.374 392.706 417.058 391.911 417.058 cv
391.115 417.058 390.352 417.374 389.789 417.937 cv
389.227 418.499 388.911 419.262 388.911 420.058 cv
388.911 420.854 389.227 421.617 389.789 422.179 cv
390.352 422.742 391.115 423.058 391.911 423.058 cv
cp
@
350.359 66.5062 mo
351.155 66.5062 351.918 66.1901 352.48 65.6275 cv
353.043 65.0648 353.359 64.3018 353.359 63.5061 cv
353.359 62.7105 353.043 61.9474 352.48 61.3849 cv
351.918 60.8223 351.155 60.5062 350.359 60.5062 cv
349.563 60.5062 348.8 60.8223 348.238 61.3849 cv
347.675 61.9474 347.359 62.7105 347.359 63.5061 cv
347.359 64.3018 347.675 65.0648 348.238 65.6275 cv
348.8 66.1901 349.563 66.5062 350.359 66.5062 cv
f
350.359 66.5062 mo
350.359 66.0062 li
351.022 66.0062 351.658 65.7428 352.127 65.274 cv
352.596 64.8052 352.859 64.1691 352.859 63.5061 cv
352.859 62.8432 352.596 62.2072 352.127 61.7384 cv
351.658 61.2696 351.022 61.0061 350.359 61.0061 cv
349.696 61.0061 349.06 61.2696 348.591 61.7384 cv
348.122 62.2072 347.859 62.8432 347.859 63.5061 cv
347.859 64.1691 348.122 64.8052 348.591 65.274 cv
349.06 65.7428 349.696 66.0062 350.359 66.0062 cv
350.359 66.5062 li
350.359 67.0061 li
349.431 67.0061 348.54 66.6373 347.884 65.981 cv
347.228 65.3247 346.859 64.4344 346.859 63.5061 cv
346.859 62.5779 347.228 61.6877 347.884 61.0312 cv
348.54 60.3749 349.431 60.0061 350.359 60.0061 cv
351.287 60.0061 352.178 60.3749 352.834 61.0312 cv
353.49 61.6877 353.859 62.5779 353.859 63.5061 cv
353.859 64.4344 353.49 65.3247 352.834 65.981 cv
352.178 66.6373 351.287 67.0061 350.359 67.0061 cv
350.359 66.5062 li
f
309.511 298.451 mo
310.307 298.451 311.07 298.135 311.633 297.573 cv
312.195 297.01 312.511 296.247 312.511 295.451 cv
312.511 294.656 312.195 293.893 311.633 293.33 cv
311.07 292.768 310.307 292.451 309.511 292.451 cv
308.716 292.451 307.953 292.768 307.39 293.33 cv
306.827 293.893 306.511 294.656 306.511 295.451 cv
306.511 296.247 306.827 297.01 307.39 297.573 cv
307.953 298.135 308.716 298.451 309.511 298.451 cv
cp
f
309.511 298.451 mo
310.307 298.451 311.07 298.135 311.633 297.573 cv
312.195 297.01 312.511 296.247 312.511 295.451 cv
312.511 294.656 312.195 293.893 311.633 293.33 cv
311.07 292.768 310.307 292.451 309.511 292.451 cv
308.716 292.451 307.953 292.768 307.39 293.33 cv
306.827 293.893 306.511 294.656 306.511 295.451 cv
306.511 296.247 306.827 297.01 307.39 297.573 cv
307.953 298.135 308.716 298.451 309.511 298.451 cv
cp
@
258.063 424.934 mo
258.859 424.934 259.622 424.618 260.184 424.055 cv
260.747 423.493 261.063 422.73 261.063 421.934 cv
261.063 421.138 260.747 420.375 260.184 419.813 cv
259.622 419.25 258.859 418.934 258.063 418.934 cv
257.267 418.934 256.504 419.25 255.942 419.813 cv
255.379 420.375 255.063 421.138 255.063 421.934 cv
255.063 422.73 255.379 423.493 255.942 424.055 cv
256.504 424.618 257.267 424.934 258.063 424.934 cv
cp
f
258.063 424.934 mo
258.859 424.934 259.622 424.618 260.184 424.055 cv
260.747 423.493 261.063 422.73 261.063 421.934 cv
261.063 421.138 260.747 420.375 260.184 419.813 cv
259.622 419.25 258.859 418.934 258.063 418.934 cv
257.267 418.934 256.504 419.25 255.942 419.813 cv
255.379 420.375 255.063 421.138 255.063 421.934 cv
255.063 422.73 255.379 423.493 255.942 424.055 cv
256.504 424.618 257.267 424.934 258.063 424.934 cv
cp
@
215.072 31.6243 mo
215.868 31.6243 216.631 31.3082 217.194 30.7456 cv
217.756 30.183 218.072 29.4199 218.072 28.6243 cv
218.072 27.8287 217.756 27.0656 217.194 26.503 cv
216.631 25.9404 215.868 25.6243 215.072 25.6243 cv
214.277 25.6243 213.514 25.9404 212.951 26.503 cv
212.388 27.0656 212.072 27.8287 212.072 28.6243 cv
212.072 29.4199 212.388 30.183 212.951 30.7456 cv
213.514 31.3082 214.277 31.6243 215.072 31.6243 cv
cp
f
215.072 31.6243 mo
215.868 31.6243 216.631 31.3082 217.194 30.7456 cv
217.756 30.183 218.072 29.4199 218.072 28.6243 cv
218.072 27.8287 217.756 27.0656 217.194 26.503 cv
216.631 25.9404 215.868 25.6243 215.072 25.6243 cv
214.277 25.6243 213.514 25.9404 212.951 26.503 cv
212.388 27.0656 212.072 27.8287 212.072 28.6243 cv
212.072 29.4199 212.388 30.183 212.951 30.7456 cv
213.514 31.3082 214.277 31.6243 215.072 31.6243 cv
cp
@
174.718 324.697 mo
175.514 324.697 176.277 324.381 176.839 323.818 cv
177.402 323.256 177.718 322.492 177.718 321.697 cv
177.718 320.901 177.402 320.138 176.839 319.576 cv
176.277 319.013 175.514 318.697 174.718 318.697 cv
173.922 318.697 173.159 319.013 172.597 319.576 cv
172.034 320.138 171.718 320.901 171.718 321.697 cv
171.718 322.492 172.034 323.256 172.597 323.818 cv
173.159 324.381 173.922 324.697 174.718 324.697 cv
cp
f
174.718 324.697 mo
175.514 324.697 176.277 324.381 176.839 323.818 cv
177.402 323.256 177.718 322.492 177.718 321.697 cv
177.718 320.901 177.402 320.138 176.839 319.576 cv
176.277 319.013 175.514 318.697 174.718 318.697 cv
173.922 318.697 173.159 319.013 172.597 319.576 cv
172.034 320.138 171.718 320.901 171.718 321.697 cv
171.718 322.492 172.034 323.256 172.597 323.818 cv
173.159 324.381 173.922 324.697 174.718 324.697 cv
cp
@
305.988 102.931 mo
306.784 102.931 307.547 102.615 308.11 102.052 cv
308.672 101.489 308.988 100.726 308.988 99.9307 cv
308.988 99.1351 308.672 98.3719 308.11 97.8093 cv
307.547 97.2468 306.784 96.9307 305.988 96.9307 cv
305.193 96.9307 304.43 97.2468 303.867 97.8093 cv
303.305 98.3719 302.988 99.1351 302.988 99.9307 cv
302.988 100.726 303.305 101.489 303.867 102.052 cv
304.43 102.615 305.193 102.931 305.988 102.931 cv
cp
f
305.988 102.931 mo
306.784 102.931 307.547 102.615 308.11 102.052 cv
308.672 101.489 308.988 100.726 308.988 99.9307 cv
308.988 99.1351 308.672 98.3719 308.11 97.8093 cv
307.547 97.2468 306.784 96.9307 305.988 96.9307 cv
305.193 96.9307 304.43 97.2468 303.867 97.8093 cv
303.305 98.3719 302.988 99.1351 302.988 99.9307 cv
302.988 100.726 303.305 101.489 303.867 102.052 cv
304.43 102.615 305.193 102.931 305.988 102.931 cv
cp
@
387.793 128.215 mo
388.588 128.215 389.352 127.898 389.914 127.336 cv
390.477 126.773 390.793 126.01 390.793 125.215 cv
390.793 124.419 390.477 123.656 389.914 123.093 cv
389.352 122.531 388.588 122.215 387.793 122.215 cv
386.997 122.215 386.234 122.531 385.672 123.093 cv
385.109 123.656 384.793 124.419 384.793 125.215 cv
384.793 126.01 385.109 126.773 385.672 127.336 cv
386.234 127.898 386.997 128.215 387.793 128.215 cv
cp
f
387.793 128.215 mo
388.588 128.215 389.352 127.898 389.914 127.336 cv
390.477 126.773 390.793 126.01 390.793 125.215 cv
390.793 124.419 390.477 123.656 389.914 123.093 cv
389.352 122.531 388.588 122.215 387.793 122.215 cv
386.997 122.215 386.234 122.531 385.672 123.093 cv
385.109 123.656 384.793 124.419 384.793 125.215 cv
384.793 126.01 385.109 126.773 385.672 127.336 cv
386.234 127.898 386.997 128.215 387.793 128.215 cv
cp
@
74.1356 363.563 mo
74.9312 363.563 75.6944 363.247 76.2569 362.685 cv
76.8195 362.122 77.1356 361.359 77.1356 360.563 cv
77.1356 359.768 76.8195 359.004 76.2569 358.442 cv
75.6944 357.879 74.9312 357.563 74.1356 357.563 cv
73.34 357.563 72.5769 357.879 72.0143 358.442 cv
71.4517 359.004 71.1356 359.768 71.1356 360.563 cv
71.1356 361.359 71.4517 362.122 72.0143 362.685 cv
72.5769 363.247 73.34 363.563 74.1356 363.563 cv
cp
f
74.1356 363.563 mo
74.9312 363.563 75.6944 363.247 76.2569 362.685 cv
76.8195 362.122 77.1356 361.359 77.1356 360.563 cv
77.1356 359.768 76.8195 359.004 76.2569 358.442 cv
75.6944 357.879 74.9312 357.563 74.1356 357.563 cv
73.34 357.563 72.5769 357.879 72.0143 358.442 cv
71.4517 359.004 71.1356 359.768 71.1356 360.563 cv
71.1356 361.359 71.4517 362.122 72.0143 362.685 cv
72.5769 363.247 73.34 363.563 74.1356 363.563 cv
cp
@
452.671 88.9638 mo
453.466 88.9638 454.229 88.6477 454.792 88.0851 cv
455.355 87.5225 455.671 86.7594 455.671 85.9637 cv
455.671 85.1682 455.355 84.405 454.792 83.8425 cv
454.229 83.2799 453.466 82.9638 452.671 82.9638 cv
451.875 82.9638 451.112 83.2799 450.549 83.8425 cv
449.987 84.405 449.671 85.1682 449.671 85.9637 cv
449.671 86.7594 449.987 87.5225 450.549 88.0851 cv
451.112 88.6477 451.875 88.9638 452.671 88.9638 cv
f
452.671 88.9638 mo
452.671 88.4637 li
453.334 88.4638 453.97 88.2004 454.438 87.7316 cv
454.907 87.2628 455.171 86.6268 455.171 85.9637 cv
455.171 85.3008 454.907 84.6648 454.438 84.196 cv
453.97 83.7272 453.334 83.4638 452.671 83.4638 cv
452.008 83.4638 451.372 83.7272 450.903 84.196 cv
450.434 84.6648 450.171 85.3008 450.171 85.9637 cv
450.171 86.6268 450.434 87.2628 450.903 87.7316 cv
451.372 88.2004 452.008 88.4638 452.671 88.4637 cv
452.671 88.9638 li
452.671 89.4637 li
451.742 89.4637 450.852 89.095 450.196 88.4386 cv
449.539 87.7823 449.171 86.892 449.171 85.9637 cv
449.171 85.0355 449.539 84.1453 450.196 83.4889 cv
450.852 82.8325 451.742 82.4638 452.671 82.4638 cv
453.599 82.4638 454.489 82.8325 455.145 83.4889 cv
455.802 84.1453 456.171 85.0355 456.171 85.9637 cv
456.171 86.892 455.802 87.7823 455.145 88.4386 cv
454.489 89.095 453.599 89.4637 452.671 89.4637 cv
452.671 88.9638 li
f
421.912 293.637 mo
422.707 293.637 423.471 293.321 424.033 292.758 cv
424.596 292.196 424.912 291.432 424.912 290.637 cv
424.912 289.841 424.596 289.078 424.033 288.515 cv
423.471 287.953 422.707 287.637 421.912 287.637 cv
421.116 287.637 420.353 287.953 419.79 288.515 cv
419.228 289.078 418.912 289.841 418.912 290.637 cv
418.912 291.432 419.228 292.196 419.79 292.758 cv
420.353 293.321 421.116 293.637 421.912 293.637 cv
cp
f
421.912 293.637 mo
422.707 293.637 423.471 293.321 424.033 292.758 cv
424.596 292.196 424.912 291.432 424.912 290.637 cv
424.912 289.841 424.596 289.078 424.033 288.515 cv
423.471 287.953 422.707 287.637 421.912 287.637 cv
421.116 287.637 420.353 287.953 419.79 288.515 cv
419.228 289.078 418.912 289.841 418.912 290.637 cv
418.912 291.432 419.228 292.196 419.79 292.758 cv
420.353 293.321 421.116 293.637 421.912 293.637 cv
cp
@
424.586 362.551 mo
425.382 362.551 426.145 362.235 426.707 361.672 cv
427.27 361.11 427.586 360.347 427.586 359.551 cv
427.586 358.756 427.27 357.992 426.707 357.43 cv
426.145 356.867 425.382 356.551 424.586 356.551 cv
423.79 356.551 423.027 356.867 422.465 357.43 cv
421.902 357.992 421.586 358.756 421.586 359.551 cv
421.586 360.347 421.902 361.11 422.465 361.672 cv
423.027 362.235 423.79 362.551 424.586 362.551 cv
cp
f
424.586 362.551 mo
425.382 362.551 426.145 362.235 426.707 361.672 cv
427.27 361.11 427.586 360.347 427.586 359.551 cv
427.586 358.756 427.27 357.992 426.707 357.43 cv
426.145 356.867 425.382 356.551 424.586 356.551 cv
423.79 356.551 423.027 356.867 422.465 357.43 cv
421.902 357.992 421.586 358.756 421.586 359.551 cv
421.586 360.347 421.902 361.11 422.465 361.672 cv
423.027 362.235 423.79 362.551 424.586 362.551 cv
cp
@
313.343 368.469 mo
314.139 368.469 314.902 368.153 315.464 367.59 cv
316.027 367.028 316.343 366.264 316.343 365.469 cv
316.343 364.673 316.027 363.91 315.464 363.347 cv
314.902 362.785 314.139 362.469 313.343 362.469 cv
312.547 362.469 311.784 362.785 311.222 363.347 cv
310.659 363.91 310.343 364.673 310.343 365.469 cv
310.343 366.264 310.659 367.028 311.222 367.59 cv
311.784 368.153 312.547 368.469 313.343 368.469 cv
cp
f
313.343 368.469 mo
314.139 368.469 314.902 368.153 315.464 367.59 cv
316.027 367.028 316.343 366.264 316.343 365.469 cv
316.343 364.673 316.027 363.91 315.464 363.347 cv
314.902 362.785 314.139 362.469 313.343 362.469 cv
312.547 362.469 311.784 362.785 311.222 363.347 cv
310.659 363.91 310.343 364.673 310.343 365.469 cv
310.343 366.264 310.659 367.028 311.222 367.59 cv
311.784 368.153 312.547 368.469 313.343 368.469 cv
cp
@
309.829 257.97 mo
310.625 257.97 311.388 257.654 311.95 257.091 cv
312.513 256.528 312.829 255.765 312.829 254.97 cv
312.829 254.174 312.513 253.411 311.95 252.848 cv
311.388 252.286 310.625 251.97 309.829 251.97 cv
309.034 251.97 308.27 252.286 307.708 252.848 cv
307.145 253.411 306.829 254.174 306.829 254.97 cv
306.829 255.765 307.145 256.528 307.708 257.091 cv
308.27 257.654 309.034 257.97 309.829 257.97 cv
cp
f
309.829 257.97 mo
310.625 257.97 311.388 257.654 311.95 257.091 cv
312.513 256.528 312.829 255.765 312.829 254.97 cv
312.829 254.174 312.513 253.411 311.95 252.848 cv
311.388 252.286 310.625 251.97 309.829 251.97 cv
309.034 251.97 308.27 252.286 307.708 252.848 cv
307.145 253.411 306.829 254.174 306.829 254.97 cv
306.829 255.765 307.145 256.528 307.708 257.091 cv
308.27 257.654 309.034 257.97 309.829 257.97 cv
cp
@
84.3949 151.025 mo
85.1905 151.025 85.9537 150.708 86.5162 150.146 cv
87.0788 149.583 87.3949 148.82 87.3949 148.025 cv
87.3949 147.229 87.0788 146.466 86.5162 145.903 cv
85.9537 145.341 85.1905 145.025 84.3949 145.025 cv
83.5993 145.025 82.8362 145.341 82.2736 145.903 cv
81.711 146.466 81.3949 147.229 81.3949 148.025 cv
81.3949 148.82 81.711 149.583 82.2736 150.146 cv
82.8362 150.708 83.5993 151.025 84.3949 151.025 cv
cp
f
84.3949 151.025 mo
85.1905 151.025 85.9537 150.708 86.5162 150.146 cv
87.0788 149.583 87.3949 148.82 87.3949 148.025 cv
87.3949 147.229 87.0788 146.466 86.5162 145.903 cv
85.9537 145.341 85.1905 145.025 84.3949 145.025 cv
83.5993 145.025 82.8362 145.341 82.2736 145.903 cv
81.711 146.466 81.3949 147.229 81.3949 148.025 cv
81.3949 148.82 81.711 149.583 82.2736 150.146 cv
82.8362 150.708 83.5993 151.025 84.3949 151.025 cv
cp
@
191.288 371.929 mo
192.084 371.929 192.847 371.613 193.409 371.051 cv
193.972 370.488 194.288 369.725 194.288 368.929 cv
194.288 368.134 193.972 367.37 193.409 366.808 cv
192.847 366.245 192.084 365.929 191.288 365.929 cv
190.492 365.929 189.729 366.245 189.167 366.808 cv
188.604 367.37 188.288 368.134 188.288 368.929 cv
188.288 369.725 188.604 370.488 189.167 371.051 cv
189.729 371.613 190.492 371.929 191.288 371.929 cv
cp
f
191.288 371.929 mo
192.084 371.929 192.847 371.613 193.409 371.051 cv
193.972 370.488 194.288 369.725 194.288 368.929 cv
194.288 368.134 193.972 367.37 193.409 366.808 cv
192.847 366.245 192.084 365.929 191.288 365.929 cv
190.492 365.929 189.729 366.245 189.167 366.808 cv
188.604 367.37 188.288 368.134 188.288 368.929 cv
188.288 369.725 188.604 370.488 189.167 371.051 cv
189.729 371.613 190.492 371.929 191.288 371.929 cv
cp
@
128.757 112.151 mo
129.553 112.151 130.316 111.835 130.878 111.272 cv
131.441 110.71 131.757 109.947 131.757 109.151 cv
131.757 108.355 131.441 107.592 130.878 107.03 cv
130.316 106.467 129.553 106.151 128.757 106.151 cv
127.961 106.151 127.198 106.467 126.636 107.03 cv
126.073 107.592 125.757 108.355 125.757 109.151 cv
125.757 109.947 126.073 110.71 126.636 111.272 cv
127.198 111.835 127.961 112.151 128.757 112.151 cv
cp
f
128.757 112.151 mo
129.553 112.151 130.316 111.835 130.878 111.272 cv
131.441 110.71 131.757 109.947 131.757 109.151 cv
131.757 108.355 131.441 107.592 130.878 107.03 cv
130.316 106.467 129.553 106.151 128.757 106.151 cv
127.961 106.151 127.198 106.467 126.636 107.03 cv
126.073 107.592 125.757 108.355 125.757 109.151 cv
125.757 109.947 126.073 110.71 126.636 111.272 cv
127.198 111.835 127.961 112.151 128.757 112.151 cv
cp
@
472.46 97.8639 mo
473.255 97.8639 474.018 97.5478 474.581 96.9852 cv
475.143 96.4227 475.46 95.6596 475.46 94.864 cv
475.46 94.0683 475.143 93.3053 474.581 92.7426 cv
474.018 92.18 473.255 91.8639 472.46 91.8639 cv
471.664 91.8639 470.901 92.18 470.338 92.7426 cv
469.776 93.3053 469.46 94.0683 469.46 94.864 cv
469.46 95.6596 469.776 96.4227 470.338 96.9852 cv
470.901 97.5478 471.664 97.8639 472.46 97.8639 cv
f
472.46 97.8639 mo
472.46 97.364 li
473.123 97.364 473.759 97.1005 474.227 96.6317 cv
474.696 96.1629 474.959 95.5269 474.959 94.864 cv
474.959 94.201 474.696 93.5649 474.227 93.0961 cv
473.759 92.6273 473.123 92.3639 472.46 92.364 cv
471.796 92.3639 471.161 92.6273 470.692 93.0961 cv
470.223 93.5649 469.96 94.201 469.96 94.864 cv
469.96 95.5269 470.223 96.1629 470.692 96.6317 cv
471.161 97.1005 471.796 97.364 472.46 97.364 cv
472.46 97.8639 li
472.46 98.364 li
471.531 98.364 470.641 97.9952 469.985 97.3389 cv
469.328 96.6824 468.96 95.7922 468.96 94.864 cv
468.96 93.9357 469.328 93.0454 469.985 92.3891 cv
470.641 91.7328 471.531 91.364 472.46 91.364 cv
473.388 91.364 474.278 91.7328 474.934 92.3891 cv
475.591 93.0454 475.959 93.9357 475.959 94.864 cv
475.959 95.7922 475.591 96.6824 474.934 97.3389 cv
474.278 97.9952 473.388 98.364 472.46 98.364 cv
472.46 97.8639 li
f
88.6088 141.023 mo
89.4044 141.023 90.1675 140.707 90.7301 140.144 cv
91.2927 139.582 91.6088 138.818 91.6088 138.023 cv
91.6088 137.227 91.2927 136.464 90.7301 135.901 cv
90.1675 135.339 89.4044 135.023 88.6088 135.023 cv
87.8132 135.023 87.05 135.339 86.4874 135.901 cv
85.9249 136.464 85.6088 137.227 85.6088 138.023 cv
85.6088 138.818 85.9249 139.582 86.4874 140.144 cv
87.05 140.707 87.8132 141.023 88.6088 141.023 cv
cp
f
88.6088 141.023 mo
89.4044 141.023 90.1675 140.707 90.7301 140.144 cv
91.2927 139.582 91.6088 138.818 91.6088 138.023 cv
91.6088 137.227 91.2927 136.464 90.7301 135.901 cv
90.1675 135.339 89.4044 135.023 88.6088 135.023 cv
87.8132 135.023 87.05 135.339 86.4874 135.901 cv
85.9249 136.464 85.6088 137.227 85.6088 138.023 cv
85.6088 138.818 85.9249 139.582 86.4874 140.144 cv
87.05 140.707 87.8132 141.023 88.6088 141.023 cv
cp
@
212.042 428.504 mo
212.838 428.504 213.601 428.188 214.164 427.625 cv
214.726 427.063 215.042 426.299 215.042 425.504 cv
215.042 424.708 214.726 423.945 214.164 423.383 cv
213.601 422.82 212.838 422.504 212.042 422.504 cv
211.247 422.504 210.484 422.82 209.921 423.383 cv
209.358 423.945 209.042 424.708 209.042 425.504 cv
209.042 426.299 209.358 427.063 209.921 427.625 cv
210.484 428.188 211.247 428.504 212.042 428.504 cv
cp
f
212.042 428.504 mo
212.838 428.504 213.601 428.188 214.164 427.625 cv
214.726 427.063 215.042 426.299 215.042 425.504 cv
215.042 424.708 214.726 423.945 214.164 423.383 cv
213.601 422.82 212.838 422.504 212.042 422.504 cv
211.247 422.504 210.484 422.82 209.921 423.383 cv
209.358 423.945 209.042 424.708 209.042 425.504 cv
209.042 426.299 209.358 427.063 209.921 427.625 cv
210.484 428.188 211.247 428.504 212.042 428.504 cv
cp
@
131.054 283.58 mo
131.85 283.58 132.613 283.264 133.175 282.702 cv
133.738 282.139 134.054 281.376 134.054 280.58 cv
134.054 279.785 133.738 279.021 133.175 278.459 cv
132.613 277.896 131.85 277.58 131.054 277.58 cv
130.258 277.58 129.495 277.896 128.933 278.459 cv
128.37 279.021 128.054 279.785 128.054 280.58 cv
128.054 281.376 128.37 282.139 128.933 282.702 cv
129.495 283.264 130.258 283.58 131.054 283.58 cv
cp
f
131.054 283.58 mo
131.85 283.58 132.613 283.264 133.175 282.702 cv
133.738 282.139 134.054 281.376 134.054 280.58 cv
134.054 279.785 133.738 279.021 133.175 278.459 cv
132.613 277.896 131.85 277.58 131.054 277.58 cv
130.258 277.58 129.495 277.896 128.933 278.459 cv
128.37 279.021 128.054 279.785 128.054 280.58 cv
128.054 281.376 128.37 282.139 128.933 282.702 cv
129.495 283.264 130.258 283.58 131.054 283.58 cv
cp
@
412.015 71.6424 mo
412.811 71.6424 413.574 71.3264 414.137 70.7638 cv
414.699 70.2011 415.016 69.438 415.016 68.6424 cv
415.016 67.8468 414.699 67.0837 414.137 66.521 cv
413.574 65.9585 412.811 65.6425 412.015 65.6425 cv
411.22 65.6425 410.457 65.9585 409.894 66.521 cv
409.332 67.0837 409.015 67.8468 409.015 68.6424 cv
409.015 69.438 409.332 70.2011 409.894 70.7638 cv
410.457 71.3264 411.22 71.6424 412.015 71.6424 cv
f
412.015 71.6424 mo
412.015 71.1424 li
412.678 71.1424 413.314 70.879 413.783 70.4102 cv
414.252 69.9415 414.515 69.3054 414.515 68.6424 cv
414.515 67.9794 414.252 67.3435 413.783 66.8747 cv
413.314 66.4059 412.678 66.1424 412.015 66.1424 cv
411.352 66.1424 410.717 66.4059 410.248 66.8747 cv
409.779 67.3435 409.516 67.9794 409.516 68.6424 cv
409.516 69.3054 409.779 69.9415 410.248 70.4102 cv
410.717 70.879 411.352 71.1424 412.015 71.1424 cv
412.015 71.6424 li
412.015 72.1424 li
411.087 72.1424 410.197 71.7736 409.541 71.1173 cv
408.884 70.4609 408.515 69.5707 408.515 68.6424 cv
408.515 67.7141 408.884 66.8239 409.541 66.1675 cv
410.197 65.5112 411.087 65.1424 412.015 65.1424 cv
412.944 65.1424 413.834 65.5112 414.49 66.1675 cv
415.147 66.8239 415.515 67.7141 415.515 68.6424 cv
415.515 69.5707 415.147 70.4609 414.49 71.1173 cv
413.834 71.7736 412.944 72.1424 412.015 72.1424 cv
412.015 71.6424 li
f
352.067 397.433 mo
352.862 397.433 353.625 397.117 354.188 396.554 cv
354.75 395.992 355.067 395.229 355.067 394.433 cv
355.067 393.637 354.75 392.874 354.188 392.312 cv
353.625 391.749 352.862 391.433 352.067 391.433 cv
351.271 391.433 350.508 391.749 349.945 392.312 cv
349.383 392.874 349.067 393.637 349.067 394.433 cv
349.067 395.229 349.383 395.992 349.945 396.554 cv
350.508 397.117 351.271 397.433 352.067 397.433 cv
cp
.775448 .113313 1 0 cmyk
f
352.067 397.433 mo
352.862 397.433 353.625 397.117 354.188 396.554 cv
354.75 395.992 355.067 395.229 355.067 394.433 cv
355.067 393.637 354.75 392.874 354.188 392.312 cv
353.625 391.749 352.862 391.433 352.067 391.433 cv
351.271 391.433 350.508 391.749 349.945 392.312 cv
349.383 392.874 349.067 393.637 349.067 394.433 cv
349.067 395.229 349.383 395.992 349.945 396.554 cv
350.508 397.117 351.271 397.433 352.067 397.433 cv
cp
@
246.631 332.674 mo
247.427 332.674 248.19 332.358 248.752 331.796 cv
249.315 331.233 249.631 330.47 249.631 329.674 cv
249.631 328.879 249.315 328.116 248.752 327.553 cv
248.19 326.99 247.427 326.674 246.631 326.674 cv
245.835 326.674 245.072 326.99 244.51 327.553 cv
243.947 328.116 243.631 328.879 243.631 329.674 cv
243.631 330.47 243.947 331.233 244.51 331.796 cv
245.072 332.358 245.835 332.674 246.631 332.674 cv
cp
f
246.631 332.674 mo
247.427 332.674 248.19 332.358 248.752 331.796 cv
249.315 331.233 249.631 330.47 249.631 329.674 cv
249.631 328.879 249.315 328.116 248.752 327.553 cv
248.19 326.99 247.427 326.674 246.631 326.674 cv
245.835 326.674 245.072 326.99 244.51 327.553 cv
243.947 328.116 243.631 328.879 243.631 329.674 cv
243.631 330.47 243.947 331.233 244.51 331.796 cv
245.072 332.358 245.835 332.674 246.631 332.674 cv
cp
@
336.089 427.946 mo
336.885 427.946 337.648 427.63 338.211 427.067 cv
338.773 426.504 339.089 425.741 339.089 424.946 cv
339.089 424.15 338.773 423.387 338.211 422.824 cv
337.648 422.262 336.885 421.946 336.089 421.946 cv
335.294 421.946 334.531 422.262 333.968 422.824 cv
333.406 423.387 333.089 424.15 333.089 424.946 cv
333.089 425.741 333.406 426.504 333.968 427.067 cv
334.531 427.63 335.294 427.946 336.089 427.946 cv
cp
f
336.089 427.946 mo
336.885 427.946 337.648 427.63 338.211 427.067 cv
338.773 426.504 339.089 425.741 339.089 424.946 cv
339.089 424.15 338.773 423.387 338.211 422.824 cv
337.648 422.262 336.885 421.946 336.089 421.946 cv
335.294 421.946 334.531 422.262 333.968 422.824 cv
333.406 423.387 333.089 424.15 333.089 424.946 cv
333.089 425.741 333.406 426.504 333.968 427.067 cv
334.531 427.63 335.294 427.946 336.089 427.946 cv
cp
@
364.968 379.919 mo
365.764 379.919 366.527 379.603 367.089 379.04 cv
367.652 378.478 367.968 377.715 367.968 376.919 cv
367.968 376.123 367.652 375.36 367.089 374.798 cv
366.527 374.235 365.764 373.919 364.968 373.919 cv
364.173 373.919 363.409 374.235 362.847 374.798 cv
362.284 375.36 361.968 376.123 361.968 376.919 cv
361.968 377.715 362.284 378.478 362.847 379.04 cv
363.409 379.603 364.173 379.919 364.968 379.919 cv
cp
f
364.968 379.919 mo
365.764 379.919 366.527 379.603 367.089 379.04 cv
367.652 378.478 367.968 377.715 367.968 376.919 cv
367.968 376.123 367.652 375.36 367.089 374.798 cv
366.527 374.235 365.764 373.919 364.968 373.919 cv
364.173 373.919 363.409 374.235 362.847 374.798 cv
362.284 375.36 361.968 376.123 361.968 376.919 cv
361.968 377.715 362.284 378.478 362.847 379.04 cv
363.409 379.603 364.173 379.919 364.968 379.919 cv
cp
@
298.809 356.45 mo
299.605 356.45 300.368 356.134 300.931 355.572 cv
301.493 355.009 301.809 354.246 301.809 353.45 cv
301.809 352.655 301.493 351.892 300.931 351.329 cv
300.368 350.767 299.605 350.45 298.809 350.45 cv
298.014 350.45 297.25 350.767 296.688 351.329 cv
296.125 351.892 295.809 352.655 295.809 353.45 cv
295.809 354.246 296.125 355.009 296.688 355.572 cv
297.25 356.134 298.014 356.45 298.809 356.45 cv
cp
f
298.809 356.45 mo
299.605 356.45 300.368 356.134 300.931 355.572 cv
301.493 355.009 301.809 354.246 301.809 353.45 cv
301.809 352.655 301.493 351.892 300.931 351.329 cv
300.368 350.767 299.605 350.45 298.809 350.45 cv
298.014 350.45 297.25 350.767 296.688 351.329 cv
296.125 351.892 295.809 352.655 295.809 353.45 cv
295.809 354.246 296.125 355.009 296.688 355.572 cv
297.25 356.134 298.014 356.45 298.809 356.45 cv
cp
@
355.539 386.873 mo
356.334 386.873 357.097 386.557 357.66 385.994 cv
358.222 385.432 358.539 384.669 358.539 383.873 cv
358.539 383.077 358.222 382.314 357.66 381.752 cv
357.097 381.189 356.334 380.873 355.539 380.873 cv
354.743 380.873 353.98 381.189 353.417 381.752 cv
352.855 382.314 352.539 383.077 352.539 383.873 cv
352.539 384.669 352.855 385.432 353.417 385.994 cv
353.98 386.557 354.743 386.873 355.539 386.873 cv
cp
f
355.539 386.873 mo
356.334 386.873 357.097 386.557 357.66 385.994 cv
358.222 385.432 358.539 384.669 358.539 383.873 cv
358.539 383.077 358.222 382.314 357.66 381.752 cv
357.097 381.189 356.334 380.873 355.539 380.873 cv
354.743 380.873 353.98 381.189 353.417 381.752 cv
352.855 382.314 352.539 383.077 352.539 383.873 cv
352.539 384.669 352.855 385.432 353.417 385.994 cv
353.98 386.557 354.743 386.873 355.539 386.873 cv
cp
@
202.61 313.967 mo
203.405 313.967 204.169 313.651 204.731 313.088 cv
205.294 312.525 205.61 311.762 205.61 310.967 cv
205.61 310.171 205.294 309.408 204.731 308.845 cv
204.169 308.283 203.405 307.967 202.61 307.967 cv
201.814 307.967 201.051 308.283 200.489 308.845 cv
199.926 309.408 199.61 310.171 199.61 310.967 cv
199.61 311.762 199.926 312.525 200.489 313.088 cv
201.051 313.651 201.814 313.967 202.61 313.967 cv
cp
f
202.61 313.967 mo
203.405 313.967 204.169 313.651 204.731 313.088 cv
205.294 312.525 205.61 311.762 205.61 310.967 cv
205.61 310.171 205.294 309.408 204.731 308.845 cv
204.169 308.283 203.405 307.967 202.61 307.967 cv
201.814 307.967 201.051 308.283 200.489 308.845 cv
199.926 309.408 199.61 310.171 199.61 310.967 cv
199.61 311.762 199.926 312.525 200.489 313.088 cv
201.051 313.651 201.814 313.967 202.61 313.967 cv
cp
@
135.213 379.634 mo
136.009 379.634 136.772 379.318 137.335 378.755 cv
137.897 378.193 138.213 377.43 138.213 376.634 cv
138.213 375.839 137.897 375.075 137.335 374.513 cv
136.772 373.95 136.009 373.634 135.213 373.634 cv
134.418 373.634 133.655 373.95 133.092 374.513 cv
132.529 375.075 132.213 375.839 132.213 376.634 cv
132.213 377.43 132.529 378.193 133.092 378.755 cv
133.655 379.318 134.418 379.634 135.213 379.634 cv
cp
f
135.213 379.634 mo
136.009 379.634 136.772 379.318 137.335 378.755 cv
137.897 378.193 138.213 377.43 138.213 376.634 cv
138.213 375.839 137.897 375.075 137.335 374.513 cv
136.772 373.95 136.009 373.634 135.213 373.634 cv
134.418 373.634 133.655 373.95 133.092 374.513 cv
132.529 375.075 132.213 375.839 132.213 376.634 cv
132.213 377.43 132.529 378.193 133.092 378.755 cv
133.655 379.318 134.418 379.634 135.213 379.634 cv
cp
@
345.754 281.693 mo
346.549 281.693 347.312 281.377 347.875 280.814 cv
348.438 280.252 348.754 279.488 348.754 278.693 cv
348.754 277.897 348.438 277.134 347.875 276.572 cv
347.312 276.009 346.549 275.693 345.754 275.693 cv
344.958 275.693 344.195 276.009 343.632 276.572 cv
343.07 277.134 342.754 277.897 342.754 278.693 cv
342.754 279.488 343.07 280.252 343.632 280.814 cv
344.195 281.377 344.958 281.693 345.754 281.693 cv
cp
f
345.754 281.693 mo
346.549 281.693 347.312 281.377 347.875 280.814 cv
348.438 280.252 348.754 279.488 348.754 278.693 cv
348.754 277.897 348.438 277.134 347.875 276.572 cv
347.312 276.009 346.549 275.693 345.754 275.693 cv
344.958 275.693 344.195 276.009 343.632 276.572 cv
343.07 277.134 342.754 277.897 342.754 278.693 cv
342.754 279.488 343.07 280.252 343.632 280.814 cv
344.195 281.377 344.958 281.693 345.754 281.693 cv
cp
@
290.829 311.81 mo
291.624 311.81 292.388 311.494 292.95 310.932 cv
293.513 310.369 293.829 309.606 293.829 308.81 cv
293.829 308.015 293.513 307.251 292.95 306.689 cv
292.388 306.126 291.624 305.81 290.829 305.81 cv
290.033 305.81 289.27 306.126 288.707 306.689 cv
288.145 307.251 287.829 308.015 287.829 308.81 cv
287.829 309.606 288.145 310.369 288.707 310.932 cv
289.27 311.494 290.033 311.81 290.829 311.81 cv
cp
f
290.829 311.81 mo
291.624 311.81 292.388 311.494 292.95 310.932 cv
293.513 310.369 293.829 309.606 293.829 308.81 cv
293.829 308.015 293.513 307.251 292.95 306.689 cv
292.388 306.126 291.624 305.81 290.829 305.81 cv
290.033 305.81 289.27 306.126 288.707 306.689 cv
288.145 307.251 287.829 308.015 287.829 308.81 cv
287.829 309.606 288.145 310.369 288.707 310.932 cv
289.27 311.494 290.033 311.81 290.829 311.81 cv
cp
@
207.613 310.358 mo
208.408 310.358 209.171 310.041 209.734 309.479 cv
210.296 308.916 210.613 308.153 210.613 307.358 cv
210.613 306.562 210.296 305.799 209.734 305.236 cv
209.171 304.674 208.408 304.358 207.613 304.358 cv
206.817 304.358 206.054 304.674 205.491 305.236 cv
204.929 305.799 204.613 306.562 204.613 307.358 cv
204.613 308.153 204.929 308.916 205.491 309.479 cv
206.054 310.041 206.817 310.358 207.613 310.358 cv
cp
f
207.613 310.358 mo
208.408 310.358 209.171 310.041 209.734 309.479 cv
210.296 308.916 210.613 308.153 210.613 307.358 cv
210.613 306.562 210.296 305.799 209.734 305.236 cv
209.171 304.674 208.408 304.358 207.613 304.358 cv
206.817 304.358 206.054 304.674 205.491 305.236 cv
204.929 305.799 204.613 306.562 204.613 307.358 cv
204.613 308.153 204.929 308.916 205.491 309.479 cv
206.054 310.041 206.817 310.358 207.613 310.358 cv
cp
@
183.377 332.263 mo
184.173 332.263 184.936 331.947 185.499 331.384 cv
186.061 330.822 186.377 330.059 186.377 329.263 cv
186.377 328.467 186.061 327.704 185.499 327.142 cv
184.936 326.579 184.173 326.263 183.377 326.263 cv
182.582 326.263 181.818 326.579 181.256 327.142 cv
180.693 327.704 180.377 328.467 180.377 329.263 cv
180.377 330.059 180.693 330.822 181.256 331.384 cv
181.818 331.947 182.582 332.263 183.377 332.263 cv
cp
f
183.377 332.263 mo
184.173 332.263 184.936 331.947 185.499 331.384 cv
186.061 330.822 186.377 330.059 186.377 329.263 cv
186.377 328.467 186.061 327.704 185.499 327.142 cv
184.936 326.579 184.173 326.263 183.377 326.263 cv
182.582 326.263 181.818 326.579 181.256 327.142 cv
180.693 327.704 180.377 328.467 180.377 329.263 cv
180.377 330.059 180.693 330.822 181.256 331.384 cv
181.818 331.947 182.582 332.263 183.377 332.263 cv
cp
@
282.042 252.891 mo
282.838 252.891 283.601 252.575 284.163 252.012 cv
284.726 251.45 285.042 250.687 285.042 249.891 cv
285.042 249.095 284.726 248.332 284.163 247.77 cv
283.601 247.207 282.838 246.891 282.042 246.891 cv
281.246 246.891 280.483 247.207 279.921 247.77 cv
279.358 248.332 279.042 249.095 279.042 249.891 cv
279.042 250.687 279.358 251.45 279.921 252.012 cv
280.483 252.575 281.246 252.891 282.042 252.891 cv
cp
f
282.042 252.891 mo
282.838 252.891 283.601 252.575 284.163 252.012 cv
284.726 251.45 285.042 250.687 285.042 249.891 cv
285.042 249.095 284.726 248.332 284.163 247.77 cv
283.601 247.207 282.838 246.891 282.042 246.891 cv
281.246 246.891 280.483 247.207 279.921 247.77 cv
279.358 248.332 279.042 249.095 279.042 249.891 cv
279.042 250.687 279.358 251.45 279.921 252.012 cv
280.483 252.575 281.246 252.891 282.042 252.891 cv
cp
@
322.333 293.291 mo
323.129 293.291 323.892 292.975 324.454 292.412 cv
325.017 291.849 325.333 291.086 325.333 290.291 cv
325.333 289.495 325.017 288.732 324.454 288.169 cv
323.892 287.607 323.129 287.291 322.333 287.291 cv
321.537 287.291 320.774 287.607 320.212 288.169 cv
319.649 288.732 319.333 289.495 319.333 290.291 cv
319.333 291.086 319.649 291.849 320.212 292.412 cv
320.774 292.975 321.537 293.291 322.333 293.291 cv
cp
f
322.333 293.291 mo
323.129 293.291 323.892 292.975 324.454 292.412 cv
325.017 291.849 325.333 291.086 325.333 290.291 cv
325.333 289.495 325.017 288.732 324.454 288.169 cv
323.892 287.607 323.129 287.291 322.333 287.291 cv
321.537 287.291 320.774 287.607 320.212 288.169 cv
319.649 288.732 319.333 289.495 319.333 290.291 cv
319.333 291.086 319.649 291.849 320.212 292.412 cv
320.774 292.975 321.537 293.291 322.333 293.291 cv
cp
@
72.9611 431.812 mo
73.7567 431.812 74.5198 431.496 75.0824 430.933 cv
75.645 430.37 75.9611 429.607 75.9611 428.812 cv
75.9611 428.016 75.645 427.253 75.0824 426.69 cv
74.5198 426.128 73.7567 425.812 72.9611 425.812 cv
72.1654 425.812 71.4023 426.128 70.8397 426.69 cv
70.2772 427.253 69.9611 428.016 69.9611 428.812 cv
69.9611 429.607 70.2772 430.37 70.8397 430.933 cv
71.4023 431.496 72.1654 431.812 72.9611 431.812 cv
cp
f
72.9611 431.812 mo
73.7567 431.812 74.5198 431.496 75.0824 430.933 cv
75.645 430.37 75.9611 429.607 75.9611 428.812 cv
75.9611 428.016 75.645 427.253 75.0824 426.69 cv
74.5198 426.128 73.7567 425.812 72.9611 425.812 cv
72.1654 425.812 71.4023 426.128 70.8397 426.69 cv
70.2772 427.253 69.9611 428.016 69.9611 428.812 cv
69.9611 429.607 70.2772 430.37 70.8397 430.933 cv
71.4023 431.496 72.1654 431.812 72.9611 431.812 cv
cp
@
120.516 271.91 mo
121.312 271.91 122.075 271.593 122.638 271.031 cv
123.2 270.468 123.516 269.705 123.516 268.91 cv
123.516 268.114 123.2 267.351 122.638 266.788 cv
122.075 266.226 121.312 265.91 120.516 265.91 cv
119.721 265.91 118.958 266.226 118.395 266.788 cv
117.832 267.351 117.516 268.114 117.516 268.91 cv
117.516 269.705 117.832 270.468 118.395 271.031 cv
118.958 271.593 119.721 271.91 120.516 271.91 cv
cp
f
120.516 271.91 mo
121.312 271.91 122.075 271.593 122.638 271.031 cv
123.2 270.468 123.516 269.705 123.516 268.91 cv
123.516 268.114 123.2 267.351 122.638 266.788 cv
122.075 266.226 121.312 265.91 120.516 265.91 cv
119.721 265.91 118.958 266.226 118.395 266.788 cv
117.832 267.351 117.516 268.114 117.516 268.91 cv
117.516 269.705 117.832 270.468 118.395 271.031 cv
118.958 271.593 119.721 271.91 120.516 271.91 cv
cp
@
170.461 267.168 mo
171.256 267.168 172.019 266.852 172.582 266.29 cv
173.145 265.727 173.461 264.964 173.461 264.168 cv
173.461 263.373 173.145 262.61 172.582 262.047 cv
172.019 261.484 171.256 261.168 170.461 261.168 cv
169.665 261.168 168.902 261.484 168.339 262.047 cv
167.777 262.61 167.461 263.373 167.461 264.168 cv
167.461 264.964 167.777 265.727 168.339 266.29 cv
168.902 266.852 169.665 267.168 170.461 267.168 cv
cp
f
170.461 267.168 mo
171.256 267.168 172.019 266.852 172.582 266.29 cv
173.145 265.727 173.461 264.964 173.461 264.168 cv
173.461 263.373 173.145 262.61 172.582 262.047 cv
172.019 261.484 171.256 261.168 170.461 261.168 cv
169.665 261.168 168.902 261.484 168.339 262.047 cv
167.777 262.61 167.461 263.373 167.461 264.168 cv
167.461 264.964 167.777 265.727 168.339 266.29 cv
168.902 266.852 169.665 267.168 170.461 267.168 cv
cp
@
120.85 405.026 mo
121.645 405.026 122.409 404.71 122.971 404.147 cv
123.534 403.585 123.85 402.821 123.85 402.026 cv
123.85 401.23 123.534 400.467 122.971 399.905 cv
122.409 399.342 121.645 399.026 120.85 399.026 cv
120.054 399.026 119.291 399.342 118.728 399.905 cv
118.166 400.467 117.85 401.23 117.85 402.026 cv
117.85 402.821 118.166 403.585 118.728 404.147 cv
119.291 404.71 120.054 405.026 120.85 405.026 cv
cp
f
120.85 405.026 mo
121.645 405.026 122.409 404.71 122.971 404.147 cv
123.534 403.585 123.85 402.821 123.85 402.026 cv
123.85 401.23 123.534 400.467 122.971 399.905 cv
122.409 399.342 121.645 399.026 120.85 399.026 cv
120.054 399.026 119.291 399.342 118.728 399.905 cv
118.166 400.467 117.85 401.23 117.85 402.026 cv
117.85 402.821 118.166 403.585 118.728 404.147 cv
119.291 404.71 120.054 405.026 120.85 405.026 cv
cp
@
73.7477 132.351 mo
74.5433 132.351 75.3064 132.035 75.869 131.472 cv
76.4316 130.909 76.7477 130.146 76.7477 129.351 cv
76.7477 128.555 76.4316 127.792 75.869 127.229 cv
75.3064 126.667 74.5433 126.351 73.7477 126.351 cv
72.9521 126.351 72.189 126.667 71.6264 127.229 cv
71.0638 127.792 70.7477 128.555 70.7477 129.351 cv
70.7477 130.146 71.0638 130.909 71.6264 131.472 cv
72.189 132.035 72.9521 132.351 73.7477 132.351 cv
cp
f
73.7477 132.351 mo
74.5433 132.351 75.3064 132.035 75.869 131.472 cv
76.4316 130.909 76.7477 130.146 76.7477 129.351 cv
76.7477 128.555 76.4316 127.792 75.869 127.229 cv
75.3064 126.667 74.5433 126.351 73.7477 126.351 cv
72.9521 126.351 72.189 126.667 71.6264 127.229 cv
71.0638 127.792 70.7477 128.555 70.7477 129.351 cv
70.7477 130.146 71.0638 130.909 71.6264 131.472 cv
72.189 132.035 72.9521 132.351 73.7477 132.351 cv
cp
@
220.062 285.038 mo
220.858 285.038 221.621 284.722 222.183 284.159 cv
222.746 283.596 223.062 282.833 223.062 282.038 cv
223.062 281.242 222.746 280.479 222.183 279.916 cv
221.621 279.354 220.858 279.038 220.062 279.038 cv
219.266 279.038 218.503 279.354 217.941 279.916 cv
217.378 280.479 217.062 281.242 217.062 282.038 cv
217.062 282.833 217.378 283.596 217.941 284.159 cv
218.503 284.722 219.266 285.038 220.062 285.038 cv
cp
f
220.062 285.038 mo
220.858 285.038 221.621 284.722 222.183 284.159 cv
222.746 283.596 223.062 282.833 223.062 282.038 cv
223.062 281.242 222.746 280.479 222.183 279.916 cv
221.621 279.354 220.858 279.038 220.062 279.038 cv
219.266 279.038 218.503 279.354 217.941 279.916 cv
217.378 280.479 217.062 281.242 217.062 282.038 cv
217.062 282.833 217.378 283.596 217.941 284.159 cv
218.503 284.722 219.266 285.038 220.062 285.038 cv
cp
@
91.1529 290.785 mo
91.9485 290.785 92.7116 290.469 93.2742 289.906 cv
93.8368 289.344 94.1529 288.581 94.1529 287.785 cv
94.1529 286.989 93.8368 286.226 93.2742 285.664 cv
92.7116 285.101 91.9485 284.785 91.1529 284.785 cv
90.3573 284.785 89.5941 285.101 89.0316 285.664 cv
88.469 286.226 88.1529 286.989 88.1529 287.785 cv
88.1529 288.581 88.469 289.344 89.0316 289.906 cv
89.5941 290.469 90.3573 290.785 91.1529 290.785 cv
cp
f
91.1529 290.785 mo
91.9485 290.785 92.7116 290.469 93.2742 289.906 cv
93.8368 289.344 94.1529 288.581 94.1529 287.785 cv
94.1529 286.989 93.8368 286.226 93.2742 285.664 cv
92.7116 285.101 91.9485 284.785 91.1529 284.785 cv
90.3573 284.785 89.5941 285.101 89.0316 285.664 cv
88.469 286.226 88.1529 286.989 88.1529 287.785 cv
88.1529 288.581 88.469 289.344 89.0316 289.906 cv
89.5941 290.469 90.3573 290.785 91.1529 290.785 cv
cp
@
253.502 327.502 mo
254.298 327.502 255.061 327.186 255.623 326.624 cv
256.186 326.061 256.502 325.298 256.502 324.502 cv
256.502 323.707 256.186 322.943 255.623 322.381 cv
255.061 321.818 254.298 321.502 253.502 321.502 cv
252.707 321.502 251.943 321.818 251.381 322.381 cv
250.818 322.943 250.502 323.707 250.502 324.502 cv
250.502 325.298 250.818 326.061 251.381 326.624 cv
251.943 327.186 252.707 327.502 253.502 327.502 cv
cp
f
253.502 327.502 mo
254.298 327.502 255.061 327.186 255.623 326.624 cv
256.186 326.061 256.502 325.298 256.502 324.502 cv
256.502 323.707 256.186 322.943 255.623 322.381 cv
255.061 321.818 254.298 321.502 253.502 321.502 cv
252.707 321.502 251.943 321.818 251.381 322.381 cv
250.818 322.943 250.502 323.707 250.502 324.502 cv
250.502 325.298 250.818 326.061 251.381 326.624 cv
251.943 327.186 252.707 327.502 253.502 327.502 cv
cp
@
133.106 388.532 mo
133.902 388.532 134.665 388.216 135.228 387.653 cv
135.79 387.09 136.106 386.327 136.106 385.532 cv
136.106 384.736 135.79 383.973 135.228 383.41 cv
134.665 382.848 133.902 382.532 133.106 382.532 cv
132.311 382.532 131.547 382.848 130.985 383.41 cv
130.422 383.973 130.106 384.736 130.106 385.532 cv
130.106 386.327 130.422 387.09 130.985 387.653 cv
131.547 388.216 132.311 388.532 133.106 388.532 cv
cp
f
133.106 388.532 mo
133.902 388.532 134.665 388.216 135.228 387.653 cv
135.79 387.09 136.106 386.327 136.106 385.532 cv
136.106 384.736 135.79 383.973 135.228 383.41 cv
134.665 382.848 133.902 382.532 133.106 382.532 cv
132.311 382.532 131.547 382.848 130.985 383.41 cv
130.422 383.973 130.106 384.736 130.106 385.532 cv
130.106 386.327 130.422 387.09 130.985 387.653 cv
131.547 388.216 132.311 388.532 133.106 388.532 cv
cp
@
293.105 433.56 mo
293.901 433.56 294.664 433.244 295.226 432.681 cv
295.789 432.119 296.105 431.356 296.105 430.56 cv
296.105 429.764 295.789 429.001 295.226 428.439 cv
294.664 427.876 293.901 427.56 293.105 427.56 cv
292.31 427.56 291.546 427.876 290.984 428.439 cv
290.421 429.001 290.105 429.764 290.105 430.56 cv
290.105 431.356 290.421 432.119 290.984 432.681 cv
291.546 433.244 292.31 433.56 293.105 433.56 cv
cp
f
293.105 433.56 mo
293.901 433.56 294.664 433.244 295.226 432.681 cv
295.789 432.119 296.105 431.356 296.105 430.56 cv
296.105 429.764 295.789 429.001 295.226 428.439 cv
294.664 427.876 293.901 427.56 293.105 427.56 cv
292.31 427.56 291.546 427.876 290.984 428.439 cv
290.421 429.001 290.105 429.764 290.105 430.56 cv
290.105 431.356 290.421 432.119 290.984 432.681 cv
291.546 433.244 292.31 433.56 293.105 433.56 cv
cp
@
302.167 344.14 mo
302.963 344.14 303.726 343.824 304.288 343.262 cv
304.851 342.699 305.167 341.936 305.167 341.14 cv
305.167 340.345 304.851 339.582 304.288 339.019 cv
303.726 338.456 302.963 338.14 302.167 338.14 cv
301.372 338.14 300.608 338.456 300.046 339.019 cv
299.483 339.582 299.167 340.345 299.167 341.14 cv
299.167 341.936 299.483 342.699 300.046 343.262 cv
300.608 343.824 301.372 344.14 302.167 344.14 cv
cp
f
302.167 344.14 mo
302.963 344.14 303.726 343.824 304.288 343.262 cv
304.851 342.699 305.167 341.936 305.167 341.14 cv
305.167 340.345 304.851 339.582 304.288 339.019 cv
303.726 338.456 302.963 338.14 302.167 338.14 cv
301.372 338.14 300.608 338.456 300.046 339.019 cv
299.483 339.582 299.167 340.345 299.167 341.14 cv
299.167 341.936 299.483 342.699 300.046 343.262 cv
300.608 343.824 301.372 344.14 302.167 344.14 cv
cp
@
462.924 389.488 mo
463.72 389.488 464.483 389.172 465.045 388.609 cv
465.608 388.047 465.924 387.284 465.924 386.488 cv
465.924 385.692 465.608 384.929 465.045 384.367 cv
464.483 383.804 463.72 383.488 462.924 383.488 cv
462.128 383.488 461.365 383.804 460.803 384.367 cv
460.24 384.929 459.924 385.692 459.924 386.488 cv
459.924 387.284 460.24 388.047 460.803 388.609 cv
461.365 389.172 462.128 389.488 462.924 389.488 cv
cp
f
462.924 389.488 mo
463.72 389.488 464.483 389.172 465.045 388.609 cv
465.608 388.047 465.924 387.284 465.924 386.488 cv
465.924 385.692 465.608 384.929 465.045 384.367 cv
464.483 383.804 463.72 383.488 462.924 383.488 cv
462.128 383.488 461.365 383.804 460.803 384.367 cv
460.24 384.929 459.924 385.692 459.924 386.488 cv
459.924 387.284 460.24 388.047 460.803 388.609 cv
461.365 389.172 462.128 389.488 462.924 389.488 cv
cp
@
349.044 338.356 mo
349.84 338.356 350.603 338.04 351.166 337.477 cv
351.728 336.914 352.044 336.151 352.044 335.356 cv
352.044 334.56 351.728 333.797 351.166 333.234 cv
350.603 332.672 349.84 332.356 349.044 332.356 cv
348.249 332.356 347.486 332.672 346.923 333.234 cv
346.36 333.797 346.044 334.56 346.044 335.356 cv
346.044 336.151 346.36 336.914 346.923 337.477 cv
347.486 338.04 348.249 338.356 349.044 338.356 cv
cp
f
349.044 338.356 mo
349.84 338.356 350.603 338.04 351.166 337.477 cv
351.728 336.914 352.044 336.151 352.044 335.356 cv
352.044 334.56 351.728 333.797 351.166 333.234 cv
350.603 332.672 349.84 332.356 349.044 332.356 cv
348.249 332.356 347.486 332.672 346.923 333.234 cv
346.36 333.797 346.044 334.56 346.044 335.356 cv
346.044 336.151 346.36 336.914 346.923 337.477 cv
347.486 338.04 348.249 338.356 349.044 338.356 cv
cp
@
252.235 321.379 mo
253.031 321.379 253.794 321.063 254.357 320.5 cv
254.919 319.937 255.235 319.174 255.235 318.379 cv
255.235 317.583 254.919 316.82 254.357 316.257 cv
253.794 315.695 253.031 315.379 252.235 315.379 cv
251.44 315.379 250.677 315.695 250.114 316.257 cv
249.552 316.82 249.235 317.583 249.235 318.379 cv
249.235 319.174 249.552 319.937 250.114 320.5 cv
250.677 321.063 251.44 321.379 252.235 321.379 cv
cp
f
252.235 321.379 mo
253.031 321.379 253.794 321.063 254.357 320.5 cv
254.919 319.937 255.235 319.174 255.235 318.379 cv
255.235 317.583 254.919 316.82 254.357 316.257 cv
253.794 315.695 253.031 315.379 252.235 315.379 cv
251.44 315.379 250.677 315.695 250.114 316.257 cv
249.552 316.82 249.235 317.583 249.235 318.379 cv
249.235 319.174 249.552 319.937 250.114 320.5 cv
250.677 321.063 251.44 321.379 252.235 321.379 cv
cp
@
158.717 371.94 mo
159.512 371.94 160.275 371.624 160.838 371.061 cv
161.4 370.499 161.717 369.736 161.717 368.94 cv
161.717 368.144 161.4 367.381 160.838 366.819 cv
160.275 366.256 159.512 365.94 158.717 365.94 cv
157.921 365.94 157.158 366.256 156.595 366.819 cv
156.033 367.381 155.717 368.144 155.717 368.94 cv
155.717 369.736 156.033 370.499 156.595 371.061 cv
157.158 371.624 157.921 371.94 158.717 371.94 cv
cp
f
158.717 371.94 mo
159.512 371.94 160.275 371.624 160.838 371.061 cv
161.4 370.499 161.717 369.736 161.717 368.94 cv
161.717 368.144 161.4 367.381 160.838 366.819 cv
160.275 366.256 159.512 365.94 158.717 365.94 cv
157.921 365.94 157.158 366.256 156.595 366.819 cv
156.033 367.381 155.717 368.144 155.717 368.94 cv
155.717 369.736 156.033 370.499 156.595 371.061 cv
157.158 371.624 157.921 371.94 158.717 371.94 cv
cp
@
142.013 392.754 mo
142.809 392.754 143.572 392.438 144.134 391.876 cv
144.697 391.313 145.013 390.55 145.013 389.754 cv
145.013 388.959 144.697 388.196 144.134 387.633 cv
143.572 387.071 142.809 386.754 142.013 386.754 cv
141.217 386.754 140.454 387.071 139.892 387.633 cv
139.329 388.196 139.013 388.959 139.013 389.754 cv
139.013 390.55 139.329 391.313 139.892 391.876 cv
140.454 392.438 141.217 392.754 142.013 392.754 cv
cp
f
142.013 392.754 mo
142.809 392.754 143.572 392.438 144.134 391.876 cv
144.697 391.313 145.013 390.55 145.013 389.754 cv
145.013 388.959 144.697 388.196 144.134 387.633 cv
143.572 387.071 142.809 386.754 142.013 386.754 cv
141.217 386.754 140.454 387.071 139.892 387.633 cv
139.329 388.196 139.013 388.959 139.013 389.754 cv
139.013 390.55 139.329 391.313 139.892 391.876 cv
140.454 392.438 141.217 392.754 142.013 392.754 cv
cp
@
352.672 350.928 mo
353.467 350.928 354.23 350.612 354.793 350.049 cv
355.356 349.486 355.672 348.723 355.672 347.928 cv
355.672 347.132 355.356 346.369 354.793 345.806 cv
354.23 345.244 353.467 344.928 352.672 344.928 cv
351.876 344.928 351.113 345.244 350.55 345.806 cv
349.988 346.369 349.672 347.132 349.672 347.928 cv
349.672 348.723 349.988 349.486 350.55 350.049 cv
351.113 350.612 351.876 350.928 352.672 350.928 cv
cp
f
352.672 350.928 mo
353.467 350.928 354.23 350.612 354.793 350.049 cv
355.356 349.486 355.672 348.723 355.672 347.928 cv
355.672 347.132 355.356 346.369 354.793 345.806 cv
354.23 345.244 353.467 344.928 352.672 344.928 cv
351.876 344.928 351.113 345.244 350.55 345.806 cv
349.988 346.369 349.672 347.132 349.672 347.928 cv
349.672 348.723 349.988 349.486 350.55 350.049 cv
351.113 350.612 351.876 350.928 352.672 350.928 cv
cp
@
151.165 293.201 mo
151.961 293.201 152.724 292.885 153.286 292.322 cv
153.849 291.759 154.165 290.996 154.165 290.201 cv
154.165 289.405 153.849 288.642 153.286 288.079 cv
152.724 287.517 151.961 287.201 151.165 287.201 cv
150.369 287.201 149.606 287.517 149.044 288.079 cv
148.481 288.642 148.165 289.405 148.165 290.201 cv
148.165 290.996 148.481 291.759 149.044 292.322 cv
149.606 292.885 150.369 293.201 151.165 293.201 cv
cp
f
151.165 293.201 mo
151.961 293.201 152.724 292.885 153.286 292.322 cv
153.849 291.759 154.165 290.996 154.165 290.201 cv
154.165 289.405 153.849 288.642 153.286 288.079 cv
152.724 287.517 151.961 287.201 151.165 287.201 cv
150.369 287.201 149.606 287.517 149.044 288.079 cv
148.481 288.642 148.165 289.405 148.165 290.201 cv
148.165 290.996 148.481 291.759 149.044 292.322 cv
149.606 292.885 150.369 293.201 151.165 293.201 cv
cp
@
228.498 412.759 mo
229.293 412.759 230.056 412.443 230.619 411.88 cv
231.182 411.318 231.498 410.555 231.498 409.759 cv
231.498 408.963 231.182 408.2 230.619 407.638 cv
230.056 407.075 229.293 406.759 228.498 406.759 cv
227.702 406.759 226.939 407.075 226.376 407.638 cv
225.814 408.2 225.498 408.963 225.498 409.759 cv
225.498 410.555 225.814 411.318 226.376 411.88 cv
226.939 412.443 227.702 412.759 228.498 412.759 cv
cp
f
228.498 412.759 mo
229.293 412.759 230.056 412.443 230.619 411.88 cv
231.182 411.318 231.498 410.555 231.498 409.759 cv
231.498 408.963 231.182 408.2 230.619 407.638 cv
230.056 407.075 229.293 406.759 228.498 406.759 cv
227.702 406.759 226.939 407.075 226.376 407.638 cv
225.814 408.2 225.498 408.963 225.498 409.759 cv
225.498 410.555 225.814 411.318 226.376 411.88 cv
226.939 412.443 227.702 412.759 228.498 412.759 cv
cp
@
221.293 335.421 mo
222.089 335.421 222.852 335.105 223.415 334.542 cv
223.977 333.98 224.293 333.217 224.293 332.421 cv
224.293 331.625 223.977 330.862 223.415 330.3 cv
222.852 329.737 222.089 329.421 221.293 329.421 cv
220.498 329.421 219.734 329.737 219.172 330.3 cv
218.609 330.862 218.293 331.625 218.293 332.421 cv
218.293 333.217 218.609 333.98 219.172 334.542 cv
219.734 335.105 220.498 335.421 221.293 335.421 cv
cp
f
221.293 335.421 mo
222.089 335.421 222.852 335.105 223.415 334.542 cv
223.977 333.98 224.293 333.217 224.293 332.421 cv
224.293 331.625 223.977 330.862 223.415 330.3 cv
222.852 329.737 222.089 329.421 221.293 329.421 cv
220.498 329.421 219.734 329.737 219.172 330.3 cv
218.609 330.862 218.293 331.625 218.293 332.421 cv
218.293 333.217 218.609 333.98 219.172 334.542 cv
219.734 335.105 220.498 335.421 221.293 335.421 cv
cp
@
119.296 369.714 mo
120.092 369.714 120.855 369.398 121.418 368.835 cv
121.98 368.273 122.296 367.509 122.296 366.714 cv
122.296 365.918 121.98 365.155 121.418 364.593 cv
120.855 364.03 120.092 363.714 119.296 363.714 cv
118.501 363.714 117.738 364.03 117.175 364.593 cv
116.612 365.155 116.296 365.918 116.296 366.714 cv
116.296 367.509 116.612 368.273 117.175 368.835 cv
117.738 369.398 118.501 369.714 119.296 369.714 cv
cp
f
119.296 369.714 mo
120.092 369.714 120.855 369.398 121.418 368.835 cv
121.98 368.273 122.296 367.509 122.296 366.714 cv
122.296 365.918 121.98 365.155 121.418 364.593 cv
120.855 364.03 120.092 363.714 119.296 363.714 cv
118.501 363.714 117.738 364.03 117.175 364.593 cv
116.612 365.155 116.296 365.918 116.296 366.714 cv
116.296 367.509 116.612 368.273 117.175 368.835 cv
117.738 369.398 118.501 369.714 119.296 369.714 cv
cp
@
131.246 419.278 mo
132.041 419.278 132.804 418.962 133.367 418.399 cv
133.93 417.837 134.246 417.074 134.246 416.278 cv
134.246 415.482 133.93 414.719 133.367 414.157 cv
132.804 413.594 132.041 413.278 131.246 413.278 cv
130.45 413.278 129.687 413.594 129.124 414.157 cv
128.562 414.719 128.246 415.482 128.246 416.278 cv
128.246 417.074 128.562 417.837 129.124 418.399 cv
129.687 418.962 130.45 419.278 131.246 419.278 cv
cp
f
131.246 419.278 mo
132.041 419.278 132.804 418.962 133.367 418.399 cv
133.93 417.837 134.246 417.074 134.246 416.278 cv
134.246 415.482 133.93 414.719 133.367 414.157 cv
132.804 413.594 132.041 413.278 131.246 413.278 cv
130.45 413.278 129.687 413.594 129.124 414.157 cv
128.562 414.719 128.246 415.482 128.246 416.278 cv
128.246 417.074 128.562 417.837 129.124 418.399 cv
129.687 418.962 130.45 419.278 131.246 419.278 cv
cp
@
218.171 336.086 mo
218.967 336.086 219.73 335.77 220.292 335.208 cv
220.855 334.645 221.171 333.882 221.171 333.086 cv
221.171 332.291 220.855 331.528 220.292 330.965 cv
219.73 330.402 218.967 330.086 218.171 330.086 cv
217.375 330.086 216.612 330.402 216.05 330.965 cv
215.487 331.528 215.171 332.291 215.171 333.086 cv
215.171 333.882 215.487 334.645 216.05 335.208 cv
216.612 335.77 217.375 336.086 218.171 336.086 cv
cp
f
218.171 336.086 mo
218.967 336.086 219.73 335.77 220.292 335.208 cv
220.855 334.645 221.171 333.882 221.171 333.086 cv
221.171 332.291 220.855 331.528 220.292 330.965 cv
219.73 330.402 218.967 330.086 218.171 330.086 cv
217.375 330.086 216.612 330.402 216.05 330.965 cv
215.487 331.528 215.171 332.291 215.171 333.086 cv
215.171 333.882 215.487 334.645 216.05 335.208 cv
216.612 335.77 217.375 336.086 218.171 336.086 cv
cp
@
171.412 187.292 mo
172.208 187.292 172.971 186.976 173.534 186.413 cv
174.096 185.851 174.412 185.087 174.412 184.292 cv
174.412 183.496 174.096 182.733 173.534 182.171 cv
172.971 181.608 172.208 181.292 171.412 181.292 cv
170.617 181.292 169.853 181.608 169.291 182.171 cv
168.728 182.733 168.412 183.496 168.412 184.292 cv
168.412 185.087 168.728 185.851 169.291 186.413 cv
169.853 186.976 170.617 187.292 171.412 187.292 cv
cp
f
171.412 187.292 mo
172.208 187.292 172.971 186.976 173.534 186.413 cv
174.096 185.851 174.412 185.087 174.412 184.292 cv
174.412 183.496 174.096 182.733 173.534 182.171 cv
172.971 181.608 172.208 181.292 171.412 181.292 cv
170.617 181.292 169.853 181.608 169.291 182.171 cv
168.728 182.733 168.412 183.496 168.412 184.292 cv
168.412 185.087 168.728 185.851 169.291 186.413 cv
169.853 186.976 170.617 187.292 171.412 187.292 cv
cp
@
273.023 300.384 mo
273.819 300.384 274.582 300.068 275.145 299.506 cv
275.707 298.943 276.023 298.18 276.023 297.384 cv
276.023 296.589 275.707 295.826 275.145 295.263 cv
274.582 294.701 273.819 294.384 273.023 294.384 cv
272.228 294.384 271.465 294.701 270.902 295.263 cv
270.339 295.826 270.023 296.589 270.023 297.384 cv
270.023 298.18 270.339 298.943 270.902 299.506 cv
271.465 300.068 272.228 300.384 273.023 300.384 cv
cp
f
273.023 300.384 mo
273.819 300.384 274.582 300.068 275.145 299.506 cv
275.707 298.943 276.023 298.18 276.023 297.384 cv
276.023 296.589 275.707 295.826 275.145 295.263 cv
274.582 294.701 273.819 294.384 273.023 294.384 cv
272.228 294.384 271.465 294.701 270.902 295.263 cv
270.339 295.826 270.023 296.589 270.023 297.384 cv
270.023 298.18 270.339 298.943 270.902 299.506 cv
271.465 300.068 272.228 300.384 273.023 300.384 cv
cp
@
391.911 423.058 mo
392.706 423.058 393.47 422.742 394.032 422.179 cv
394.595 421.617 394.911 420.853 394.911 420.058 cv
394.911 419.262 394.595 418.499 394.032 417.937 cv
393.47 417.374 392.706 417.058 391.911 417.058 cv
391.115 417.058 390.352 417.374 389.789 417.937 cv
389.227 418.499 388.911 419.262 388.911 420.058 cv
388.911 420.853 389.227 421.617 389.789 422.179 cv
390.352 422.742 391.115 423.058 391.911 423.058 cv
cp
f
391.911 423.058 mo
392.706 423.058 393.47 422.742 394.032 422.179 cv
394.595 421.617 394.911 420.853 394.911 420.058 cv
394.911 419.262 394.595 418.499 394.032 417.937 cv
393.47 417.374 392.706 417.058 391.911 417.058 cv
391.115 417.058 390.352 417.374 389.789 417.937 cv
389.227 418.499 388.911 419.262 388.911 420.058 cv
388.911 420.853 389.227 421.617 389.789 422.179 cv
390.352 422.742 391.115 423.058 391.911 423.058 cv
cp
@
309.511 298.451 mo
310.307 298.451 311.07 298.135 311.633 297.573 cv
312.195 297.01 312.511 296.247 312.511 295.451 cv
312.511 294.656 312.195 293.893 311.633 293.33 cv
311.07 292.767 310.307 292.451 309.511 292.451 cv
308.716 292.451 307.953 292.767 307.39 293.33 cv
306.827 293.893 306.511 294.656 306.511 295.451 cv
306.511 296.247 306.827 297.01 307.39 297.573 cv
307.953 298.135 308.716 298.451 309.511 298.451 cv
cp
f
309.511 298.451 mo
310.307 298.451 311.07 298.135 311.633 297.573 cv
312.195 297.01 312.511 296.247 312.511 295.451 cv
312.511 294.656 312.195 293.893 311.633 293.33 cv
311.07 292.767 310.307 292.451 309.511 292.451 cv
308.716 292.451 307.953 292.767 307.39 293.33 cv
306.827 293.893 306.511 294.656 306.511 295.451 cv
306.511 296.247 306.827 297.01 307.39 297.573 cv
307.953 298.135 308.716 298.451 309.511 298.451 cv
cp
@
258.063 424.934 mo
258.859 424.934 259.622 424.618 260.184 424.055 cv
260.747 423.493 261.063 422.73 261.063 421.934 cv
261.063 421.138 260.747 420.375 260.184 419.813 cv
259.622 419.25 258.859 418.934 258.063 418.934 cv
257.267 418.934 256.504 419.25 255.942 419.813 cv
255.379 420.375 255.063 421.138 255.063 421.934 cv
255.063 422.73 255.379 423.493 255.942 424.055 cv
256.504 424.618 257.267 424.934 258.063 424.934 cv
cp
f
258.063 424.934 mo
258.859 424.934 259.622 424.618 260.184 424.055 cv
260.747 423.493 261.063 422.73 261.063 421.934 cv
261.063 421.138 260.747 420.375 260.184 419.813 cv
259.622 419.25 258.859 418.934 258.063 418.934 cv
257.267 418.934 256.504 419.25 255.942 419.813 cv
255.379 420.375 255.063 421.138 255.063 421.934 cv
255.063 422.73 255.379 423.493 255.942 424.055 cv
256.504 424.618 257.267 424.934 258.063 424.934 cv
cp
@
174.718 324.697 mo
175.514 324.697 176.277 324.381 176.839 323.818 cv
177.402 323.255 177.718 322.492 177.718 321.697 cv
177.718 320.901 177.402 320.138 176.839 319.575 cv
176.277 319.013 175.514 318.697 174.718 318.697 cv
173.922 318.697 173.159 319.013 172.597 319.575 cv
172.034 320.138 171.718 320.901 171.718 321.697 cv
171.718 322.492 172.034 323.255 172.597 323.818 cv
173.159 324.381 173.922 324.697 174.718 324.697 cv
cp
f
174.718 324.697 mo
175.514 324.697 176.277 324.381 176.839 323.818 cv
177.402 323.255 177.718 322.492 177.718 321.697 cv
177.718 320.901 177.402 320.138 176.839 319.575 cv
176.277 319.013 175.514 318.697 174.718 318.697 cv
173.922 318.697 173.159 319.013 172.597 319.575 cv
172.034 320.138 171.718 320.901 171.718 321.697 cv
171.718 322.492 172.034 323.255 172.597 323.818 cv
173.159 324.381 173.922 324.697 174.718 324.697 cv
cp
@
74.1356 363.563 mo
74.9312 363.563 75.6944 363.247 76.257 362.684 cv
76.8195 362.122 77.1356 361.359 77.1356 360.563 cv
77.1356 359.767 76.8195 359.004 76.257 358.442 cv
75.6944 357.879 74.9312 357.563 74.1356 357.563 cv
73.34 357.563 72.5769 357.879 72.0143 358.442 cv
71.4517 359.004 71.1356 359.767 71.1356 360.563 cv
71.1356 361.359 71.4517 362.122 72.0143 362.684 cv
72.5769 363.247 73.34 363.563 74.1356 363.563 cv
cp
f
74.1356 363.563 mo
74.9312 363.563 75.6944 363.247 76.257 362.684 cv
76.8195 362.122 77.1356 361.359 77.1356 360.563 cv
77.1356 359.767 76.8195 359.004 76.257 358.442 cv
75.6944 357.879 74.9312 357.563 74.1356 357.563 cv
73.34 357.563 72.5769 357.879 72.0143 358.442 cv
71.4517 359.004 71.1356 359.767 71.1356 360.563 cv
71.1356 361.359 71.4517 362.122 72.0143 362.684 cv
72.5769 363.247 73.34 363.563 74.1356 363.563 cv
cp
@
424.586 362.551 mo
425.382 362.551 426.145 362.235 426.707 361.672 cv
427.27 361.11 427.586 360.347 427.586 359.551 cv
427.586 358.755 427.27 357.992 426.707 357.43 cv
426.145 356.867 425.382 356.551 424.586 356.551 cv
423.79 356.551 423.027 356.867 422.465 357.43 cv
421.902 357.992 421.586 358.755 421.586 359.551 cv
421.586 360.347 421.902 361.11 422.465 361.672 cv
423.027 362.235 423.79 362.551 424.586 362.551 cv
cp
f
424.586 362.551 mo
425.382 362.551 426.145 362.235 426.707 361.672 cv
427.27 361.11 427.586 360.347 427.586 359.551 cv
427.586 358.755 427.27 357.992 426.707 357.43 cv
426.145 356.867 425.382 356.551 424.586 356.551 cv
423.79 356.551 423.027 356.867 422.465 357.43 cv
421.902 357.992 421.586 358.755 421.586 359.551 cv
421.586 360.347 421.902 361.11 422.465 361.672 cv
423.027 362.235 423.79 362.551 424.586 362.551 cv
cp
@
313.343 368.469 mo
314.139 368.469 314.902 368.153 315.464 367.59 cv
316.027 367.027 316.343 366.264 316.343 365.469 cv
316.343 364.673 316.027 363.91 315.464 363.347 cv
314.902 362.785 314.139 362.469 313.343 362.469 cv
312.547 362.469 311.784 362.785 311.222 363.347 cv
310.659 363.91 310.343 364.673 310.343 365.469 cv
310.343 366.264 310.659 367.027 311.222 367.59 cv
311.784 368.153 312.547 368.469 313.343 368.469 cv
cp
f
313.343 368.469 mo
314.139 368.469 314.902 368.153 315.464 367.59 cv
316.027 367.027 316.343 366.264 316.343 365.469 cv
316.343 364.673 316.027 363.91 315.464 363.347 cv
314.902 362.785 314.139 362.469 313.343 362.469 cv
312.547 362.469 311.784 362.785 311.222 363.347 cv
310.659 363.91 310.343 364.673 310.343 365.469 cv
310.343 366.264 310.659 367.027 311.222 367.59 cv
311.784 368.153 312.547 368.469 313.343 368.469 cv
cp
@
309.829 257.97 mo
310.625 257.97 311.388 257.653 311.951 257.091 cv
312.513 256.528 312.829 255.765 312.829 254.97 cv
312.829 254.174 312.513 253.411 311.951 252.848 cv
311.388 252.286 310.625 251.97 309.829 251.97 cv
309.034 251.97 308.27 252.286 307.708 252.848 cv
307.145 253.411 306.829 254.174 306.829 254.97 cv
306.829 255.765 307.145 256.528 307.708 257.091 cv
308.27 257.653 309.034 257.97 309.829 257.97 cv
cp
f
309.829 257.97 mo
310.625 257.97 311.388 257.653 311.951 257.091 cv
312.513 256.528 312.829 255.765 312.829 254.97 cv
312.829 254.174 312.513 253.411 311.951 252.848 cv
311.388 252.286 310.625 251.97 309.829 251.97 cv
309.034 251.97 308.27 252.286 307.708 252.848 cv
307.145 253.411 306.829 254.174 306.829 254.97 cv
306.829 255.765 307.145 256.528 307.708 257.091 cv
308.27 257.653 309.034 257.97 309.829 257.97 cv
cp
@
84.3949 151.025 mo
85.1906 151.025 85.9537 150.708 86.5163 150.146 cv
87.0788 149.583 87.3949 148.82 87.3949 148.025 cv
87.3949 147.229 87.0788 146.466 86.5163 145.903 cv
85.9537 145.341 85.1906 145.025 84.3949 145.025 cv
83.5993 145.025 82.8362 145.341 82.2736 145.903 cv
81.711 146.466 81.3949 147.229 81.3949 148.025 cv
81.3949 148.82 81.711 149.583 82.2736 150.146 cv
82.8362 150.708 83.5993 151.025 84.3949 151.025 cv
cp
f
84.3949 151.025 mo
85.1906 151.025 85.9537 150.708 86.5163 150.146 cv
87.0788 149.583 87.3949 148.82 87.3949 148.025 cv
87.3949 147.229 87.0788 146.466 86.5163 145.903 cv
85.9537 145.341 85.1906 145.025 84.3949 145.025 cv
83.5993 145.025 82.8362 145.341 82.2736 145.903 cv
81.711 146.466 81.3949 147.229 81.3949 148.025 cv
81.3949 148.82 81.711 149.583 82.2736 150.146 cv
82.8362 150.708 83.5993 151.025 84.3949 151.025 cv
cp
@
191.288 371.929 mo
192.084 371.929 192.847 371.613 193.409 371.05 cv
193.972 370.488 194.288 369.725 194.288 368.929 cv
194.288 368.134 193.972 367.37 193.409 366.808 cv
192.847 366.245 192.084 365.929 191.288 365.929 cv
190.492 365.929 189.729 366.245 189.167 366.808 cv
188.604 367.37 188.288 368.134 188.288 368.929 cv
188.288 369.725 188.604 370.488 189.167 371.05 cv
189.729 371.613 190.492 371.929 191.288 371.929 cv
cp
f
191.288 371.929 mo
192.084 371.929 192.847 371.613 193.409 371.05 cv
193.972 370.488 194.288 369.725 194.288 368.929 cv
194.288 368.134 193.972 367.37 193.409 366.808 cv
192.847 366.245 192.084 365.929 191.288 365.929 cv
190.492 365.929 189.729 366.245 189.167 366.808 cv
188.604 367.37 188.288 368.134 188.288 368.929 cv
188.288 369.725 188.604 370.488 189.167 371.05 cv
189.729 371.613 190.492 371.929 191.288 371.929 cv
cp
@
88.6088 141.023 mo
89.4044 141.023 90.1675 140.707 90.7301 140.144 cv
91.2927 139.581 91.6088 138.818 91.6088 138.023 cv
91.6088 137.227 91.2927 136.464 90.7301 135.901 cv
90.1675 135.339 89.4044 135.023 88.6088 135.023 cv
87.8132 135.023 87.0501 135.339 86.4875 135.901 cv
85.9249 136.464 85.6088 137.227 85.6088 138.023 cv
85.6088 138.818 85.9249 139.581 86.4875 140.144 cv
87.0501 140.707 87.8132 141.023 88.6088 141.023 cv
cp
f
88.6088 141.023 mo
89.4044 141.023 90.1675 140.707 90.7301 140.144 cv
91.2927 139.581 91.6088 138.818 91.6088 138.023 cv
91.6088 137.227 91.2927 136.464 90.7301 135.901 cv
90.1675 135.339 89.4044 135.023 88.6088 135.023 cv
87.8132 135.023 87.0501 135.339 86.4875 135.901 cv
85.9249 136.464 85.6088 137.227 85.6088 138.023 cv
85.6088 138.818 85.9249 139.581 86.4875 140.144 cv
87.0501 140.707 87.8132 141.023 88.6088 141.023 cv
cp
@
212.042 428.504 mo
212.838 428.504 213.601 428.188 214.164 427.625 cv
214.726 427.062 215.042 426.299 215.042 425.504 cv
215.042 424.708 214.726 423.945 214.164 423.382 cv
213.601 422.82 212.838 422.504 212.042 422.504 cv
211.247 422.504 210.484 422.82 209.921 423.382 cv
209.358 423.945 209.042 424.708 209.042 425.504 cv
209.042 426.299 209.358 427.062 209.921 427.625 cv
210.484 428.188 211.247 428.504 212.042 428.504 cv
cp
f
212.042 428.504 mo
212.838 428.504 213.601 428.188 214.164 427.625 cv
214.726 427.062 215.042 426.299 215.042 425.504 cv
215.042 424.708 214.726 423.945 214.164 423.382 cv
213.601 422.82 212.838 422.504 212.042 422.504 cv
211.247 422.504 210.484 422.82 209.921 423.382 cv
209.358 423.945 209.042 424.708 209.042 425.504 cv
209.042 426.299 209.358 427.062 209.921 427.625 cv
210.484 428.188 211.247 428.504 212.042 428.504 cv
cp
@
131.054 283.58 mo
131.85 283.58 132.613 283.264 133.175 282.701 cv
133.738 282.139 134.054 281.376 134.054 280.58 cv
134.054 279.784 133.738 279.021 133.175 278.459 cv
132.613 277.896 131.85 277.58 131.054 277.58 cv
130.258 277.58 129.495 277.896 128.933 278.459 cv
128.37 279.021 128.054 279.784 128.054 280.58 cv
128.054 281.376 128.37 282.139 128.933 282.701 cv
129.495 283.264 130.258 283.58 131.054 283.58 cv
cp
f
131.054 283.58 mo
131.85 283.58 132.613 283.264 133.175 282.701 cv
133.738 282.139 134.054 281.376 134.054 280.58 cv
134.054 279.784 133.738 279.021 133.175 278.459 cv
132.613 277.896 131.85 277.58 131.054 277.58 cv
130.258 277.58 129.495 277.896 128.933 278.459 cv
128.37 279.021 128.054 279.784 128.054 280.58 cv
128.054 281.376 128.37 282.139 128.933 282.701 cv
129.495 283.264 130.258 283.58 131.054 283.58 cv
cp
@
1.5 lw
[5.55 2.4 ] 0 dsh
70.4909 63.933 mo
78.7729 68.7518 li
87.0549 73.5706 li
95.3369 78.3895 li
103.619 83.2083 li
111.901 88.0271 li
120.183 92.8459 li
128.465 97.6648 li
136.747 102.484 li
145.029 107.302 li
153.311 112.121 li
161.593 116.94 li
169.875 121.759 li
178.157 126.578 li
186.439 131.397 li
194.721 136.215 li
203.003 141.034 li
211.285 145.853 li
219.567 150.672 li
227.849 155.491 li
236.131 160.309 li
244.413 165.128 li
252.695 169.947 li
260.977 174.766 li
269.259 179.585 li
277.541 184.404 li
285.823 189.222 li
294.105 194.041 li
302.387 198.86 li
310.669 203.679 li
318.951 208.498 li
327.233 213.317 li
335.515 218.135 li
343.797 222.954 li
352.079 227.773 li
360.361 232.592 li
368.643 237.411 li
376.925 242.229 li
385.207 247.048 li
393.489 251.867 li
401.771 256.686 li
410.053 261.505 li
418.335 266.324 li
426.617 271.142 li
434.899 275.961 li
443.181 280.78 li
451.463 285.599 li
459.745 290.418 li
468.027 295.237 li
476.309 300.055 li
.940856 .731044 0 0 cmyk
@
2 lc
[] 0 dsh
70.4909 108.237 mo
78.7729 113.198 li
87.0549 118.159 li
95.3369 123.12 li
103.619 128.081 li
111.901 133.042 li
120.183 138.003 li
128.465 142.963 li
136.747 147.924 li
145.029 152.885 li
153.311 157.846 li
161.593 162.807 li
169.875 167.768 li
178.157 172.728 li
186.439 177.689 li
194.721 182.65 li
203.003 187.611 li
211.285 192.572 li
219.567 197.533 li
227.849 202.494 li
236.131 207.454 li
244.413 212.415 li
252.695 217.376 li
260.977 222.337 li
269.259 227.298 li
277.541 232.259 li
285.823 237.22 li
294.105 242.18 li
302.387 247.141 li
310.669 252.102 li
318.951 257.063 li
327.233 262.024 li
335.515 266.985 li
343.797 271.945 li
352.079 276.906 li
360.361 281.867 li
368.643 286.828 li
376.925 291.789 li
385.207 296.75 li
393.489 301.711 li
401.771 306.671 li
410.053 311.632 li
418.335 316.593 li
426.617 321.554 li
434.899 326.515 li
443.181 331.476 li
451.463 336.437 li
459.745 341.397 li
468.027 346.358 li
476.309 351.319 li
0 1 1 0 cmyk
@
.8 lw
0 lj
50.2 450.72 mo
50.2 7.20001 li
1 /0 /CSD get_res sepcs
1 sep
@
496.6 450.72 mo
496.6 7.20001 li
@
50.2 450.72 mo
496.6 450.72 li
@
50.2 7.20001 mo
496.6 7.20001 li
@
479.8 94.15 mo
475.886 94.15 li
475.748 93.4879 475.42 92.8745 474.934 92.3891 cv
474.278 91.7328 473.388 91.364 472.46 91.364 cv
471.531 91.364 470.641 91.7328 469.985 92.3891 cv
469.499 92.8745 469.171 93.4879 469.033 94.15 cv
283 94.15 li
281.477 94.1482 280.429 93.7727 279.754 93.0965 cv
279.077 92.4206 278.702 91.3732 278.7 89.85 cv
278.7 24 li
278.702 22.4768 279.077 21.4294 279.754 20.7536 cv
280.429 20.0773 281.477 19.7018 283 19.7 cv
479.8 19.7 li
481.323 19.7018 482.371 20.0773 483.046 20.7536 cv
483.723 21.4294 484.098 22.4768 484.1 24 cv
484.1 89.85 li
484.098 91.3732 483.723 92.4206 483.046 93.0965 cv
482.371 93.7727 481.323 94.1482 479.8 94.15 cv
452.671 89.4637 mo
452.671 89.4637 li
453.599 89.4637 454.489 89.095 455.145 88.4386 cv
455.802 87.7823 456.171 86.892 456.171 85.9637 cv
456.171 85.0355 455.802 84.1453 455.145 83.4889 cv
454.489 82.8325 453.599 82.4638 452.671 82.4638 cv
451.742 82.4638 450.852 82.8325 450.196 83.4889 cv
449.539 84.1453 449.171 85.0355 449.171 85.9637 cv
449.171 86.892 449.539 87.7823 450.196 88.4386 cv
450.852 89.095 451.742 89.4637 452.671 89.4637 cv
352.24 80.8664 mo
352.24 80.8664 li
353.168 80.8664 354.058 80.4977 354.715 79.8413 cv
355.371 79.185 355.74 78.2947 355.74 77.3664 cv
355.74 76.4382 355.371 75.548 354.715 74.8916 cv
354.058 74.2352 353.168 73.8665 352.24 73.8665 cv
351.311 73.8665 350.421 74.2352 349.765 74.8916 cv
349.108 75.548 348.74 76.4382 348.74 77.3664 cv
348.74 78.2947 349.108 79.185 349.765 79.8413 cv
350.421 80.4977 351.311 80.8664 352.24 80.8664 cv
415.671 76.8403 mo
415.671 76.8403 li
416.599 76.8403 417.489 76.4715 418.146 75.8152 cv
418.802 75.1587 419.171 74.2685 419.171 73.3403 cv
419.171 72.412 418.802 71.5217 418.146 70.8654 cv
417.489 70.209 416.599 69.8403 415.671 69.8403 cv
415.545 69.8403 415.42 69.847 415.297 69.8603 cv
415.44 69.4742 415.515 69.0622 415.515 68.6424 cv
415.515 67.7141 415.147 66.8239 414.49 66.1675 cv
413.834 65.5112 412.944 65.1424 412.015 65.1424 cv
411.087 65.1424 410.197 65.5112 409.541 66.1675 cv
408.884 66.8239 408.515 67.7141 408.515 68.6424 cv
408.515 69.5707 408.884 70.4609 409.541 71.1173 cv
410.197 71.7736 411.087 72.1424 412.015 72.1424 cv
412.015 72.1424 li
412.141 72.1424 412.266 72.1356 412.389 72.1224 cv
412.246 72.5085 412.171 72.9205 412.171 73.3403 cv
412.171 74.2685 412.539 75.1587 413.196 75.8152 cv
413.852 76.4715 414.742 76.8403 415.671 76.8403 cv
367.187 74.0674 mo
367.187 74.0674 li
368.116 74.0674 369.006 73.6986 369.662 73.0423 cv
370.319 72.3859 370.687 71.4956 370.687 70.5674 cv
370.687 69.6391 370.319 68.7488 369.662 68.0925 cv
369.006 67.4362 368.116 67.0674 367.187 67.0674 cv
366.259 67.0674 365.369 67.4362 364.712 68.0925 cv
364.056 68.7488 363.687 69.6391 363.687 70.5674 cv
363.687 71.4956 364.056 72.3859 364.712 73.0423 cv
365.369 73.6986 366.259 74.0674 367.187 74.0674 cv
296.56 72.1439 mo
296.56 72.1439 li
297.488 72.1439 298.379 71.7751 299.035 71.1188 cv
299.691 70.4625 300.06 69.5722 300.06 68.6439 cv
300.06 67.7157 299.691 66.8254 299.035 66.169 cv
298.379 65.5127 297.488 65.1439 296.56 65.1439 cv
295.632 65.1439 294.742 65.5127 294.085 66.169 cv
293.429 66.8254 293.06 67.7157 293.06 68.6439 cv
293.06 69.5722 293.429 70.4625 294.085 71.1188 cv
294.742 71.7751 295.632 72.1439 296.56 72.1439 cv
350.359 67.0061 mo
350.359 67.0061 li
351.287 67.0061 352.178 66.6373 352.834 65.981 cv
353.49 65.3247 353.859 64.4344 353.859 63.5061 cv
353.859 62.5779 353.49 61.6877 352.834 61.0312 cv
352.178 60.3749 351.287 60.0061 350.359 60.0061 cv
349.431 60.0061 348.54 60.3749 347.884 61.0312 cv
347.228 61.6877 346.859 62.5779 346.859 63.5061 cv
346.859 64.4344 347.228 65.3247 347.884 65.981 cv
348.54 66.6373 349.431 67.0061 350.359 67.0061 cv
332.632 63.6982 mo
332.632 63.6982 li
333.56 63.6982 334.45 63.3294 335.106 62.673 cv
335.763 62.0166 336.132 61.1263 336.132 60.1981 cv
336.132 59.27 335.763 58.3797 335.106 57.7232 cv
335.106 57.7233 li
334.45 57.0669 333.56 56.6981 332.632 56.6981 cv
331.703 56.6981 330.813 57.0669 330.157 57.7233 cv
330.157 57.7232 li
329.5 58.3797 329.132 59.27 329.132 60.1981 cv
329.132 61.1263 329.5 62.0166 330.157 62.673 cv
330.813 63.3294 331.703 63.6982 332.632 63.6982 cv
316.082 54.4246 mo
316.082 54.4246 li
317.01 54.4246 317.901 54.0559 318.557 53.3995 cv
319.213 52.7431 319.582 51.8529 319.582 50.9247 cv
319.582 49.9964 319.213 49.1061 318.557 48.4498 cv
317.901 47.7933 317.01 47.4247 316.082 47.4247 cv
315.154 47.4247 314.264 47.7933 313.607 48.4498 cv
312.951 49.1061 312.582 49.9964 312.582 50.9247 cv
312.582 51.8529 312.951 52.7431 313.607 53.3995 cv
314.264 54.0559 315.154 54.4246 316.082 54.4246 cv
473.646 53.9719 mo
473.646 53.9719 li
474.574 53.9719 475.465 53.6031 476.121 52.9468 cv
476.777 52.2904 477.146 51.4001 477.146 50.4719 cv
477.146 49.5436 476.777 48.6535 476.121 47.997 cv
475.465 47.3407 474.574 46.9719 473.646 46.9719 cv
472.718 46.9719 471.828 47.3407 471.171 47.997 cv
470.515 48.6535 470.146 49.5436 470.146 50.4719 cv
470.146 51.4001 470.515 52.2904 471.171 52.9468 cv
471.828 53.6031 472.718 53.9719 473.646 53.9719 cv
343.879 40.4117 mo
343.879 40.4117 li
344.807 40.4116 345.697 40.0429 346.354 39.3865 cv
347.01 38.7301 347.379 37.8399 347.379 36.9116 cv
347.379 35.9834 347.01 35.0932 346.354 34.4367 cv
345.697 33.7804 344.807 33.4116 343.879 33.4116 cv
342.951 33.4116 342.06 33.7804 341.404 34.4367 cv
340.748 35.0932 340.379 35.9834 340.379 36.9116 cv
340.379 37.8399 340.748 38.7301 341.404 39.3865 cv
342.06 40.0429 342.951 40.4116 343.879 40.4117 cv
431.63 30.8601 mo
431.63 30.8601 li
432.558 30.8601 433.449 30.4913 434.105 29.8349 cv
434.761 29.1786 435.13 28.2883 435.13 27.3601 cv
435.13 26.4318 434.761 25.5415 434.105 24.8852 cv
433.449 24.2289 432.558 23.8601 431.63 23.8601 cv
430.702 23.8601 429.812 24.2289 429.155 24.8852 cv
428.499 25.5415 428.13 26.4318 428.13 27.3601 cv
428.13 28.2883 428.499 29.1786 429.155 29.8349 cv
429.812 30.4913 430.702 30.8601 431.63 30.8601 cv
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
415.671 75.8403 mo
415.008 75.8403 414.372 75.5768 413.903 75.108 cv
413.434 74.6392 413.171 74.0032 413.171 73.3403 cv
413.171 72.6983 413.418 72.0817 413.859 71.6177 cv
414.069 71.4875 414.266 71.3347 414.446 71.1606 cv
414.817 70.9524 415.238 70.8402 415.671 70.8402 cv
416.334 70.8402 416.97 71.1037 417.438 71.5724 cv
417.907 72.0412 418.171 72.6773 418.171 73.3403 cv
418.171 74.0032 417.907 74.6392 417.438 75.108 cv
416.97 75.5768 416.334 75.8403 415.671 75.8403 cv
415.671 75.8403 li
.172549 .0941176 .0156863 0 cmyk
f
415.671 76.8403 mo
415.671 76.8403 li
414.742 76.8403 413.852 76.4715 413.196 75.8152 cv
412.539 75.1587 412.171 74.2685 412.171 73.3403 cv
412.171 72.9205 412.246 72.5085 412.389 72.1224 cv
412.913 72.0661 413.415 71.8928 413.859 71.6177 cv
413.418 72.0817 413.171 72.6983 413.171 73.3403 cv
413.171 74.0032 413.434 74.6392 413.903 75.108 cv
414.372 75.5768 415.008 75.8403 415.671 75.8403 cv
415.671 75.8403 li
416.334 75.8403 416.97 75.5768 417.438 75.108 cv
417.907 74.6392 418.171 74.0032 418.171 73.3403 cv
418.171 72.6773 417.907 72.0412 417.438 71.5724 cv
416.97 71.1037 416.334 70.8402 415.671 70.8402 cv
415.238 70.8402 414.817 70.9524 414.446 71.1606 cv
414.461 71.1463 414.476 71.1319 414.49 71.1173 cv
414.85 70.7577 415.123 70.328 415.297 69.8603 cv
415.42 69.847 415.545 69.8403 415.671 69.8403 cv
416.599 69.8403 417.489 70.209 418.146 70.8654 cv
418.802 71.5217 419.171 72.412 419.171 73.3403 cv
419.171 74.2685 418.802 75.1587 418.146 75.8152 cv
417.489 76.4715 416.599 76.8403 415.671 76.8403 cv
f
367.187 73.0674 mo
366.524 73.0674 365.888 72.8039 365.42 72.3351 cv
364.951 71.8663 364.687 71.2304 364.687 70.5674 cv
364.687 69.9044 364.951 69.2685 365.42 68.7997 cv
365.42 68.7996 li
365.888 68.3308 366.524 68.0674 367.187 68.0674 cv
367.85 68.0674 368.486 68.3308 368.955 68.7996 cv
368.955 68.7997 li
369.424 69.2685 369.687 69.9044 369.687 70.5674 cv
369.687 71.2304 369.424 71.8663 368.955 72.3351 cv
368.486 72.8039 367.85 73.0674 367.187 73.0674 cv
367.187 73.0674 li
f
367.187 74.0674 mo
367.187 74.0674 li
366.259 74.0674 365.369 73.6986 364.712 73.0423 cv
364.056 72.3859 363.687 71.4956 363.687 70.5674 cv
363.687 69.6391 364.056 68.7488 364.712 68.0925 cv
365.369 67.4362 366.259 67.0674 367.187 67.0674 cv
368.116 67.0674 369.006 67.4362 369.662 68.0925 cv
370.319 68.7488 370.687 69.6391 370.687 70.5674 cv
370.687 71.4956 370.319 72.3859 369.662 73.0423 cv
369.006 73.6986 368.116 74.0674 367.187 74.0674 cv
367.187 68.0674 mo
366.524 68.0674 365.888 68.3308 365.42 68.7996 cv
365.42 68.7997 li
364.951 69.2685 364.687 69.9044 364.687 70.5674 cv
364.687 71.2304 364.951 71.8663 365.42 72.3351 cv
365.888 72.8039 366.524 73.0674 367.187 73.0674 cv
367.187 73.0674 li
367.85 73.0674 368.486 72.8039 368.955 72.3351 cv
369.424 71.8663 369.687 71.2304 369.687 70.5674 cv
369.687 69.9044 369.424 69.2685 368.955 68.7997 cv
368.955 68.7996 li
368.486 68.3308 367.85 68.0674 367.187 68.0674 cv
f
431.63 29.86 mo
430.967 29.86 430.331 29.5967 429.862 29.1278 cv
429.394 28.659 429.13 28.0231 429.13 27.3601 cv
429.13 26.6971 429.394 26.0612 429.862 25.5924 cv
430.331 25.1234 430.967 24.8601 431.63 24.8601 cv
432.293 24.8601 432.929 25.1234 433.398 25.5924 cv
433.867 26.0612 434.13 26.6971 434.13 27.3601 cv
434.13 28.0231 433.867 28.659 433.398 29.1278 cv
432.929 29.5967 432.293 29.86 431.63 29.86 cv
431.63 29.86 li
f
431.63 30.8601 mo
431.63 30.8601 li
430.702 30.8601 429.812 30.4913 429.155 29.8349 cv
428.499 29.1786 428.13 28.2883 428.13 27.3601 cv
428.13 26.4318 428.499 25.5415 429.155 24.8852 cv
429.812 24.2289 430.702 23.8601 431.63 23.8601 cv
432.558 23.8601 433.449 24.2289 434.105 24.8852 cv
434.761 25.5415 435.13 26.4318 435.13 27.3601 cv
435.13 28.2883 434.761 29.1786 434.105 29.8349 cv
433.449 30.4913 432.558 30.8601 431.63 30.8601 cv
431.63 24.8601 mo
430.967 24.8601 430.331 25.1234 429.862 25.5924 cv
429.394 26.0612 429.13 26.6971 429.13 27.3601 cv
429.13 28.0231 429.394 28.659 429.862 29.1278 cv
430.331 29.5967 430.967 29.86 431.63 29.86 cv
431.63 29.86 li
432.293 29.86 432.929 29.5967 433.398 29.1278 cv
433.867 28.659 434.13 28.0231 434.13 27.3601 cv
434.13 26.6971 433.867 26.0612 433.398 25.5924 cv
432.929 25.1234 432.293 24.8601 431.63 24.8601 cv
f
343.879 39.4117 mo
343.216 39.4117 342.58 39.1482 342.111 38.6794 cv
341.642 38.2106 341.379 37.5746 341.379 36.9116 cv
341.379 36.2487 341.642 35.6127 342.111 35.1439 cv
342.58 34.6751 343.216 34.4116 343.879 34.4116 cv
344.542 34.4116 345.178 34.6751 345.647 35.1439 cv
346.116 35.6127 346.379 36.2487 346.379 36.9116 cv
346.379 37.5746 346.116 38.2106 345.647 38.6794 cv
345.178 39.1482 344.542 39.4117 343.879 39.4117 cv
343.879 39.4117 li
f
343.879 40.4117 mo
343.879 40.4117 li
342.951 40.4116 342.06 40.0429 341.404 39.3865 cv
340.748 38.7301 340.379 37.8399 340.379 36.9116 cv
340.379 35.9834 340.748 35.0932 341.404 34.4367 cv
342.06 33.7804 342.951 33.4116 343.879 33.4116 cv
344.807 33.4116 345.697 33.7804 346.354 34.4367 cv
347.01 35.0932 347.379 35.9834 347.379 36.9116 cv
347.379 37.8399 347.01 38.7301 346.354 39.3865 cv
345.697 40.0429 344.807 40.4116 343.879 40.4117 cv
343.879 34.4116 mo
343.216 34.4116 342.58 34.6751 342.111 35.1439 cv
341.642 35.6127 341.379 36.2487 341.379 36.9116 cv
341.379 37.5746 341.642 38.2106 342.111 38.6794 cv
342.58 39.1482 343.216 39.4117 343.879 39.4117 cv
343.879 39.4117 li
344.542 39.4117 345.178 39.1482 345.647 38.6794 cv
346.116 38.2106 346.379 37.5746 346.379 36.9116 cv
346.379 36.2487 346.116 35.6127 345.647 35.1439 cv
345.178 34.6751 344.542 34.4116 343.879 34.4116 cv
f
332.632 62.6982 mo
331.969 62.6982 331.333 62.4347 330.864 61.9659 cv
330.395 61.4971 330.132 60.8611 330.132 60.1981 cv
330.132 59.5352 330.395 58.8992 330.864 58.4304 cv
331.333 57.9616 331.969 57.6981 332.632 57.6981 cv
333.295 57.6981 333.931 57.9616 334.399 58.4304 cv
334.868 58.8992 335.132 59.5352 335.132 60.1981 cv
335.132 60.8611 334.868 61.4971 334.399 61.9659 cv
333.931 62.4347 333.295 62.6982 332.632 62.6982 cv
332.632 62.6982 li
f
332.632 63.6982 mo
332.632 63.6982 li
331.703 63.6982 330.813 63.3294 330.157 62.673 cv
329.5 62.0166 329.132 61.1263 329.132 60.1981 cv
329.132 59.27 329.5 58.3797 330.157 57.7232 cv
330.157 57.7233 li
330.813 57.0669 331.703 56.6981 332.632 56.6981 cv
333.56 56.6981 334.45 57.0669 335.106 57.7233 cv
335.106 57.7232 li
335.763 58.3797 336.132 59.27 336.132 60.1981 cv
336.132 61.1263 335.763 62.0166 335.106 62.673 cv
334.45 63.3294 333.56 63.6982 332.632 63.6982 cv
332.632 57.6981 mo
331.969 57.6981 331.333 57.9616 330.864 58.4304 cv
330.395 58.8992 330.132 59.5352 330.132 60.1981 cv
330.132 60.8611 330.395 61.4971 330.864 61.9659 cv
331.333 62.4347 331.969 62.6982 332.632 62.6982 cv
332.632 62.6982 li
333.295 62.6982 333.931 62.4347 334.399 61.9659 cv
334.868 61.4971 335.132 60.8611 335.132 60.1981 cv
335.132 59.5352 334.868 58.8992 334.399 58.4304 cv
333.931 57.9616 333.295 57.6981 332.632 57.6981 cv
f
473.646 52.972 mo
472.983 52.972 472.347 52.7085 471.878 52.2397 cv
471.41 51.7709 471.146 51.1349 471.146 50.4719 cv
471.146 49.809 471.41 49.173 471.878 48.7042 cv
472.347 48.2354 472.983 47.9719 473.646 47.9719 cv
474.309 47.9719 474.945 48.2354 475.414 48.7042 cv
475.883 49.173 476.146 49.809 476.146 50.4719 cv
476.146 51.1349 475.883 51.7709 475.414 52.2397 cv
474.945 52.7085 474.309 52.972 473.646 52.972 cv
473.646 52.972 li
f
473.646 53.9719 mo
473.646 53.9719 li
472.718 53.9719 471.828 53.6031 471.171 52.9468 cv
470.515 52.2904 470.146 51.4001 470.146 50.4719 cv
470.146 49.5436 470.515 48.6535 471.171 47.997 cv
471.828 47.3407 472.718 46.9719 473.646 46.9719 cv
474.574 46.9719 475.465 47.3407 476.121 47.997 cv
476.777 48.6535 477.146 49.5436 477.146 50.4719 cv
477.146 51.4001 476.777 52.2904 476.121 52.9468 cv
475.465 53.6031 474.574 53.9719 473.646 53.9719 cv
473.646 47.9719 mo
472.983 47.9719 472.347 48.2354 471.878 48.7042 cv
471.41 49.173 471.146 49.809 471.146 50.4719 cv
471.146 51.1349 471.41 51.7709 471.878 52.2397 cv
472.347 52.7085 472.983 52.972 473.646 52.972 cv
473.646 52.972 li
474.309 52.972 474.945 52.7085 475.414 52.2397 cv
475.883 51.7709 476.146 51.1349 476.146 50.4719 cv
476.146 49.809 475.883 49.173 475.414 48.7042 cv
474.945 48.2354 474.309 47.9719 473.646 47.9719 cv
f
296.56 71.1439 mo
295.897 71.1439 295.261 70.8804 294.792 70.4116 cv
294.323 69.9428 294.06 69.3068 294.06 68.6439 cv
294.06 67.9809 294.323 67.3449 294.792 66.8761 cv
295.261 66.4073 295.897 66.1439 296.56 66.1439 cv
297.223 66.1439 297.859 66.4073 298.328 66.8761 cv
298.797 67.3449 299.06 67.9809 299.06 68.6439 cv
299.06 69.3068 298.797 69.9428 298.328 70.4116 cv
297.859 70.8804 297.223 71.1439 296.56 71.1439 cv
296.56 71.1439 li
f
296.56 72.1439 mo
296.56 72.1439 li
295.632 72.1439 294.742 71.7751 294.085 71.1188 cv
293.429 70.4625 293.06 69.5722 293.06 68.6439 cv
293.06 67.7157 293.429 66.8254 294.085 66.169 cv
294.742 65.5127 295.632 65.1439 296.56 65.1439 cv
297.488 65.1439 298.379 65.5127 299.035 66.169 cv
299.691 66.8254 300.06 67.7157 300.06 68.6439 cv
300.06 69.5722 299.691 70.4625 299.035 71.1188 cv
298.379 71.7751 297.488 72.1439 296.56 72.1439 cv
296.56 66.1439 mo
295.897 66.1439 295.261 66.4073 294.792 66.8761 cv
294.323 67.3449 294.06 67.9809 294.06 68.6439 cv
294.06 69.3068 294.323 69.9428 294.792 70.4116 cv
295.261 70.8804 295.897 71.1439 296.56 71.1439 cv
296.56 71.1439 li
297.223 71.1439 297.859 70.8804 298.328 70.4116 cv
298.797 69.9428 299.06 69.3068 299.06 68.6439 cv
299.06 67.9809 298.797 67.3449 298.328 66.8761 cv
297.859 66.4073 297.223 66.1439 296.56 66.1439 cv
f
352.24 79.8665 mo
351.577 79.8665 350.941 79.6031 350.472 79.1343 cv
350.003 78.6655 349.74 78.0295 349.74 77.3664 cv
349.74 76.7036 350.003 76.0675 350.472 75.5987 cv
350.941 75.1299 351.577 74.8665 352.24 74.8665 cv
352.903 74.8665 353.539 75.1299 354.007 75.5987 cv
354.476 76.0675 354.74 76.7036 354.74 77.3664 cv
354.74 78.0295 354.476 78.6655 354.007 79.1343 cv
353.539 79.6031 352.903 79.8665 352.24 79.8665 cv
352.24 79.8665 li
f
352.24 80.8664 mo
352.24 80.8664 li
351.311 80.8664 350.421 80.4977 349.765 79.8413 cv
349.108 79.185 348.74 78.2947 348.74 77.3664 cv
348.74 76.4382 349.108 75.548 349.765 74.8916 cv
350.421 74.2352 351.311 73.8665 352.24 73.8665 cv
353.168 73.8665 354.058 74.2352 354.715 74.8916 cv
355.371 75.548 355.74 76.4382 355.74 77.3664 cv
355.74 78.2947 355.371 79.185 354.715 79.8413 cv
354.058 80.4977 353.168 80.8664 352.24 80.8664 cv
352.24 74.8665 mo
351.577 74.8665 350.941 75.1299 350.472 75.5987 cv
350.003 76.0675 349.74 76.7036 349.74 77.3664 cv
349.74 78.0295 350.003 78.6655 350.472 79.1343 cv
350.941 79.6031 351.577 79.8665 352.24 79.8665 cv
352.24 79.8665 li
352.903 79.8665 353.539 79.6031 354.007 79.1343 cv
354.476 78.6655 354.74 78.0295 354.74 77.3664 cv
354.74 76.7036 354.476 76.0675 354.007 75.5987 cv
353.539 75.1299 352.903 74.8665 352.24 74.8665 cv
f
316.082 53.4246 mo
315.419 53.4246 314.783 53.1612 314.314 52.6924 cv
313.846 52.2236 313.582 51.5876 313.582 50.9247 cv
313.582 50.2616 313.846 49.6256 314.314 49.1568 cv
314.783 48.688 315.419 48.4246 316.082 48.4246 cv
316.745 48.4246 317.381 48.688 317.85 49.1568 cv
318.319 49.6256 318.582 50.2616 318.582 50.9247 cv
318.582 51.5876 318.319 52.2236 317.85 52.6924 cv
317.381 53.1612 316.745 53.4246 316.082 53.4246 cv
316.082 53.4246 li
f
316.082 54.4246 mo
316.082 54.4246 li
315.154 54.4246 314.264 54.0559 313.607 53.3995 cv
312.951 52.7431 312.582 51.8529 312.582 50.9247 cv
312.582 49.9964 312.951 49.1061 313.607 48.4498 cv
314.264 47.7933 315.154 47.4247 316.082 47.4247 cv
317.01 47.4247 317.901 47.7933 318.557 48.4498 cv
319.213 49.1061 319.582 49.9964 319.582 50.9247 cv
319.582 51.8529 319.213 52.7431 318.557 53.3995 cv
317.901 54.0559 317.01 54.4246 316.082 54.4246 cv
316.082 48.4246 mo
315.419 48.4246 314.783 48.688 314.314 49.1568 cv
313.846 49.6256 313.582 50.2616 313.582 50.9247 cv
313.582 51.5876 313.846 52.2236 314.314 52.6924 cv
314.783 53.1612 315.419 53.4246 316.082 53.4246 cv
316.082 53.4246 li
316.745 53.4246 317.381 53.1612 317.85 52.6924 cv
318.319 52.2236 318.582 51.5876 318.582 50.9247 cv
318.582 50.2616 318.319 49.6256 317.85 49.1568 cv
317.381 48.688 316.745 48.4246 316.082 48.4246 cv
f
350.359 66.0062 mo
349.696 66.0062 349.06 65.7428 348.591 65.274 cv
348.122 64.8052 347.859 64.1691 347.859 63.5061 cv
347.859 62.8432 348.122 62.2072 348.591 61.7384 cv
349.06 61.2696 349.696 61.0061 350.359 61.0061 cv
351.022 61.0061 351.658 61.2696 352.127 61.7384 cv
352.596 62.2072 352.859 62.8432 352.859 63.5061 cv
352.859 64.1691 352.596 64.8052 352.127 65.274 cv
351.658 65.7428 351.022 66.0062 350.359 66.0062 cv
350.359 66.0062 li
f
350.359 67.0061 mo
350.359 67.0061 li
349.431 67.0061 348.54 66.6373 347.884 65.981 cv
347.228 65.3247 346.859 64.4344 346.859 63.5061 cv
346.859 62.5779 347.228 61.6877 347.884 61.0312 cv
348.54 60.3749 349.431 60.0061 350.359 60.0061 cv
351.287 60.0061 352.178 60.3749 352.834 61.0312 cv
353.49 61.6877 353.859 62.5779 353.859 63.5061 cv
353.859 64.4344 353.49 65.3247 352.834 65.981 cv
352.178 66.6373 351.287 67.0061 350.359 67.0061 cv
350.359 61.0061 mo
349.696 61.0061 349.06 61.2696 348.591 61.7384 cv
348.122 62.2072 347.859 62.8432 347.859 63.5061 cv
347.859 64.1691 348.122 64.8052 348.591 65.274 cv
349.06 65.7428 349.696 66.0062 350.359 66.0062 cv
350.359 66.0062 li
351.022 66.0062 351.658 65.7428 352.127 65.274 cv
352.596 64.8052 352.859 64.1691 352.859 63.5061 cv
352.859 62.8432 352.596 62.2072 352.127 61.7384 cv
351.658 61.2696 351.022 61.0061 350.359 61.0061 cv
f
452.671 88.4637 mo
452.671 88.4637 452.671 88.4637 452.671 88.4637 cv
452.671 88.4637 li
452.008 88.4638 451.372 88.2004 450.903 87.7316 cv
450.434 87.2628 450.171 86.6268 450.171 85.9637 cv
450.171 85.3008 450.434 84.6648 450.903 84.196 cv
451.372 83.7272 452.008 83.4638 452.671 83.4638 cv
453.334 83.4638 453.97 83.7272 454.438 84.196 cv
454.907 84.6648 455.171 85.3008 455.171 85.9637 cv
455.171 86.6268 454.907 87.2628 454.438 87.7316 cv
453.97 88.2003 453.334 88.4637 452.671 88.4637 cv
f
452.671 89.4637 mo
452.671 89.4637 li
451.742 89.4637 450.852 89.095 450.196 88.4386 cv
449.539 87.7823 449.171 86.892 449.171 85.9637 cv
449.171 85.0355 449.539 84.1453 450.196 83.4889 cv
450.852 82.8325 451.742 82.4638 452.671 82.4638 cv
453.599 82.4638 454.489 82.8325 455.145 83.4889 cv
455.802 84.1453 456.171 85.0355 456.171 85.9637 cv
456.171 86.892 455.802 87.7823 455.145 88.4386 cv
454.489 89.095 453.599 89.4637 452.671 89.4637 cv
452.671 88.4637 mo
452.671 88.4637 452.671 88.4637 452.671 88.4637 cv
453.334 88.4637 453.97 88.2003 454.438 87.7316 cv
454.907 87.2628 455.171 86.6268 455.171 85.9637 cv
455.171 85.3008 454.907 84.6648 454.438 84.196 cv
453.97 83.7272 453.334 83.4638 452.671 83.4638 cv
452.008 83.4638 451.372 83.7272 450.903 84.196 cv
450.434 84.6648 450.171 85.3008 450.171 85.9637 cv
450.171 86.6268 450.434 87.2628 450.903 87.7316 cv
451.372 88.2004 452.008 88.4638 452.671 88.4637 cv
452.671 88.4637 li
f
474.855 94.15 mo
470.064 94.15 li
470.181 93.7555 470.396 93.3924 470.692 93.0961 cv
471.16 92.6274 471.796 92.364 472.459 92.364 cv
472.459 92.364 472.459 92.364 472.46 92.364 cv
473.123 92.3639 473.759 92.6273 474.227 93.0961 cv
474.524 93.3924 474.738 93.7555 474.855 94.15 cv
f
475.886 94.15 mo
474.855 94.15 li
474.738 93.7555 474.524 93.3924 474.227 93.0961 cv
473.759 92.6273 473.123 92.3639 472.46 92.364 cv
472.459 92.364 472.459 92.364 472.459 92.364 cv
471.796 92.364 471.16 92.6274 470.692 93.0961 cv
470.396 93.3924 470.181 93.7555 470.064 94.15 cv
469.033 94.15 li
469.171 93.4879 469.499 92.8745 469.985 92.3891 cv
470.641 91.7328 471.531 91.364 472.46 91.364 cv
473.388 91.364 474.278 91.7328 474.934 92.3891 cv
475.42 92.8745 475.748 93.4879 475.886 94.15 cv
f
412.015 71.1424 mo
411.352 71.1424 410.717 70.879 410.248 70.4102 cv
409.779 69.9415 409.516 69.3054 409.516 68.6424 cv
409.516 67.9794 409.779 67.3435 410.248 66.8747 cv
410.717 66.4059 411.352 66.1424 412.015 66.1424 cv
412.678 66.1424 413.314 66.4059 413.783 66.8747 cv
414.252 67.3435 414.515 67.9794 414.515 68.6424 cv
414.515 69.3054 414.252 69.9415 413.783 70.4102 cv
413.314 70.879 412.678 71.1424 412.015 71.1424 cv
412.015 71.1424 li
f
412.015 72.1424 mo
412.015 72.1424 li
411.087 72.1424 410.197 71.7736 409.541 71.1173 cv
408.884 70.4609 408.515 69.5707 408.515 68.6424 cv
408.515 67.7141 408.884 66.8239 409.541 66.1675 cv
410.197 65.5112 411.087 65.1424 412.015 65.1424 cv
412.944 65.1424 413.834 65.5112 414.49 66.1675 cv
415.147 66.8239 415.515 67.7141 415.515 68.6424 cv
415.515 69.0622 415.44 69.4742 415.297 69.8603 cv
415.123 70.328 414.85 70.7577 414.49 71.1173 cv
414.476 71.1319 414.461 71.1463 414.446 71.1606 cv
414.266 71.3347 414.069 71.4875 413.859 71.6177 cv
413.415 71.8928 412.913 72.0661 412.389 72.1224 cv
412.266 72.1356 412.141 72.1424 412.015 72.1424 cv
412.015 66.1424 mo
411.352 66.1424 410.717 66.4059 410.248 66.8747 cv
409.779 67.3435 409.516 67.9794 409.516 68.6424 cv
409.516 69.3054 409.779 69.9415 410.248 70.4102 cv
410.717 70.879 411.352 71.1424 412.015 71.1424 cv
412.015 71.1424 li
412.678 71.1424 413.314 70.879 413.783 70.4102 cv
414.252 69.9415 414.515 69.3054 414.515 68.6424 cv
414.515 67.9794 414.252 67.3435 413.783 66.8747 cv
413.314 66.4059 412.678 66.1424 412.015 66.1424 cv
f
479.81 95.15 mo
479.807 95.15 479.803 95.15 479.8 95.15 cv
475.948 95.15 li
475.956 95.0552 475.959 94.9598 475.959 94.864 cv
475.959 94.6223 475.934 94.3831 475.886 94.15 cv
479.8 94.15 li
481.323 94.1482 482.371 93.7727 483.046 93.0965 cv
483.723 92.4206 484.098 91.3732 484.1 89.85 cv
484.1 24 li
484.098 22.4768 483.723 21.4294 483.046 20.7536 cv
482.371 20.0773 481.323 19.7018 479.8 19.7 cv
283 19.7 li
281.477 19.7018 280.429 20.0773 279.754 20.7536 cv
279.077 21.4294 278.702 22.4768 278.7 24 cv
278.7 89.85 li
278.702 91.3732 279.077 92.4206 279.754 93.0965 cv
280.429 93.7727 281.477 94.1482 283 94.15 cv
283 94.15 li
469.033 94.15 li
468.985 94.3831 468.96 94.6223 468.96 94.864 cv
468.96 94.9598 468.963 95.0552 468.971 95.15 cv
283 95.15 li
282.997 95.15 282.993 95.15 282.99 95.15 cv
281.317 95.1501 279.969 94.7255 279.046 93.8036 cv
278.123 92.8793 277.698 91.5268 277.7 89.85 cv
277.7 24 li
277.698 22.3232 278.123 20.9707 279.046 20.0464 cv
279.969 19.1245 281.318 18.7 282.99 18.7 cv
282.993 18.7 282.997 18.7 283 18.7 cv
479.8 18.7 li
479.803 18.7 479.807 18.7 479.81 18.7 cv
481.483 18.7 482.831 19.1245 483.754 20.0464 cv
484.677 20.9707 485.102 22.3232 485.1 24 cv
485.1 89.85 li
485.102 91.5268 484.677 92.8793 483.754 93.8036 cv
482.831 94.7255 481.482 95.15 479.81 95.15 cv
1 /1 /CSD get_res sepcs
.160784 sep
f
474.943 95.15 mo
469.976 95.15 li
469.965 95.0555 469.96 94.96 469.96 94.864 cv
469.96 94.62 469.995 94.3797 470.064 94.15 cv
474.855 94.15 li
474.924 94.3797 474.959 94.62 474.959 94.864 cv
474.959 94.96 474.954 95.0555 474.943 95.15 cv
.172549 .0941176 .0156863 .160784 cmyk
f
475.948 95.15 mo
474.943 95.15 li
474.954 95.0555 474.959 94.96 474.959 94.864 cv
474.959 94.62 474.924 94.3797 474.855 94.15 cv
475.886 94.15 li
475.934 94.3831 475.959 94.6223 475.959 94.864 cv
475.959 94.9598 475.956 95.0552 475.948 95.15 cv
469.976 95.15 mo
468.971 95.15 li
468.963 95.0552 468.96 94.9598 468.96 94.864 cv
468.96 94.6223 468.985 94.3831 469.033 94.15 cv
470.064 94.15 li
469.995 94.3797 469.96 94.62 469.96 94.864 cv
469.96 94.96 469.965 95.0555 469.976 95.15 cv
f
1.5 lw
0 lc
1 lj
[5.55 2.4 ] 0 dsh
287.8 39.4313 mo
311.8 39.4313 li
335.8 39.4313 li
.940856 .731044 0 0 cmyk
@
363.808 28.8953 mo
365.68 30.3113 li
364.84 30.7673 li
363.784 32.7833 362.608 34.5593 361.336 36.1193 cv
360.04 37.6793 358.408 39.0473 356.416 40.2473 cv
356.224 39.9593 li
357.832 38.6633 359.272 37.1033 360.52 35.3273 cv
361.768 33.5513 362.872 31.3913 363.808 28.8953 cv
cp
370.384 29.1833 mo
369.616 29.6393 li
370.288 32.1353 371.416 34.0793 373 35.4473 cv
374.56 36.8393 376.216 37.6793 377.968 37.9913 cv
377.968 38.2793 li
377.008 38.3993 376.36 38.8073 376 39.4793 cv
373.936 38.3753 372.28 36.8633 371.08 34.9913 cv
369.856 33.1193 369.016 30.9353 368.584 28.4153 cv
370.384 29.1833 li
cp
360.16 37.9913 mo
370.84 37.9913 li
371.776 37.0553 li
373.096 38.3513 li
372.352 38.9273 li
372.208 43.8713 371.896 46.8473 371.392 47.8553 cv
370.888 48.8633 370.024 49.6073 368.776 50.0633 cv
368.584 49.0553 367.72 48.3353 366.16 47.9033 cv
366.16 47.5433 li
367.72 47.7833 368.728 47.8793 369.208 47.8553 cv
369.664 47.8313 370.024 47.4953 370.264 46.7993 cv
370.504 46.1273 370.768 43.3673 371.032 38.5433 cv
366.16 38.5433 li
365.776 41.2313 365.008 43.5113 363.904 45.3353 cv
362.776 47.1833 360.616 48.7673 357.448 50.1593 cv
357.256 49.7753 li
360.064 48.3353 361.96 46.6553 362.92 44.6873 cv
363.88 42.7193 364.456 40.6793 364.648 38.5433 cv
361.744 38.5433 li
360.904 38.7353 li
360.16 37.9913 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
388.84 28.3193 mo
388.936 28.0553 li
390.376 28.3673 391.264 28.7033 391.648 29.0393 cv
392.032 29.3753 392.224 29.6873 392.224 29.9273 cv
392.224 30.2393 392.032 30.6233 391.648 31.0553 cv
398.512 31.0553 li
399.808 29.8313 li
401.584 31.6073 li
383.416 31.6073 li
382.6 31.6073 381.832 31.7033 381.16 31.8953 cv
380.32 31.0553 li
391 31.0553 li
390.808 30.5033 390.544 30.0233 390.232 29.6153 cv
389.92 29.2073 389.464 28.7753 388.84 28.3193 cv
cp
387.256 45.1193 mo
394.096 45.0233 li
393.472 44.2073 392.776 43.5353 392.032 42.9593 cv
392.224 42.6713 li
394.096 43.4873 395.2 44.1353 395.584 44.5673 cv
395.968 44.9993 396.16 45.4073 396.16 45.7673 cv
396.16 46.0313 396.088 46.3193 395.968 46.6313 cv
395.824 46.9433 395.704 47.0873 395.584 47.0873 cv
395.464 47.0873 395.368 46.9913 395.32 46.7993 cv
395.056 46.4393 394.768 46.0073 394.48 45.4793 cv
391.648 45.6713 389.752 45.8633 388.744 46.0073 cv
387.736 46.1753 386.992 46.4393 386.512 46.7993 cv
385.552 44.9273 li
386.056 44.9273 386.608 44.6633 387.208 44.1353 cv
387.784 43.6073 388.456 42.7433 389.224 41.5433 cv
383.584 41.5433 li
383.584 46.2233 383.608 48.8873 383.68 49.5833 cv
382.288 50.1593 li
382.336 48.0953 382.384 46.4153 382.384 45.0713 cv
382.384 43.7273 382.336 42.0953 382.288 40.1513 cv
383.584 40.9913 li
389.512 40.9913 li
389.992 40.1753 390.376 39.4553 390.616 38.8313 cv
385.648 38.8313 li
385.096 39.5753 li
383.776 38.5433 li
384.352 37.9913 li
384.352 36.4313 384.304 34.5593 384.256 32.3513 cv
386.32 33.2153 li
385.552 33.9593 li
385.552 38.2793 li
396.256 38.2793 li
396.256 36.9113 396.208 34.9673 396.16 32.4473 cv
398.32 33.3833 li
397.48 34.0553 li
397.528 36.9833 397.552 38.7353 397.552 39.3113 cv
396.256 39.8633 li
396.256 38.8313 li
390.904 38.8313 li
392.416 39.6713 li
391.648 40.1033 391.12 40.5593 390.808 40.9913 cv
398.224 40.9913 li
398.872 40.0553 li
400.384 41.2793 li
399.616 41.8313 li
399.616 47.3513 li
399.736 48.6953 399.04 49.6073 397.552 50.0633 cv
397.552 49.2473 396.568 48.6233 394.648 48.1913 cv
394.648 47.8313 li
396.472 47.9273 397.552 47.9993 397.888 47.9993 cv
398.224 47.9993 398.416 47.8313 398.416 47.5433 cv
398.416 41.5433 li
390.52 41.5433 li
389.392 42.9833 388.312 44.1833 387.256 45.1193 cv
cp
391.288 34.1513 mo
392.152 33.4793 392.824 32.7833 393.352 32.0873 cv
394.552 33.3833 li
393.976 33.5273 393.184 33.9353 392.128 34.6073 cv
393.424 35.1833 394.216 35.6153 394.456 35.9273 cv
394.696 36.2393 394.84 36.5753 394.84 36.9593 cv
394.84 37.1513 394.792 37.3913 394.696 37.6313 cv
394.6 37.8713 394.528 37.9913 394.48 37.9913 cv
394.288 37.9913 394.048 37.7753 393.808 37.3193 cv
393.304 36.6953 392.488 36.0473 391.384 35.3513 cv
389.8 36.3113 388.144 37.0793 386.416 37.7033 cv
386.32 37.4153 li
387.928 36.6233 389.368 35.7593 390.616 34.7993 cv
389.68 34.2473 388.504 33.6233 387.064 32.9273 cv
387.16 32.6393 li
388.6 33.0953 389.968 33.5993 391.288 34.1513 cv
cp
f
407.416 40.7993 mo
407.224 42.3113 407.056 43.4393 406.936 44.1833 cv
407.608 44.8793 408.4 45.5753 409.288 46.2473 cv
409.288 37.6073 li
407.224 37.6073 li
406.408 37.6073 405.64 37.7033 404.968 37.8953 cv
404.128 37.0553 li
409.096 37.0553 li
409.096 33.1193 li
407.968 33.1193 li
407.152 33.1193 406.384 33.2153 405.712 33.3833 cv
404.872 32.5433 li
409.096 32.5433 li
409.096 30.6713 409.048 29.2553 409 28.2473 cv
411.256 29.2793 li
410.32 30.0233 li
410.32 32.5433 li
412 32.5433 li
413.032 31.5113 li
414.52 33.1193 li
410.32 33.1193 li
410.32 37.0553 li
412.096 37.0553 li
413.224 35.9273 li
414.808 37.6073 li
410.512 37.6073 li
410.512 41.6393 li
412.48 41.6393 li
413.584 40.6073 li
415.096 42.2153 li
410.512 42.2153 li
410.512 46.8953 li
412.24 47.7113 414.16 48.1193 416.272 48.1913 cv
418.36 48.2393 420.16 48.2873 421.648 48.2873 cv
423.4 48.2873 424.84 48.2393 425.968 48.1913 cv
425.968 48.5513 li
425.008 48.7433 424.456 49.1753 424.288 49.8713 cv
421.336 49.7993 418.696 49.6553 416.392 49.4393 cv
414.088 49.2233 412.192 48.7673 410.728 48.0473 cv
409.24 47.3513 407.944 46.2233 406.84 44.6393 cv
406.408 46.5833 405.496 48.3833 404.128 50.0633 cv
403.84 49.8713 li
404.776 48.1433 405.376 46.3913 405.664 44.6153 cv
405.952 42.8393 406.096 41.0633 406.096 39.3113 cv
408.16 40.2473 li
407.416 40.7993 li
cp
417.256 40.2473 mo
417.256 44.8313 li
422.68 44.8313 li
422.68 40.2473 li
417.256 40.2473 li
cp
420.064 36.0233 mo
420.88 36.1673 421.456 36.2153 421.84 36.2153 cv
422.032 36.2153 422.224 36.1913 422.44 36.1193 cv
422.656 36.0713 422.824 35.6633 422.92 34.8953 cv
423.016 34.1513 423.112 32.8793 423.256 31.0553 cv
419.32 31.0553 li
419.176 34.7993 417.376 37.5593 413.872 39.3113 cv
413.68 38.9273 li
416.368 37.0553 417.736 34.4393 417.808 31.0553 cv
416.992 31.0553 416.224 31.1513 415.552 31.3193 cv
414.712 30.4793 li
423.16 30.4793 li
424 29.5433 li
425.224 30.7673 li
424.552 31.3193 li
424.432 33.2873 424.312 34.6313 424.192 35.3753 cv
424.048 36.1193 423.856 36.6713 423.616 37.0553 cv
423.376 37.4393 422.896 37.7753 422.224 38.0873 cv
421.888 37.3433 421.168 36.7673 420.064 36.3833 cv
420.064 36.0233 li
cp
415.84 38.7353 mo
417.352 39.6713 li
422.512 39.6713 li
423.448 38.6393 li
424.84 40.0553 li
423.904 40.6073 li
423.904 43.2953 423.928 45.1913 424 46.2473 cv
422.68 46.7993 li
422.68 45.3833 li
417.256 45.3833 li
417.256 46.7033 li
415.84 47.4473 li
415.888 45.5753 415.936 43.9673 415.936 42.6233 cv
415.936 41.2793 415.888 39.9833 415.84 38.7353 cv
cp
f
439.648 45.0233 mo
439.648 46.4153 439.672 47.7833 439.744 49.1273 cv
438.16 49.7753 li
438.208 47.8553 438.256 46.1273 438.256 44.5433 cv
438.256 39.1193 li
430.936 39.1193 li
430.12 39.1193 429.352 39.2153 428.68 39.3833 cv
427.84 38.5433 li
438.256 38.5433 li
438.256 30.6713 li
433 30.6713 li
432.184 30.6713 431.416 30.7673 430.744 30.9593 cv
429.904 30.1193 li
445.192 30.1193 li
446.512 28.7993 li
448.384 30.6713 li
439.648 30.6713 li
439.648 38.5433 li
446.512 38.5433 li
447.904 37.1513 li
449.872 39.1193 li
439.648 39.1193 li
439.648 45.0233 li
cp
444.808 31.6073 mo
446.776 33.1193 li
446.272 33.1193 445.576 33.6953 444.712 34.7993 cv
443.776 35.9273 442.768 36.9833 441.712 37.9913 cv
441.448 37.7993 li
443.056 35.6153 444.184 33.5513 444.808 31.6073 cv
cp
431.872 32.0873 mo
433.672 33.4073 434.728 34.2953 435.04 34.7513 cv
435.352 35.2313 435.52 35.6393 435.52 36.0233 cv
435.52 36.2153 435.472 36.4553 435.376 36.7433 cv
435.28 37.0313 435.064 37.2953 434.728 37.5353 cv
434.392 37.7753 434.056 37.3433 433.744 36.2153 cv
433.432 35.1593 432.712 33.8393 431.584 32.2793 cv
431.872 32.0873 li
cp
f
460.936 43.4153 mo
460.936 47.5433 li
464.872 47.5433 li
464.872 43.4153 li
460.936 43.4153 li
cp
460.288 34.4153 mo
460.768 32.9993 461.128 31.6553 461.32 30.3833 cv
455.32 30.3833 li
454.36 30.3833 453.544 30.4793 452.872 30.6713 cv
452.032 29.8313 li
470.776 29.8313 li
472.288 28.4153 li
473.968 30.3833 li
462.256 30.3833 li
463.648 31.1513 li
462.712 31.4153 li
461.944 32.4953 461.32 33.5033 460.84 34.4153 cv
470.032 34.4153 li
470.68 33.4793 li
472.192 34.6073 li
471.52 35.2793 li
471.52 40.8953 471.544 45.5753 471.616 49.3193 cv
470.224 49.9673 li
470.224 48.0953 li
455.68 48.0953 li
455.68 49.3913 li
454.288 50.0633 li
454.336 47.8793 454.384 45.0953 454.384 41.6873 cv
454.384 38.2793 454.336 35.6153 454.288 33.6713 cv
455.68 34.4153 li
460.288 34.4153 li
cp
455.68 34.9913 mo
455.68 47.5433 li
459.712 47.5433 li
459.712 34.9913 li
455.68 34.9913 li
cp
466.096 34.9913 mo
466.096 47.5433 li
470.224 47.5433 li
470.224 34.9913 li
466.096 34.9913 li
cp
460.936 34.9913 mo
460.936 38.5433 li
464.872 38.5433 li
464.872 34.9913 li
460.936 34.9913 li
cp
460.936 39.1193 mo
460.936 42.8633 li
464.872 42.8633 li
464.872 39.1193 li
460.936 39.1193 li
cp
f
2 lc
[] 0 dsh
287.8 73.5563 mo
311.8 73.5563 li
335.8 73.5563 li
0 1 1 0 cmyk
@
365.68 65.8283 mo
375.448 65.8283 li
376.288 64.8923 li
377.68 66.1163 li
376.84 66.7643 li
376.336 76.2683 375.856 81.4523 375.376 82.2683 cv
374.896 83.0843 374.152 83.6603 373.096 83.9963 cv
372.712 83.0363 371.68 82.3643 370 81.9563 cv
370 81.4763 li
372.112 81.7403 373.288 81.8603 373.504 81.8123 cv
373.72 81.7883 373.96 81.5963 374.248 81.2603 cv
374.536 80.9243 374.944 75.9563 375.52 66.4043 cv
370.384 66.4043 li
370.312 69.1403 370.096 71.5643 369.76 73.6523 cv
369.424 75.7643 368.728 77.6603 367.696 79.3883 cv
366.664 81.1163 365.152 82.5563 363.16 83.8043 cv
362.968 83.5163 li
364.696 81.9803 365.992 80.4443 366.856 78.8603 cv
367.696 77.3003 368.248 75.4763 368.536 73.3883 cv
368.824 71.3003 368.992 68.9723 369.064 66.4043 cv
367.648 66.4043 li
366.448 66.5723 li
365.68 65.8283 li
cp
359.968 62.1803 mo
361.768 63.2363 362.68 64.0523 362.728 64.6043 cv
362.752 65.1803 362.632 65.5643 362.392 65.7803 cv
362.152 66.0203 361.96 66.1163 361.84 66.1163 cv
361.6 66.1163 361.408 65.8523 361.288 65.2763 cv
361.024 64.5323 360.496 63.5963 359.68 62.4443 cv
359.968 62.1803 li
cp
362.032 73.5083 mo
362.224 73.5803 362.536 73.6763 362.968 73.7963 cv
364.072 72.0683 364.84 70.7723 365.224 69.9563 cv
366.712 71.2763 li
366.208 71.4683 365.68 71.7803 365.128 72.2603 cv
364.552 72.7403 364 73.3163 363.448 73.9883 cv
364.864 74.5643 365.632 74.9723 365.728 75.2603 cv
365.824 75.5483 365.872 75.8123 365.872 76.0523 cv
365.872 76.4363 365.8 76.7243 365.68 76.9403 cv
365.56 77.1803 365.464 77.2763 365.416 77.2763 cv
365.224 77.2763 364.984 77.0363 364.744 76.5083 cv
364.312 75.8843 363.4 75.0443 362.032 73.9883 cv
362.032 80.7323 li
362.032 81.5003 362.056 82.4123 362.128 83.5163 cv
360.712 84.0923 li
360.76 81.9803 360.808 80.3963 360.808 79.3403 cv
360.808 72.4763 li
359.296 74.1803 357.712 75.5483 356.032 76.6043 cv
355.84 76.3403 li
357.28 75.0923 358.576 73.7243 359.728 72.2603 cv
360.88 70.7963 361.936 69.1883 362.872 67.4363 cv
359.32 67.4363 li
358.504 67.4363 357.736 67.5323 357.064 67.7003 cv
356.224 66.8603 li
362.872 66.8603 li
363.712 66.0203 li
365.128 67.4363 li
364.192 67.8923 li
363.304 69.0923 362.584 70.0763 362.032 70.8923 cv
362.032 73.5083 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
392.512 75.2123 mo
392.512 81.4043 li
398.68 81.4043 li
398.68 75.2123 li
392.512 75.2123 li
cp
394.096 62.2763 mo
396.16 63.5723 li
395.32 64.0523 li
393.376 67.5563 392.032 69.7403 391.288 70.6043 cv
392.776 70.5563 395.488 70.4603 399.448 70.3403 cv
398.824 69.1403 397.96 67.9883 396.904 66.8603 cv
397.192 66.5723 li
399.688 68.2763 401.008 69.3563 401.176 69.7883 cv
401.32 70.2203 401.416 70.6043 401.416 70.8923 cv
401.416 71.3243 401.272 71.7083 401.032 72.0203 cv
400.768 72.3323 400.576 72.4763 400.456 72.4763 cv
400.336 72.4763 400.24 72.3563 400.192 72.1163 cv
400 71.6843 399.808 71.2283 399.616 70.7963 cv
396.928 70.9883 394.912 71.2283 393.568 71.5163 cv
392.224 71.8043 391.288 72.1403 390.808 72.5723 cv
389.68 70.6043 li
390.352 70.3643 391.096 69.5243 391.888 68.0843 cv
392.656 66.6443 393.4 64.7243 394.096 62.2763 cv
cp
400 75.5723 mo
400 79.9403 400.024 82.4603 400.096 83.1563 cv
398.68 83.8043 li
398.68 81.9563 li
392.512 81.9563 li
392.512 83.4443 li
391.096 83.9963 li
391.144 83.0363 391.192 81.4283 391.192 79.0763 cv
391.192 76.7483 391.144 74.9963 391.096 73.7963 cv
392.512 74.6363 li
398.512 74.6363 li
399.16 73.7003 li
400.744 74.9243 li
400 75.5723 li
cp
384.616 68.7323 mo
384.184 70.1723 383.44 72.7163 382.384 76.3403 cv
383.488 76.7243 384.52 77.0843 385.48 77.4443 cv
386.392 75.3323 387.136 72.4283 387.712 68.7323 cv
384.616 68.7323 li
cp
386.68 63.4763 mo
385.84 64.0523 li
385.6 64.8683 385.216 66.2603 384.712 68.1803 cv
387.616 68.1803 li
388.288 67.3403 li
389.776 68.5403 li
389.032 69.1163 li
388.336 72.8603 387.544 75.8123 386.68 77.9243 cv
387.88 78.5483 388.6 79.0283 388.84 79.3403 cv
389.08 79.6523 389.224 80.0603 389.224 80.5403 cv
389.224 80.8763 389.176 81.1643 389.128 81.4523 cv
389.056 81.7403 388.984 81.8603 388.936 81.8603 cv
388.744 81.8603 388.48 81.6203 388.192 81.1163 cv
387.616 80.3003 386.968 79.5803 386.224 78.9563 cv
384.64 81.2123 382.72 82.9403 380.416 84.1883 cv
380.224 83.9003 li
382.408 82.1723 384.04 80.3483 385.096 78.4043 cv
383.512 77.5403 382.216 76.8923 381.16 76.5083 cv
381.904 74.0123 382.624 71.4203 383.32 68.7323 cv
383.128 68.7323 li
382.312 68.7323 381.544 68.8283 380.872 69.0203 cv
380.032 68.1803 li
383.416 68.1803 li
384.04 65.4923 384.4 63.5963 384.52 62.4443 cv
386.68 63.4763 li
cp
f
411.808 63.0203 mo
413.68 64.4363 li
412.84 64.8923 li
411.784 66.9083 410.608 68.6843 409.336 70.2443 cv
408.04 71.8043 406.408 73.1723 404.416 74.3723 cv
404.224 74.0843 li
405.832 72.7883 407.272 71.2283 408.52 69.4523 cv
409.768 67.6763 410.872 65.5163 411.808 63.0203 cv
cp
418.384 63.3083 mo
417.616 63.7643 li
418.288 66.2603 419.416 68.2043 421 69.5723 cv
422.56 70.9643 424.216 71.8043 425.968 72.1163 cv
425.968 72.4043 li
425.008 72.5243 424.36 72.9323 424 73.6043 cv
421.936 72.5003 420.28 70.9883 419.08 69.1163 cv
417.856 67.2443 417.016 65.0603 416.584 62.5403 cv
418.384 63.3083 li
cp
408.16 72.1163 mo
418.84 72.1163 li
419.776 71.1803 li
421.096 72.4763 li
420.352 73.0523 li
420.208 77.9963 419.896 80.9723 419.392 81.9803 cv
418.888 82.9883 418.024 83.7323 416.776 84.1883 cv
416.584 83.1803 415.72 82.4603 414.16 82.0283 cv
414.16 81.6683 li
415.72 81.9083 416.728 82.0043 417.208 81.9803 cv
417.664 81.9563 418.024 81.6203 418.264 80.9243 cv
418.504 80.2523 418.768 77.4923 419.032 72.6683 cv
414.16 72.6683 li
413.776 75.3563 413.008 77.6363 411.904 79.4603 cv
410.776 81.3083 408.616 82.8923 405.448 84.2843 cv
405.256 83.9003 li
408.064 82.4603 409.96 80.7803 410.92 78.8123 cv
411.88 76.8443 412.456 74.8043 412.648 72.6683 cv
409.744 72.6683 li
408.904 72.8603 li
408.16 72.1163 li
cp
f
431.68 78.2123 mo
431.68 82.3163 li
437.68 82.3163 li
437.68 78.2123 li
431.68 78.2123 li
cp
433.096 62.2763 mo
434.776 63.0923 435.568 63.7403 435.472 64.2443 cv
435.376 64.7483 435.256 65.0603 435.112 65.1803 cv
434.944 65.3243 434.8 65.3723 434.68 65.3723 cv
434.488 65.3723 434.368 65.1803 434.32 64.7963 cv
434.128 64.3163 433.648 63.5483 432.904 62.5403 cv
433.096 62.2763 li
cp
438.616 67.8923 mo
438.928 67.2203 439.216 66.6203 439.48 66.1163 cv
430.384 66.1163 li
430.24 67.2443 430 67.8923 429.664 68.0843 cv
429.328 68.2763 429.064 68.3723 428.872 68.3723 cv
428.68 68.3723 428.512 68.3243 428.392 68.2283 cv
428.272 68.1323 428.224 68.0603 428.224 67.9883 cv
428.224 67.7483 428.392 67.4603 428.776 67.1483 cv
429.256 66.7163 429.664 65.8523 430 64.6043 cv
430.384 64.6043 li
430.384 65.5403 li
439.48 65.5403 li
440.224 64.6043 li
441.712 66.1163 li
441.136 66.1883 440.68 66.3563 440.344 66.5963 cv
440.008 66.8363 439.552 67.3163 439 67.9883 cv
438.616 67.8923 li
cp
435.448 75.4043 mo
435.448 75.9083 435.472 76.3163 435.52 76.6043 cv
434.128 77.1803 li
434.176 76.5083 434.224 75.9083 434.224 75.4043 cv
431.224 75.4043 li
430.408 75.4043 429.64 75.5003 428.968 75.6683 cv
428.128 74.8283 li
434.224 74.8283 li
434.224 72.6683 li
431.584 72.6683 li
430.384 72.8603 li
429.616 72.1163 li
434.224 72.1163 li
434.224 69.7643 li
430.936 69.7643 li
429.808 69.9563 li
429.064 69.2123 li
434.224 69.2123 li
434.224 68.1563 434.176 67.1723 434.128 66.3083 cv
436.192 67.1483 li
435.448 67.7003 li
435.448 69.2123 li
438.256 69.2123 li
439.192 68.2763 li
440.68 69.7643 li
435.448 69.7643 li
435.448 72.1163 li
437.872 72.1163 li
438.712 71.2763 li
440.128 72.6683 li
435.448 72.6683 li
435.448 74.8283 li
439.552 74.8283 li
440.584 73.7963 li
442.192 75.4043 li
435.448 75.4043 li
cp
430.384 84.1883 mo
430.432 82.9883 430.48 81.8123 430.48 80.5883 cv
430.48 79.3883 430.432 78.1403 430.384 76.8923 cv
431.68 77.6363 li
437.584 77.6363 li
438.448 76.7963 li
439.552 77.9243 li
438.904 78.4043 li
438.904 80.8283 438.928 82.4603 439 83.3483 cv
437.68 83.9003 li
437.68 82.8683 li
431.68 82.8683 li
431.68 83.6123 li
430.384 84.1883 li
cp
444.52 67.7003 mo
444.52 75.5723 li
444.52 76.5323 444.544 77.3723 444.616 78.1163 cv
443.224 78.6683 li
443.272 76.7963 443.32 74.6363 443.32 72.1643 cv
443.32 69.6923 443.272 67.6523 443.224 66.0203 cv
445.192 67.0523 li
444.52 67.7003 li
cp
443.512 82.4123 mo
443.512 81.9563 li
445.552 82.1963 446.704 82.2683 446.968 82.2203 cv
447.208 82.1483 447.352 81.9563 447.352 81.5723 cv
447.352 67.7003 li
447.352 65.7083 447.304 64.0283 447.256 62.6363 cv
449.224 63.4763 li
448.552 64.1483 li
448.552 81.7643 li
448.552 82.5563 448.408 83.1083 448.168 83.4203 cv
447.928 83.7323 447.448 84.0203 446.776 84.2843 cv
446.536 83.3963 445.432 82.7723 443.512 82.4123 cv
cp
f
465.616 69.2123 mo
465.616 70.0763 465.664 71.2283 465.808 72.6683 cv
470.224 72.2123 li
471.448 70.7963 li
473.32 72.4043 li
465.904 73.1483 li
466.096 75.0923 466.408 76.6283 466.84 77.7323 cv
468.208 76.4843 469.312 75.1883 470.128 73.7963 cv
471.808 75.4763 li
470.968 75.5723 li
469.768 76.7243 468.592 77.8523 467.416 78.9563 cv
468.52 80.5403 469.84 81.6203 471.352 82.2203 cv
472.648 77.7323 li
473.032 77.8283 li
472.888 79.2683 472.816 80.4683 472.792 81.3803 cv
472.744 82.2923 472.888 83.0363 473.224 83.6123 cv
473.272 83.7323 473.32 83.8283 473.32 83.9003 cv
473.32 84.1403 472.984 84.2363 472.336 84.1403 cv
471.664 84.0443 470.8 83.6603 469.696 83.0123 cv
468.592 82.3403 467.488 81.3323 466.384 79.8923 cv
465.232 80.6603 464.104 81.2843 462.952 81.7643 cv
461.8 82.2443 460.336 82.7243 458.584 83.2523 cv
458.512 82.8683 li
461.176 81.9083 463.576 80.5403 465.712 78.7643 cv
465.136 77.0843 464.776 75.2843 464.584 73.3403 cv
460.744 73.7963 li
460 74.1803 li
458.968 73.4363 li
464.512 72.8603 li
464.44 71.9963 464.368 70.7963 464.32 69.3083 cv
461.584 69.4763 li
461.032 69.8603 li
460.192 69.1163 li
464.32 68.8283 li
464.248 66.6443 464.176 64.4603 464.128 62.2763 cv
466.288 63.3083 li
465.52 63.9563 li
465.52 65.2763 465.544 66.8603 465.616 68.7323 cv
469.648 68.3723 li
470.872 66.9563 li
472.744 68.6363 li
465.616 69.2123 li
cp
467.032 63.8603 mo
467.128 63.5723 li
469.048 64.1003 470.104 64.5323 470.296 64.8683 cv
470.488 65.2043 470.584 65.4923 470.584 65.7323 cv
470.584 66.0683 470.512 66.3803 470.392 66.6923 cv
470.272 67.0043 470.152 67.1483 470.032 67.1483 cv
469.888 67.1483 469.72 66.9083 469.48 66.4043 cv
469.024 65.7323 468.208 64.8683 467.032 63.8603 cv
cp
456.712 62.6363 mo
458.584 63.8603 li
458.08 64.0523 457.552 64.6763 457 65.7323 cv
456.424 66.8843 455.392 68.4683 453.904 70.5083 cv
457.744 70.1483 li
458.488 68.9003 459.088 67.6523 459.52 66.4043 cv
461.224 67.6043 li
460.768 67.8683 460.024 68.7803 458.968 70.3403 cv
457.912 71.9003 456.52 73.7723 454.84 75.9563 cv
455.704 75.8363 457.648 75.5003 460.648 74.9243 cv
460.648 75.3083 li
458.968 75.7403 457.648 76.1483 456.712 76.4843 cv
455.776 76.8203 454.84 77.3003 453.904 77.9243 cv
452.776 75.9563 li
453.448 75.7643 454.24 75.0923 455.152 73.9403 cv
456.064 72.7883 456.856 71.6603 457.552 70.5083 cv
456.856 70.6523 456.136 70.8203 455.392 71.0363 cv
454.648 71.2763 453.976 71.6603 453.352 72.2123 cv
452.32 70.4363 li
452.992 70.3163 453.784 69.4283 454.696 67.7723 cv
455.608 66.1163 456.28 64.4123 456.712 62.6363 cv
cp
452.224 80.5403 mo
453.952 80.3003 455.368 80.0843 456.424 79.8923 cv
457.48 79.7003 459.208 79.3643 461.584 78.8603 cv
461.68 79.2443 li
458.872 80.0603 456.832 80.6843 455.536 81.1643 cv
454.24 81.6443 453.448 82.0043 453.16 82.3163 cv
452.224 80.5403 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
